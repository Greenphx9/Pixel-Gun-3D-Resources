Respository by HorridModz (User123456789#6424).
This resource is PUBLIC. You can DISTRIBUTE it to ANYONE with credit.

This respository took tens and tens of hours to make. It is the combined work of searching for every single possible string I could think of and writing down the results.
I am sorry it is so messy. It was meant to be for personal notes, but it became so big! Not everything will do what it's caption says. Most things are untested.

This repository includes:
-Labeled methods, classes, fields, and notes. Most of these are from pixel gun 3d version 16.6.1, 22.3.2, 22.4.0, or 22.4.3.
-Notes about how to find things and deobfuscate them
-Script templates

How to use this repository:
-This is not a tutorial or a mod. It is just a document of my personal notes. This is a resource for hex patching or creating mod menus. If you do not know what you are doing, do not use this.
-Search for a keyword such as "silent aim" or "unlock all"
-Choose one of the methods (or fields or whatever) to use
-Try to find this in the current game version
-Make a mod menu or gameguardian script using the offset
-Test it and see what it does. Feel free to change the caption if it does not do what it said it does. Most don't, as they are untested.

I hope you enjoy using this resource. I can make repositories like this for any game. (Of course,as long as you have an unobfuscated and unprotected version of the game. I'm not going to give you a bunch of free fire hacks xD I'm not that smart.) Tell me if you would like a respository for a certain game.


22.4.0 value decryption disabler (vd3) I think (credit to DarkOctet#5778):
// RVA: 0x3866828 Offset: 0x3866828 VA: 0x3866828
	internal static int 丅丄万三业业一上丙(int 业丅丝上万三上丕七) { }
// Namespace: 
internal sealed class 丅丅不丝丛下丌且丌 // TypeDefIndex: 12289
{
	// Methods

	// RVA: 0x3866828 Offset: 0x3866828 VA: 0x3866828
	internal static int 丅丄万三业业一上丙(int 业丅丝上万三上丕七) { }

	// RVA: 0x3866D84 Offset: 0x3866D84 VA: 0x3866D84
	public void .ctor() { }
}
DarkOctet#5778's 22.3.2 Godmode (To use, dump 64bit pg3d 22.3.2 and open the 64bit libil2cpp in a hex editor. Then, search for this number in the hex editor and get the offset of it. Finally, search for the offset in dump.cs to get the method, and do the normal steps that are done with the other methods here.):
-6191600798925201816
Useful hacks but fields:
RPG_Controller
AlmanachController Class Find (Search in dump.cs) (this is a note for me, you probably won't get this):
"(AlmanachCollectWeaponsStep "
Pixel pass section:
// PGCompany.PixelPass
Lottery class:
Game event chest
Clan war class:
ClanWarController

Damage multipliers?:
private const float breakoutFirstDamageMultiplier = 0.5f;
// Token: 0x04002D51 RID: 11601
[Token(Token = "0x4002336")]
private const float breakoutNextDamageMultiplier = 0.7f;

Is gadget effect active 2:
// Player_move_c
// Token: 0x06002FB6 RID: 12214 RVA: 0x0000E760 File Offset: 0x0000C960
[Token(Token = "0x6002602")]
[Address(RVA = "0xF1C618", Offset = "0xF1C618", VA = "0xF1C618")]
internal bool IsGadgetEffectActive(Player_move_c.GadgetEffect effect)
{
	return default(bool);
}
Pick up item count?:
// PickUpObjectSystem.三丄东下丈与业丄丌
// Token: 0x17001C28 RID: 7208
// (get) Token: 0x0600C11D RID: 49437 RVA: 0x00034938 File Offset: 0x00032B38
// (set) Token: 0x0600C11E RID: 49438 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001C28")]
internal int 业丅丝上万三上丕七
{
	[Token(Token = "0x600C11D")]
	[Address(RVA = "0x40B4A28", Offset = "0x40B4A28", VA = "0x40B4A28")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1D87F94", Offset = "0x1D87F94")]
	get
	{
		return 0;
	}
	[Token(Token = "0x600C11E")]
	[Address(RVA = "0x40B4A30", Offset = "0x40B4A30", VA = "0x40B4A30")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1D87FA4", Offset = "0x1D87FA4")]
	private set
	{
	}
}
Is module available:
// PlayerModules
// Token: 0x17000DEF RID: 3567
// (get) Token: 0x06005588 RID: 21896 RVA: 0x00018180 File Offset: 0x00016380
[Token(Token = "0x170009CE")]
internal static bool isAvailable
{
	[Token(Token = "0x600414A")]
	[Address(RVA = "0x16E268C", Offset = "0x16E268C", VA = "0x16E268C")]
	get
	{
		return default(bool);
	}
}
Get weapon damage maybe received (godmode?) I think:
// PlayerModules
// Token: 0x06005580 RID: 21888 RVA: 0x00018138 File Offset: 0x00016338
[Token(Token = "0x6004142")]
[Address(RVA = "0x16E2918", Offset = "0x16E2918", VA = "0x16E2918")]
internal static float GetWeaponDamageAndShowResist(WeaponSounds weapon, Transform target)
{
	return 0f;
}
Get gadget damage maybe received I think:
// PlayerModules
// Token: 0x06005581 RID: 21889 RVA: 0x00018150 File Offset: 0x00016350
[Token(Token = "0x6004143")]
[Address(RVA = "0x16E3230", Offset = "0x16E3230", VA = "0x16E3230")]
internal static float GetGadgetDamageAndShowResist(float gadgetDamage, Dictionary<int, float> gadgetModules, Transform target)
{
	return 0f;
}
Get module value:
// PlayerModules
// Token: 0x06005582 RID: 21890 RVA: 0x00018168 File Offset: 0x00016368
[Token(Token = "0x6004144")]
[Address(RVA = "0x16E39DC", Offset = "0x16E39DC", VA = "0x16E39DC")]
private static float GetConvertedModuleModificator(ModuleData.ModuleType moduleType, float modificator)
{
	return 0f;
}
Banned ID Hash:
// PlayerIdResetter
// Token: 0x17000EA3 RID: 3747
// (get) Token: 0x0600593B RID: 22843 RVA: 0x00002050 File Offset: 0x00000250
// (set) Token: 0x0600593C RID: 22844 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A46")]
internal static string BannedIdHash
{
	[Token(Token = "0x600440C")]
	[Address(RVA = "0x16E0BA8", Offset = "0x16E0BA8", VA = "0x16E0BA8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA94C", Offset = "0x6DA94C")]
	get
	{
		return null;
	}
	[Token(Token = "0x600440D")]
	[Address(RVA = "0x16E0C0C", Offset = "0x16E0C0C", VA = "0x16E0C0C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA95C", Offset = "0x6DA95C")]
	set
	{
	}
}
Banned ID:
// PlayerIdResetter
// Token: 0x17000EA2 RID: 3746
// (get) Token: 0x06005939 RID: 22841 RVA: 0x00002050 File Offset: 0x00000250
// (set) Token: 0x0600593A RID: 22842 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A45")]
internal static string BannedId
{
	[Token(Token = "0x600440A")]
	[Address(RVA = "0x16E0AE0", Offset = "0x16E0AE0", VA = "0x16E0AE0")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA92C", Offset = "0x6DA92C")]
	get
	{
		return null;
	}
	[Token(Token = "0x600440B")]
	[Address(RVA = "0x16E0B44", Offset = "0x16E0B44", VA = "0x16E0B44")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA93C", Offset = "0x6DA93C")]
	set
	{
	}
}
Should reset id (id changer / antiban?):
// PlayerIdResetter
// Token: 0x0600593E RID: 22846 RVA: 0x00018F48 File Offset: 0x00017148
[Token(Token = "0x600440F")]
[Address(RVA = "0x16E0CD8", Offset = "0x16E0CD8", VA = "0x16E0CD8")]
internal static bool ShouldResetId()
{
	return default(bool);
}
Is team blue or red bot something:
// PlayerBotsManager
// Token: 0x17000E99 RID: 3737
// (get) Token: 0x06005919 RID: 22809 RVA: 0x00018EB8 File Offset: 0x000170B8
[Token(Token = "0x17000A40")]
private bool IsPlayerTeamBlue
{
	[Token(Token = "0x60043FA")]
	[Address(RVA = "0x16C8990", Offset = "0x16C8990", VA = "0x16C8990")]
	get
	{
		return default(bool);
	}
}
Are you winning team fight for bots (idk ez mode?):
// PlayerBotsManager
// Token: 0x17000E9A RID: 3738
// (get) Token: 0x0600591A RID: 22810 RVA: 0x00018ED0 File Offset: 0x000170D0
[Token(Token = "0x17000A41")]
private bool IsPlayerTeamWinning
{
	[Token(Token = "0x60043FB")]
	[Address(RVA = "0x16C8A54", Offset = "0x16C8A54", VA = "0x16C8A54")]
	get
	{
		return default(bool);
	}
}
Are you winning team fight for bots (idk ez mode?):
// PlayerBotsManager
// Token: 0x17000E9B RID: 3739
// (get) Token: 0x0600591B RID: 22811 RVA: 0x00018EE8 File Offset: 0x000170E8
[Token(Token = "0x17000A42")]
private bool IsPlayerWinning
{
	[Token(Token = "0x60043FC")]
	[Address(RVA = "0x16C8C44", Offset = "0x16C8C44", VA = "0x16C8C44")]
	get
	{
		return default(bool);
	}
}

// PickUpObjectSystem.三丄东下丈与业丄丌
// Token: 0x17001C25 RID: 7205
// (get) Token: 0x0600C117 RID: 49431 RVA: 0x000348F0 File Offset: 0x00032AF0
// (set) Token: 0x0600C118 RID: 49432 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001C25")]
internal int 丙不丛东丘丘丛上丘
{
	[Token(Token = "0x600C117")]
	[Address(RVA = "0x40B05E0", Offset = "0x40B05E0", VA = "0x40B05E0")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1D87F34", Offset = "0x1D87F34")]
	get
	{
		return 0;
	}
	[Token(Token = "0x600C118")]
	[Address(RVA = "0x40B4A10", Offset = "0x40B4A10", VA = "0x40B4A10")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1D87F44", Offset = "0x1D87F44")]
	private set
	{
	}
}
// PickUpObjectSystem.三丄东下丈与业丄丌
// Token: 0x17001C26 RID: 7206
// (get) Token: 0x0600C119 RID: 49433 RVA: 0x00034908 File Offset: 0x00032B08
// (set) Token: 0x0600C11A RID: 49434 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001C26")]
internal int 丞丛业丐专上丕万丁
{
	[Token(Token = "0x600C119")]
	[Address(RVA = "0x40B067C", Offset = "0x40B067C", VA = "0x40B067C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1D87F54", Offset = "0x1D87F54")]
	get
	{
		return 0;
	}
	[Token(Token = "0x600C11A")]
	[Address(RVA = "0x40B4A18", Offset = "0x40B4A18", VA = "0x40B4A18")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1D87F64", Offset = "0x1D87F64")]
	private set
	{
	}
}
Premium price:
// UnlockPremiumMapView
// Token: 0x17000E97 RID: 3735
// (get) Token: 0x06005EED RID: 24301 RVA: 0x0001A508 File Offset: 0x00018708
// (set) Token: 0x06005EEE RID: 24302 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000E97")]
public int 丞东不与丗且丆丌与
{
	[Token(Token = "0x6005EED")]
	[Address(RVA = "0x3F65794", Offset = "0x3F65794", VA = "0x3F65794")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6005EEE")]
	[Address(RVA = "0x3F6579C", Offset = "0x3F6579C", VA = "0x3F6579C")]
	set
	{
	}
}
Lottery and sets:
// Rilisoft.GameEventItemData
// Token: 0x170022E2 RID: 8930
// (get) Token: 0x0600E5E8 RID: 58856 RVA: 0x0003EA48 File Offset: 0x0003CC48
[Token(Token = "0x170022E2")]
[IgnoreMember]
[JsonIgnore]
public int Count
{
	[Token(Token = "0x600E5E8")]
	[Address(RVA = "0x41B6390", Offset = "0x41B6390", VA = "0x41B6390")]
	get
	{
		return 0;
	}
}
Lottery And Sets Script:
hex = "FF C3 00 D1 F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 F4 21 02 D0 88 FE 47 39 F3 03 00 AA E8 00 00 37 C8 EF 01 90 08 91 44"
version = 22.4.3
gg.setRanges(gg.REGION_ANONYMOUS)
gg.setVisible(false)
gg.alert("WARNING: THIS SCRIPT MAY BE BANNABLE! USE AT YOUR OWN RISK! 150 should be safe, 45k is very dangerous.")
edithex = {"E0 01 80 52","80 3E 80 52","00 71 82 52","60 C3 89 52","60 87 93 52","00 F9 95 52"}
editto = gg.multiChoice({"300","500","5000","20000","40000","45000"},nil,"Pixel gun 3d lottery and sets script by HorridModz(User123456789#6424) - thanks to BoredKarma#0001 for originally discovering and giving me an outdated version this hack in 22.3.2. This script is ONLY for version" .. Version ..  "on 64BIT devices")
if editto == nil then
os.exit()
end
i = 0
while not editto[i] do
i = i + 1
if i > #editto then
os.exit()
end
end
gg.clearResults()
gg.searchNumber("h" .. hex,gg.TYPE_BYTE)
if gg.getResultsCount() < 8 then
gg.alert("This script is only for 22.4.3 on 64bit devices!")
else
gg.getResults(8)
gg.editAll("h " .. edithex[i] .. " C0 03 5F D6",gg.TYPE_BYTE)
gg.toast("Hack enabled!")
end
Clan num of currency (probably ban):
// ClanCurrencyUpdater
// Token: 0x06000A02 RID: 2562 RVA: 0x00004CC8 File Offset: 0x00002EC8
[Token(Token = "0x60007D6")]
[Address(RVA = "0x173504C", Offset = "0x173504C", VA = "0x173504C", Slot = "6")]
protected override int NumOfCurrency()
{
	return 0;
}
Has item:
// Storager
// Token: 0x0600623A RID: 25146 RVA: 0x0001BC18 File Offset: 0x00019E18
[Token(Token = "0x6004A1B")]
[Address(RVA = "0x12F5708", Offset = "0x12F5708", VA = "0x12F5708")]
internal static bool HasItem(string storageId, bool doEditorChecks = true)
{
	return default(bool);
}
Has item core (idk):
// Storager
// Token: 0x0600623B RID: 25147 RVA: 0x0001BC30 File Offset: 0x00019E30
[Token(Token = "0x6004A1C")]
[Address(RVA = "0x12F5970", Offset = "0x12F5970", VA = "0x12F5970")]
internal static bool HasItemCore(string storageId)
{
	return default(bool);
}
Get item int:
// Storager
// Token: 0x0600624B RID: 25163 RVA: 0x0001BC78 File Offset: 0x00019E78
[Token(Token = "0x6004A2C")]
[Address(RVA = "0x12EEBB4", Offset = "0x12EEBB4", VA = "0x12EEBB4")]
internal static int getInt(string key, bool suppressWarningsInEditor = false, bool directReadForCurrencyMigration = false, bool directReadForCurrencyMigrationV2 = false)
{
	return 0;
}
Has key (idk):
// Storager
// Token: 0x06006249 RID: 25161 RVA: 0x0001BC60 File Offset: 0x00019E60
[Token(Token = "0x6004A2A")]
[Address(RVA = "0x12F51F0", Offset = "0x12F51F0", VA = "0x12F51F0")]
internal static bool hasKey(string key)
{
	return default(bool);
}
Has stored items key (idk):
// Storager
// Token: 0x06006241 RID: 25153 RVA: 0x0001BC48 File Offset: 0x00019E48
[Token(Token = "0x6004A22")]
[Address(RVA = "0x12F6CBC", Offset = "0x12F6CBC", VA = "0x12F6CBC")]
internal static bool HasStoredItemsKey()
{
	return default(bool);
}

Item picked up maybe?:
// PickUpObjectSystem.且丝下东东丁丂七丘
// Token: 0x17001C17 RID: 7191
// (get) Token: 0x0600C0B0 RID: 49328 RVA: 0x00034710 File Offset: 0x00032910
// (set) Token: 0x0600C0B1 RID: 49329 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001C17")]
internal bool 丐丝丐丟丗丈上专丙
{
	[Token(Token = "0x600C0B0")]
	[Address(RVA = "0x40B7900", Offset = "0x40B7900", VA = "0x40B7900")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1D87CD8", Offset = "0x1D87CD8")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x600C0B1")]
	[Address(RVA = "0x40B7908", Offset = "0x40B7908", VA = "0x40B7908")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1D87CE8", Offset = "0x1D87CE8")]
	private set
	{
	}
}
Battle royale already has weapon (pick up twice lol):
// PickUpObjectSystem.PickUpObject
// Token: 0x0600C0F5 RID: 49397 RVA: 0x00034830 File Offset: 0x00032A30
[Token(Token = "0x600C0F5")]
[Address(RVA = "0x40AFF1C", Offset = "0x40AFF1C", VA = "0x40AFF1C", Slot = "7")]
public bool AlreadyHaveThisWeapon()
{
	return default(bool);
}
1 point for super chest (novice = super)(free super)
Probably
// Rilisoft.GameEventProgressBar
// Token: 0x17001C4D RID: 7245
// (get) Token: 0x0600AC59 RID: 44121 RVA: 0x0002F5B0 File Offset: 0x0002D7B0
[Token(Token = "0x17001575")]
private int ToOpenSpins
{
	[Token(Token = "0x600826E")]
	[Address(RVA = "0x1F55800", Offset = "0x1F55800", VA = "0x1F55800")]
	get
	{
		return 0;
	}
}

But maybe
// Rilisoft.GameEventProgressBar
// Token: 0x17001C4E RID: 7246
// (get) Token: 0x0600AC5A RID: 44122 RVA: 0x0002F5C8 File Offset: 0x0002D7C8
[Token(Token = "0x17001576")]
private int AccumulatedSpins
{
	[Token(Token = "0x600826F")]
	[Address(RVA = "0x1F5587C", Offset = "0x1F5587C", VA = "0x1F5587C")]
	get
	{
		return 0;
	}
}
Battle royale is item consumable (lol):
// PickUpObjectSystem.PickUpObject
// Token: 0x0600C0FD RID: 49405 RVA: 0x000348C0 File Offset: 0x00032AC0
[Token(Token = "0x600C0FD")]
[Address(RVA = "0x40B083C", Offset = "0x40B083C", VA = "0x40B083C")]
public bool IsConsumable()
{
	return default(bool);
}
Batle royale is item gadget:
// PickUpObjectSystem.PickUpObject
// Token: 0x0600C0FC RID: 49404 RVA: 0x000348A8 File Offset: 0x00032AA8
[Token(Token = "0x600C0FC")]
[Address(RVA = "0x40AE58C", Offset = "0x40AE58C", VA = "0x40AE58C", Slot = "13")]
public bool IsGadget()
{
	return default(bool);
}

Day of bp challenge:
// PGCompany.BattlePass.BPChallenge
// Token: 0x170028B0 RID: 10416
// (get) Token: 0x0600F696 RID: 63126 RVA: 0x00048FF0 File Offset: 0x000471F0
[Token(Token = "0x170020CC")]
internal int Day
{
	[Token(Token = "0x600C159")]
	[Address(RVA = "0x23FC05C", Offset = "0x23FC05C", VA = "0x23FC05C")]
	get
	{
		return 0;
	}
}
Weapon upgrade price:
// WeaponUpgradeParam
// Token: 0x17000082 RID: 130
// (get) Token: 0x060003D5 RID: 981 RVA: 0x00002F88 File Offset: 0x00001188
// (set) Token: 0x060003D6 RID: 982 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000062")]
internal float UpgradePriceCoef
{
	[Token(Token = "0x6000319")]
	[Address(RVA = "0x15E813C", Offset = "0x15E813C", VA = "0x15E813C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6C1CA0", Offset = "0x6C1CA0")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x600031A")]
	[Address(RVA = "0x15E811C", Offset = "0x15E811C", VA = "0x15E811C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6C1CB0", Offset = "0x6C1CB0")]
	set
	{
	}
}
Level for weapon upgrade (lvl 65 at lvl 1 maybe?):
// WeaponUpgradeV9
// Token: 0x170010D4 RID: 4308
// (get) Token: 0x060067C8 RID: 26568 RVA: 0x0001D5F8 File Offset: 0x0001B7F8
[Token(Token = "0x17000C04")]
internal int Level
{
	[Token(Token = "0x6004E1B")]
	[Address(RVA = "0x25ED33C", Offset = "0x25ED33C", VA = "0x25ED33C")]
	get
	{
		return 0;
	}
}
Is max upgrade (level 999 guns?):
// WeaponUpgradeV9
// Token: 0x170010D7 RID: 4311
// (get) Token: 0x060067D2 RID: 26578 RVA: 0x0001D640 File Offset: 0x0001B840
[Token(Token = "0x17000C07")]
internal bool IsMaxUpgrade
{
	[Token(Token = "0x6004E25")]
	[Address(RVA = "0x25EDB04", Offset = "0x25EDB04", VA = "0x25EDB04")]
	get
	{
		return default(bool);
	}
}

Percent increase (permanent damage hack?):
// WeaponUpgradeV9
// Token: 0x170010D6 RID: 4310
// (get) Token: 0x060067D1 RID: 26577 RVA: 0x0001D628 File Offset: 0x0001B828
[Token(Token = "0x17000C06")]
internal float Percent
{
	[Token(Token = "0x6004E24")]
	[Address(RVA = "0x25EDA50", Offset = "0x25EDA50", VA = "0x25EDA50")]
	get
	{
		return 0f;
	}
}
Has undropped bp challenge reward?
// PGCompany.BattlePass.BPChallenge
// Token: 0x170028AE RID: 10414
// (get) Token: 0x0600F694 RID: 63124 RVA: 0x00048FC0 File Offset: 0x000471C0
[Token(Token = "0x170020CA")]
internal bool HasUndroppedReward
{
	[Token(Token = "0x600C157")]
	[Address(RVA = "0x23FBFA0", Offset = "0x23FBFA0", VA = "0x23FBFA0")]
	get
	{
		return default(bool);
	}
}
Battle royale ammo in clip:
// PickUpObjectSystem.PickUpObject
// Token: 0x0600C0F9 RID: 49401 RVA: 0x00034860 File Offset: 0x00032A60
[Token(Token = "0x600C0F9")]
[Address(RVA = "0x40AE5E8", Offset = "0x40AE5E8", VA = "0x40AE5E8", Slot = "15")]
public virtual int GetCurrentAmmoInClip()
{
	return 0;
}

Is bp challenge active:
// PGCompany.BattlePass.BPChallenge
// Token: 0x170028AC RID: 10412
// (get) Token: 0x0600F68E RID: 63118 RVA: 0x00048F78 File Offset: 0x00047178
// (set) Token: 0x0600F68F RID: 63119 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170020C8")]
internal bool IsActive
{
	[Token(Token = "0x600C151")]
	[Address(RVA = "0x23FBAFC", Offset = "0x23FBAFC", VA = "0x23FBAFC")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x600C152")]
	[Address(RVA = "0x23FBB04", Offset = "0x23FBB04", VA = "0x23FBB04")]
	set
	{
	}
}
Is bp ad (I think for free progress on challenge) enabled:
// PGCompany.BattlePass.BPChallenge
// Token: 0x170028B1 RID: 10417
// (get) Token: 0x0600F697 RID: 63127 RVA: 0x00049008 File Offset: 0x00047208
[Token(Token = "0x170020CD")]
internal bool IsAdEnabled
{
	[Token(Token = "0x600C15A")]
	[Address(RVA = "0x23FC088", Offset = "0x23FC088", VA = "0x23FC088")]
	get
	{
		return default(bool);
	}
}
Is new bp challenge:
// PGCompany.BattlePass.BPChallenge
// Token: 0x170028AB RID: 10411
// (get) Token: 0x0600F68C RID: 63116 RVA: 0x00048F60 File Offset: 0x00047160
[Token(Token = "0x170020C7")]
public bool IsNew
{
	[Token(Token = "0x600C14F")]
	[Address(RVA = "0x23FA028", Offset = "0x23FA028", VA = "0x23FA028")]
	get
	{
		return default(bool);
	}
}
Percent done with bp task:
// PGCompany.BattlePass.BPChallenge
// Token: 0x170028B2 RID: 10418
// (get) Token: 0x0600F698 RID: 63128 RVA: 0x00049020 File Offset: 0x00047220
[Token(Token = "0x170020CE")]
internal float PercentProgress
{
	[Token(Token = "0x600C15B")]
	[Address(RVA = "0x23FC0AC", Offset = "0x23FC0AC", VA = "0x23FC0AC")]
	get
	{
		return 0f;
	}
}
Black market class!
Rented count:
// Rilisoft.Offers.AdaptiveOfferItem
// Token: 0x170020D2 RID: 8402
// (get) Token: 0x0600C614 RID: 50708 RVA: 0x00038250 File Offset: 0x00036450
// (set) Token: 0x0600C615 RID: 50709 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001936")]
internal static int RentedCount
{
	[Token(Token = "0x600948B")]
	[Address(RVA = "0x2460A1C", Offset = "0x2460A1C", VA = "0x2460A1C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F3D5C", Offset = "0x6F3D5C")]
	get
	{
		return 0;
	}
	[Token(Token = "0x600948C")]
	[Address(RVA = "0x2460AA8", Offset = "0x2460AA8", VA = "0x2460AA8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F3D6C", Offset = "0x6F3D6C")]
	private set
	{
	}
}
Rented sale:
// Rilisoft.Offers.AdaptiveOfferItem
// Token: 0x170020CD RID: 8397
// (get) Token: 0x0600C60B RID: 50699 RVA: 0x00038208 File Offset: 0x00036408
// (set) Token: 0x0600C60C RID: 50700 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001931")]
internal int Sale
{
	[Token(Token = "0x6009482")]
	[Address(RVA = "0x246049C", Offset = "0x246049C", VA = "0x246049C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F3CDC", Offset = "0x6F3CDC")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6009483")]
	[Address(RVA = "0x24604A4", Offset = "0x24604A4", VA = "0x24604A4")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F3CEC", Offset = "0x6F3CEC")]
	private set
	{
	}
}
Rented real:
// Rilisoft.Offers.AdaptiveOfferItem
// Token: 0x170020CC RID: 8396
// (get) Token: 0x0600C609 RID: 50697 RVA: 0x000381F0 File Offset: 0x000363F0
// (set) Token: 0x0600C60A RID: 50698 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001930")]
internal int Real
{
	[Token(Token = "0x6009480")]
	[Address(RVA = "0x246048C", Offset = "0x246048C", VA = "0x246048C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F3CBC", Offset = "0x6F3CBC")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6009481")]
	[Address(RVA = "0x2460494", Offset = "0x2460494", VA = "0x2460494")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F3CCC", Offset = "0x6F3CCC")]
	private set
	{
	}
}
Exchange item gems price:
// BankExchangeItemData
// Token: 0x17000D3B RID: 3387
// (get) Token: 0x06004FE0 RID: 20448 RVA: 0x00016E00 File Offset: 0x00015000
// (set) Token: 0x06004FE1 RID: 20449 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000948")]
public int GemsPrice
{
	[Token(Token = "0x6003D3C")]
	[Address(RVA = "0x197B378", Offset = "0x197B378", VA = "0x197B378")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003D3D")]
	[Address(RVA = "0x197B384", Offset = "0x197B384", VA = "0x197B384")]
	set
	{
	}
}
Exchange item currency count:
// BankExchangeItemData
// Token: 0x17000D3A RID: 3386
// (get) Token: 0x06004FDE RID: 20446 RVA: 0x00016DE8 File Offset: 0x00014FE8
// (set) Token: 0x06004FDF RID: 20447 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000947")]
public int CurrencyCount
{
	[Token(Token = "0x6003D3A")]
	[Address(RVA = "0x197B31C", Offset = "0x197B31C", VA = "0x197B31C")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003D3B")]
	[Address(RVA = "0x197B328", Offset = "0x197B328", VA = "0x197B328")]
	set
	{
	}
}
Bonus creator player level:
// BonusCreator
// Token: 0x0600062E RID: 1582 RVA: 0x00003FA8 File Offset: 0x000021A8
[Token(Token = "0x600052A")]
[Address(RVA = "0x16E5B74", Offset = "0x16E5B74", VA = "0x16E5B74")]
private int _curLevel()
{
	return 0;
}
Bot bullet is use:
// BulletForBot
// Token: 0x17000960 RID: 2400
// (get) Token: 0x06003D1D RID: 15645 RVA: 0x00011C70 File Offset: 0x0000FE70
// (set) Token: 0x06003D1C RID: 15644 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000631")]
public bool IsUse
{
	[Token(Token = "0x6002EF2")]
	[Address(RVA = "0x16FCAEC", Offset = "0x16FCAEC", VA = "0x16FCAEC")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D3280", Offset = "0x6D3280")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6002EF1")]
	[Address(RVA = "0x16FCAE4", Offset = "0x16FCAE4", VA = "0x16FCAE4")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D3270", Offset = "0x6D3270")]
	private set
	{
	}
}


Add craft currency:
// BankController
// Token: 0x06004F64 RID: 20324 RVA: 0x00016AE8 File Offset: 0x00014CE8
[Token(Token = "0x6003CE6")]
[Address(RVA = "0x1977E90", Offset = "0x1977E90", VA = "0x1977E90")]
internal static bool AddCraftCurrency(int count, ProgressUpdater.AddCurrencyCause couse, bool needIndication = true, AnalyticsConstants.AccrualType accrualType = AnalyticsConstants.AccrualType.Earned)
{
	return default(bool);
}
Add event currency:
// BankController
// Token: 0x06004F60 RID: 20320 RVA: 0x00016AA0 File Offset: 0x00014CA0
[Token(Token = "0x6003CE2")]
[Address(RVA = "0x1977B6C", Offset = "0x1977B6C", VA = "0x1977B6C")]
internal static bool AddEventCurrency(int count, bool needIndication = true, AnalyticsConstants.AccrualType accrualType = AnalyticsConstants.AccrualType.Earned, [Optional] string eventId)
{
	return default(bool);
}
Can afford (free shopping?):
// BankController
// Token: 0x06004F68 RID: 20328 RVA: 0x00016B30 File Offset: 0x00014D30
[Token(Token = "0x6003CEA")]
[Address(RVA = "0x1979D98", Offset = "0x1979D98", VA = "0x1979D98")]
internal static bool CanAfford(ItemPrice itemPrice)
{
	return default(bool);
}
Is authorized (antiban?):
// Authorization
// Token: 0x170008A0 RID: 2208
// (get) Token: 0x06003878 RID: 14456 RVA: 0x00010950 File Offset: 0x0000EB50
[Token(Token = "0x170005C1")]
internal bool IsAuthorized
{
	[Token(Token = "0x6002BB1")]
	[Address(RVA = "0x1B621F4", Offset = "0x1B621F4", VA = "0x1B621F4")]
	get
	{
		return default(bool);
	}
}
Seconds before next ban check (antiban?):
// Authorization
// Token: 0x170008A5 RID: 2213
// (get) Token: 0x06003881 RID: 14465 RVA: 0x00010998 File Offset: 0x0000EB98
// (set) Token: 0x06003882 RID: 14466 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170005C6")]
internal float SecondsBeforeNextAuthIteration
{
	[Token(Token = "0x6002BBA")]
	[Address(RVA = "0x1B6222C", Offset = "0x1B6222C", VA = "0x1B6222C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D147C", Offset = "0x6D147C")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x6002BBB")]
	[Address(RVA = "0x1B62234", Offset = "0x1B62234", VA = "0x1B62234")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D148C", Offset = "0x6D148C")]
	private set
	{
	}
}
Should 'reset' id when banned:
// PlayerIdResetter
// Token: 0x0600593E RID: 22846 RVA: 0x00018F48 File Offset: 0x00017148
[Token(Token = "0x600440F")]
[Address(RVA = "0x16E0CD8", Offset = "0x16E0CD8", VA = "0x16E0CD8")]
internal static bool ShouldResetId()
{
	return default(bool);
}
Banned ID (Ban Bypass?) :
// PlayerIdResetter
// Token: 0x17000EA2 RID: 3746
// (get) Token: 0x06005939 RID: 22841 RVA: 0x00002050 File Offset: 0x00000250
// (set) Token: 0x0600593A RID: 22842 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A45")]
internal static string BannedId
{
	[Token(Token = "0x600440A")]
	[Address(RVA = "0x16E0AE0", Offset = "0x16E0AE0", VA = "0x16E0AE0")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA92C", Offset = "0x6DA92C")]
	get
	{
		return null;
	}
	[Token(Token = "0x600440B")]
	[Address(RVA = "0x16E0B44", Offset = "0x16E0B44", VA = "0x16E0B44")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA93C", Offset = "0x6DA93C")]
	set
	{
	}
}
Banned ID Hash (Ban Bypass?) :
// PlayerIdResetter
// Token: 0x17000EA3 RID: 3747
// (get) Token: 0x0600593B RID: 22843 RVA: 0x00002050 File Offset: 0x00000250
// (set) Token: 0x0600593C RID: 22844 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A46")]
internal static string BannedIdHash
{
	[Token(Token = "0x600440C")]
	[Address(RVA = "0x16E0BA8", Offset = "0x16E0BA8", VA = "0x16E0BA8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA94C", Offset = "0x6DA94C")]
	get
	{
		return null;
	}
	[Token(Token = "0x600440D")]
	[Address(RVA = "0x16E0C0C", Offset = "0x16E0C0C", VA = "0x16E0C0C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA95C", Offset = "0x6DA95C")]
	set
	{
	}
}
Forbid http (server hecki!):
// Rilisoft.WebSocket.WebSocketManager
// Token: 0x17002078 RID: 8312
// (get) Token: 0x0600C343 RID: 49987 RVA: 0x00036888 File Offset: 0x00034A88
[Token(Token = "0x170018E4")]
internal bool ForbidHttpIfSocketAvailable
{
	[Token(Token = "0x60092CC")]
	[Address(RVA = "0x1C99D90", Offset = "0x1C99D90", VA = "0x1C99D90")]
	get
	{
		return default(bool);
	}
}

Websocket Is Allowed for Nonauth (server hecki!):
// Rilisoft.WebSocket.ServerEventNames
// Token: 0x0600C32C RID: 49964 RVA: 0x00036810 File Offset: 0x00034A10
[Token(Token = "0x60092B5")]
[Address(RVA = "0x1C96CA4", Offset = "0x1C96CA4", VA = "0x1C96CA4")]
internal static bool IsAllowedForNonAuth(string eventName)
{
	return default(bool);
}
Only use websocket (server hecki!):
// Rilisoft.WebSocket.WebSocketManager
// Token: 0x17002071 RID: 8305
// (get) Token: 0x0600C339 RID: 49977 RVA: 0x00036828 File Offset: 0x00034A28
// (set) Token: 0x0600C33A RID: 49978 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170018DD")]
internal static bool UseWebSocketOnly
{
	[Token(Token = "0x60092C2")]
	[Address(RVA = "0x1C9981C", Offset = "0x1C9981C", VA = "0x1C9981C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F38BC", Offset = "0x6F38BC")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60092C3")]
	[Address(RVA = "0x1C998A8", Offset = "0x1C998A8", VA = "0x1C998A8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F38CC", Offset = "0x6F38CC")]
	set
	{
	}
}

Ban value things:
// Authorization
// Token: 0x04003667 RID: 13927
[Token(Token = "0x4002911")]
private const int USER_IS_BANNED_ERROR = 1402;
// Authorization
// Token: 0x04003668 RID: 13928
[Token(Token = "0x4002912")]
private const int SERVER_UNDER_WORK = 3000;

Get current event currency bool (idk):
// BankController
// Token: 0x06004F5E RID: 20318 RVA: 0x00016A70 File Offset: 0x00014C70
[Token(Token = "0x6003CE0")]
[Address(RVA = "0x1979438", Offset = "0x1979438", VA = "0x1979438")]
internal static bool GetCurrentEventCurrency(out int earned, out int purchased, [Optional] string eventId)
{
	return default(bool);
}
Is enough money (free shopping?):
// BankController
// Token: 0x06004F36 RID: 20278 RVA: 0x000169C8 File Offset: 0x00014BC8
[Token(Token = "0x6003CB8")]
[Address(RVA = "0x1971C68", Offset = "0x1971C68", VA = "0x1971C68")]
internal static bool IsEnoughMoney(ItemPrice price)
{
	return default(bool);
}
Num of battle pass currency:
// BankController
// Token: 0x06004F59 RID: 20313 RVA: 0x00016A10 File Offset: 0x00014C10
[Token(Token = "0x6003CDB")]
[Address(RVA = "0x1979040", Offset = "0x1979040", VA = "0x1979040")]
internal static int NumOfBattlePassCurrency()
{
	return 0;
}
Num of coins:
// BankController
// Token: 0x06004F51 RID: 20305 RVA: 0x000169E0 File Offset: 0x00014BE0
[Token(Token = "0x6003CD3")]
[Address(RVA = "0x1978010", Offset = "0x1978010", VA = "0x1978010")]
internal static int NumOfCoins()
{
	return 0;
}
Num of coupons currency:
// BankController
// Token: 0x06004F6B RID: 20331 RVA: 0x00016B78 File Offset: 0x00014D78
[Token(Token = "0x6003CED")]
[Address(RVA = "0x197A1B0", Offset = "0x197A1B0", VA = "0x197A1B0")]
internal static int NumOfCouponsCurrency()
{
	return 0;
}
Num of craft currency (free craft?):
// BankController
// Token: 0x06004F63 RID: 20323 RVA: 0x00016AD0 File Offset: 0x00014CD0
[Token(Token = "0x6003CE5")]
[Address(RVA = "0x1979970", Offset = "0x1979970", VA = "0x1979970")]
internal static int NumOfCraftCurrency()
{
	return 0;
}
Num of currency (free shopping?) 2:
// GameCurrencyUpdater
// Token: 0x06004B86 RID: 19334 RVA: 0x000157C8 File Offset: 0x000139C8
[Token(Token = "0x60039FB")]
[Address(RVA = "0x143A490", Offset = "0x143A490", VA = "0x143A490", Slot = "6")]
protected override int NumOfCurrency()
{
	return 0;
}
Gem hack:
// PGCompany.GemsCurrencyUpdater
// Token: 0x0600F0CA RID: 61642 RVA: 0x00046F80 File Offset: 0x00045180
[Token(Token = "0x600BCEF")]
[Address(RVA = "0x1652F28", Offset = "0x1652F28", VA = "0x1652F28", Slot = "6")]
protected override int NumOfCurrency()
{
	return 0;
}
Coupons hack:
// PGCompany.CouponsCurrencyUpdater
// Token: 0x0600F0BC RID: 61628 RVA: 0x00046F38 File Offset: 0x00045138
[Token(Token = "0x600BCE7")]
[Address(RVA = "0x24A6610", Offset = "0x24A6610", VA = "0x24A6610", Slot = "6")]
protected override int NumOfCurrency()
{
	return 0;
}
Coins price (free shopping?):
// Rilisoft.GameCurrencyData
// Token: 0x170022C8 RID: 8904
// (get) Token: 0x0600E42D RID: 58413 RVA: 0x0003E6B8 File Offset: 0x0003C8B8
[Token(Token = "0x170022C8")]
[JsonIgnore]
[IgnoreMember]
internal int CoinsPrice
{
	[Token(Token = "0x600E42D")]
	[Address(RVA = "0x3F9EA84", Offset = "0x3F9EA84", VA = "0x3F9EA84")]
	get
	{
		return 0;
	}
}
Currency hack (free shopping?) 4:
// Rilisoft.GameCurrencyData
// Token: 0x170022C5 RID: 8901
// (get) Token: 0x0600E42A RID: 58410 RVA: 0x00002050 File Offset: 0x00000250
[Token(Token = "0x170022C5")]
[JsonIgnore]
[IgnoreMember]
internal 丂不丝丞丏丘丒不且 Currency
{
	[Token(Token = "0x600E42A")]
	[Address(RVA = "0x3F9E9AC", Offset = "0x3F9E9AC", VA = "0x3F9E9AC")]
	get
	{
		return null;
	}
}
Currency hack (free shopping?) 3:
// CurrencyUpdater
// Token: 0x06000CC9 RID: 3273
[Token(Token = "0x60009B9")]
protected abstract int NumOfCurrency(); 
Num of currency (free shopping?):
	//BankController
	// Token: 0x06004F6A RID: 20330 RVA: 0x00016B60 File Offset: 0x00014D60
	[Token(Token = "0x6003CEC")]
	[Address(RVA = "0x1979EE8", Offset = "0x1979EE8", VA = "0x1979EE8")]
	internal static int NumOfCurrency(string currency)
	{
		return 0;
	}
Get time for bonus (powerup / drop) (infinite powerups / drops?):
// Token: 0x06000612 RID: 1554 RVA: 0x00003ED0 File Offset: 0x000020D0
	[Token(Token = "0x6000514")]
	[Address(RVA = "0x1C65E18", Offset = "0x1C65E18", VA = "0x1C65E18")]
	private double GetTimeForBonus(float delayTime = 0f)
	{
		return 0.0;
	}
Can spawn gem drop / bonus (gem hack?):
// Token: 0x06000613 RID: 1555 RVA: 0x00003EE8 File Offset: 0x000020E8
	[Token(Token = "0x6000515")]
	[Address(RVA = "0x1C6581C", Offset = "0x1C6581C", VA = "0x1C6581C")]
	private bool CanSpawnGemBonus()
	{
		return default(bool);
	}
Index bonus (mess up bonuses / drops / powerups and make them op by settings to 1?):
/ Token: 0x06000614 RID: 1556 RVA: 0x00003F00 File Offset: 0x00002100
	[Token(Token = "0x6000516")]
	[Address(RVA = "0x1C65B90", Offset = "0x1C65B90", VA = "0x1C65B90")]
	private int IndexBonus()
	{
		return 0;
	}
Skin maker price (free skin maker?):
	// RVA: 0x14B8810 Offset: 0x14B8810 VA: 0x14B8810
	internal static int get_skinsMakerPrice() { }
Earned Coins (Coin Hack?):
	// RVA: 0x14B80F4 Offset: 0x14B80F4 VA: 0x14B80F4
	internal static string get_EarnedCoins() { }
Possibility to drop bonus / powerup / drop on fire maybe but probably not:
// Token: 0x060005FB RID: 1531 RVA: 0x00003EB8 File Offset: 0x000020B8
	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x1C61D70", Offset = "0x1C61D70", VA = "0x1C61D70", Slot = "4")]
	public bool OnEventFired(byte index, object[] args)
	{
		return default(bool);
	} 
internal static int NumOfCurrency(ItemPrice itemPrice)
{
	return 0;
}
Num of currency 2:
// BankController
// Token: 0x06004F6A RID: 20330 RVA: 0x00016B60 File Offset: 0x00014D60
[Token(Token = "0x6003CEC")]
[Address(RVA = "0x1979EE8", Offset = "0x1979EE8", VA = "0x1979EE8")]
internal static int NumOfCurrency(string currency)
{
	return 0;
}
Num of event currency:
// BankController
// Token: 0x06004F5F RID: 20319 RVA: 0x00016A88 File Offset: 0x00014C88
[Token(Token = "0x6003CE1")]
[Address(RVA = "0x197966C", Offset = "0x197966C", VA = "0x197966C")]
internal static int NumOfEventCurrency([Optional] string eventId)
{
	return 0;
}
Num of gems:
// BankController
// Token: 0x06004F52 RID: 20306 RVA: 0x000169F8 File Offset: 0x00014BF8
[Token(Token = "0x6003CD4")]
[Address(RVA = "0x19780F4", Offset = "0x19780F4", VA = "0x19780F4")]
internal static int NumOfGems()
{
	return 0;
}
Num of tickets (idk):
// BankController
// Token: 0x06004F2D RID: 20269 RVA: 0x00016998 File Offset: 0x00014B98
[Token(Token = "0x6003CAF")]
[Address(RVA = "0x1970E60", Offset = "0x1970E60", VA = "0x1970E60")]
internal static int NumOfTickets()
{
	return 0;
}
Remove event currency?:
// BankController
// Token: 0x06004F61 RID: 20321 RVA: 0x00016AB8 File Offset: 0x00014CB8
[Token(Token = "0x6003CE3")]
[Address(RVA = "0x1979880", Offset = "0x1979880", VA = "0x1979880")]
internal static bool RemoveEventCurrency(string eventId)
{
	return default(bool);
}
Spend battle pass currency?:
// BankController
// Token: 0x06004F5C RID: 20316 RVA: 0x00016A58 File Offset: 0x00014C58
[Token(Token = "0x6003CDE")]
[Address(RVA = "0x197936C", Offset = "0x197936C", VA = "0x197936C")]
internal static bool SpendBattlePassCurrency(int count, ProgressUpdater.SpendCurrencyCause couse)
{
	return default(bool);
}
Spend coupons?:
// BankController
// Token: 0x06004F6E RID: 20334 RVA: 0x00016BC0 File Offset: 0x00014DC0
[Token(Token = "0x6003CF0")]
[Address(RVA = "0x197A50C", Offset = "0x197A50C", VA = "0x197A50C")]
internal static bool SpendCouponsCurrency(int count, ProgressUpdater.SpendCurrencyCause couse)
{
	return default(bool);
}
Spend craft currency (craft and still parts lol?):
// BankController
// Token: 0x06004F66 RID: 20326 RVA: 0x00016B18 File Offset: 0x00014D18
[Token(Token = "0x6003CE8")]
[Address(RVA = "0x1979CCC", Offset = "0x1979CCC", VA = "0x1979CCC")]
internal static bool SpendCraftCurrency(int count, ProgressUpdater.SpendCurrencyCause couse)
{
	return default(bool);
}
Spend money (free shopping?):
// BankController
// Token: 0x06004F35 RID: 20277 RVA: 0x000169B0 File Offset: 0x00014BB0
[Token(Token = "0x6003CB7")]
[Address(RVA = "0x1971960", Offset = "0x1971960", VA = "0x1971960")]
internal static bool SpendMoney(ItemPrice price, bool synchronizeSlot = true)
{
	return default(bool);
}
Coins hack:
// ItemDb
// Token: 0x0600723E RID: 29246 RVA: 0x000203D0 File Offset: 0x0001E5D0
[Token(Token = "0x60056F9")]
[Address(RVA = "0x10CCD6C", Offset = "0x10CCD6C", VA = "0x10CCD6C")]
internal static int GetCoinInappsQuantity(int inappIndex, long unused1, long unused2, int unused3, int unused4, int unused5)
{
	return 0;
}
Add price for armor (free armor?):
// ItemDb
// Token: 0x06007242 RID: 29250 RVA: 0x00020400 File Offset: 0x0001E600
[Token(Token = "0x60056FD")]
[Address(RVA = "0x10CD168", Offset = "0x10CD168", VA = "0x10CD168")]
private static bool AddPriceForArmor(string armor, int amount)
{
	return default(bool);
}
Duels super chest price (not working):
// Rilisoft.GameEventDropChanceData
// Token: 0x1700228D RID: 8845
// (get) Token: 0x0600E387 RID: 58247 RVA: 0x0003E010 File Offset: 0x0003C210
[Token(Token = "0x1700228D")]
[JsonIgnore]
[IgnoreMember]
internal int SuperChestPrice
{
	[Token(Token = "0x600E387")]
	[Address(RVA = "0x48F73BC", Offset = "0x48F73BC", VA = "0x48F73BC")]
	get
	{
		return 0;
	}
}
Lobby craft reward (Not working):
// Rilisoft.FreeLobbyCraftController
// Token: 0x0600BFFE RID: 49150 RVA: 0x00035610 File Offset: 0x00033810
[Token(Token = "0x6009067")]
[Address(RVA = "0x1FF1CF8", Offset = "0x1FF1CF8", VA = "0x1FF1CF8")]
public int GetReward()
{
	return 0;
}
Unobfusccated:
// Rilisoft.FreeLobbyCraftController
// Token: 0x06010A0D RID: 68109 RVA: 0x00049380 File Offset: 0x00047580
[Token(Token = "0x6010A0D")]
[Address(RVA = "0x48EBC74", Offset = "0x48EBC74", VA = "0x48EBC74")]
public int GetReward()
{
	return 0;
}
Free chest 1 (not working):
// Rilisoft.FreeChestController
// Token: 0x06010A02 RID: 68098 RVA: 0x00049338 File Offset: 0x00047538
[Token(Token = "0x6010A02")]
[Address(RVA = "0x48EACC8", Offset = "0x48EACC8", VA = "0x48EACC8")]
internal bool 丈与丙下万专东世且(int 丘丑东丟丞七丅丝丏)
{
	return default(bool);
}
Free chest 2 (not working):
// Rilisoft.FreeChestController
// Token: 0x06010A01 RID: 68097 RVA: 0x00049320 File Offset: 0x00047520
[Token(Token = "0x6010A01")]
[Address(RVA = "0x48EAAC8", Offset = "0x48EAAC8", VA = "0x48EAAC8")]
internal bool 丝丛丞丆丗且上丈丁()
{
	return default(bool);
}
Free chest 3 (not working):
// Rilisoft.FreeChestController
// Token: 0x06010A06 RID: 68102 RVA: 0x00049350 File Offset: 0x00047550
[Token(Token = "0x6010A06")]
[Address(RVA = "0x48EB358", Offset = "0x48EB358", VA = "0x48EB358")]
private bool 丄丕业三丑万与一丞()
{
	return default(bool);
}

Duels novice chest price:
// Rilisoft.GameEventDropChanceData
// Token: 0x1700228A RID: 8842
// (get) Token: 0x0600E384 RID: 58244 RVA: 0x0003DFC8 File Offset: 0x0003C1C8
[Token(Token = "0x1700228A")]
[IgnoreMember]
[JsonIgnore]
internal int SmallChestPrice
{
	[Token(Token = "0x600E384")]
	[Address(RVA = "0x48F7398", Offset = "0x48F7398", VA = "0x48F7398")]
	get
	{
		return 0;
	}
}
Duels fighter chest price:
// Rilisoft.GameEventDropChanceData
// Token: 0x1700228B RID: 8843
// (get) Token: 0x0600E385 RID: 58245 RVA: 0x0003DFE0 File Offset: 0x0003C1E0
[Token(Token = "0x1700228B")]
[IgnoreMember]
[JsonIgnore]
internal int MediumChestPrice
{
	[Token(Token = "0x600E385")]
	[Address(RVA = "0x48F73A4", Offset = "0x48F73A4", VA = "0x48F73A4")]
	get
	{
		return 0;
	}
}
Duels winner chest price:
// Rilisoft.GameEventDropChanceData
// Token: 0x1700228C RID: 8844
// (get) Token: 0x0600E386 RID: 58246 RVA: 0x0003DFF8 File Offset: 0x0003C1F8
[Token(Token = "0x1700228C")]
[IgnoreMember]
[JsonIgnore]
internal int BigChestPrice
{
	[Token(Token = "0x600E386")]
	[Address(RVA = "0x48F73B0", Offset = "0x48F73B0", VA = "0x48F73B0")]
	get
	{
		return 0;
	}
}
In UI is character visible:
// Rilisoft.CharacterHelper
// Token: 0x17001ADE RID: 6878
// (get) Token: 0x0600A31A RID: 41754 RVA: 0x0002C760 File Offset: 0x0002A960
// (set) Token: 0x0600A31B RID: 41755 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001466")]
public bool CharacterVisible
{
	[Token(Token = "0x6007C7E")]
	[Address(RVA = "0x204C894", Offset = "0x204C894", VA = "0x204C894")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6007C7F")]
	[Address(RVA = "0x204C8E4", Offset = "0x204C8E4", VA = "0x204C8E4")]
	set
	{
	}
}
Gadget spam via can use:
// GadgetG
// Token: 0x17000C33 RID: 3123
// (get) Token: 0x06004A51 RID: 19025 RVA: 0x00015240 File Offset: 0x00013440
[Token(Token = "0x17000870")]
internal virtual bool CanUse
{
	[Token(Token = "0x60038E5")]
	[Address(RVA = "0x14FC1D0", Offset = "0x14FC1D0", VA = "0x14FC1D0", Slot = "4")]
	get
	{
		return default(bool);
	}
}
Custom bonus provider game events:
// Rilisoft.CustomBonusProviderGameEvents
// Token: 0x17001D6D RID: 7533
// (get) Token: 0x0600B2AE RID: 45742 RVA: 0x000312D8 File Offset: 0x0002F4D8
[Token(Token = "0x17001655")]
protected override bool Available
{
	[Token(Token = "0x60086D5")]
	[Address(RVA = "0x1A3DEB0", Offset = "0x1A3DEB0", VA = "0x1A3DEB0", Slot = "4")]
	get
	{
		return default(bool);
	}
}

Veteran chest things:
// PGCompany.VeteranChest.丄七丂世丞丌丙丝丑
// Token: 0x06015FC9 RID: 90057 RVA: 0x00068418 File Offset: 0x00066618
[Token(Token = "0x6015FC9")]
[Address(RVA = "0x44CBAE4", Offset = "0x44CBAE4", VA = "0x44CBAE4")]
internal bool 丛业丈与丕丄丁专且()
{
	return default(bool);
}
// PGCompany.VeteranChest.丄七丂世丞丌丙丝丑
// Token: 0x06015FCC RID: 90060 RVA: 0x00068460 File Offset: 0x00066660
[Token(Token = "0x6015FCC")]
[Address(RVA = "0x44CBD60", Offset = "0x44CBD60", VA = "0x44CBD60")]
internal bool 丘丏丆一丒与丝万丆()
{
	return default(bool);
}
// PGCompany.VeteranChest.丄七丂世丞丌丙丝丑
// Token: 0x06015FC7 RID: 90055 RVA: 0x00068400 File Offset: 0x00066600
[Token(Token = "0x6015FC7")]
[Address(RVA = "0x44CB960", Offset = "0x44CB960", VA = "0x44CB960")]
internal int 丆丛下七丞业丂万丝()
{
	return 0;
}
// PGCompany.VeteranChest.丄七丂世丞丌丙丝丑
// Token: 0x06015FCA RID: 90058 RVA: 0x00068430 File Offset: 0x00066630
[Token(Token = "0x6015FCA")]
[Address(RVA = "0x44CBB7C", Offset = "0x44CBB7C", VA = "0x44CBB7C")]
internal bool 丈三丕万丆世上丄世()
{
	return default(bool);
}
// PGCompany.VeteranChest.丄七丂世丞丌丙丝丑
// Token: 0x06015FCE RID: 90062 RVA: 0x00068478 File Offset: 0x00066678
[Token(Token = "0x6015FCE")]
[Address(RVA = "0x44CBCE4", Offset = "0x44CBCE4", VA = "0x44CBCE4")]
internal bool 三世万丆丐业且丛世()
{
	return default(bool);
}
// PGCompany.VeteranChest.丄七丂世丞丌丙丝丑
// Token: 0x06015FCB RID: 90059 RVA: 0x00068448 File Offset: 0x00066648
[Token(Token = "0x6015FCB")]
[Address(RVA = "0x44CBCB0", Offset = "0x44CBCB0", VA = "0x44CBCB0")]
internal bool 下丟丙丗丕丙丅丞东()
{
	return default(bool);
}
Bot AI level:
// PlayerBot.AIBotController
// Token: 0x06007D70 RID: 32112 RVA: 0x000232F8 File Offset: 0x000214F8
[Token(Token = "0x6005F6C")]
[Address(RVA = "0x1FE1CC8", Offset = "0x1FE1CC8", VA = "0x1FE1CC8")]
internal int get_AILevel()
{
	return 0;
}
Bot can melee:
// PlayerBot.AIBotController
// Token: 0x1700142F RID: 5167
// (get) Token: 0x06007D6A RID: 32106 RVA: 0x000232B0 File Offset: 0x000214B0
[Token(Token = "0x17000E8F")]
private bool CanMelee
{
	[Token(Token = "0x6005F66")]
	[Address(RVA = "0x1FE1C20", Offset = "0x1FE1C20", VA = "0x1FE1C20")]
	get
	{
		return default(bool);
	}
}
Bot is meleeing:
// PlayerBot.AIBotController
// Token: 0x17001430 RID: 5168
// (get) Token: 0x06007D6B RID: 32107 RVA: 0x000232C8 File Offset: 0x000214C8
[Token(Token = "0x17000E90")]
internal bool isMeleeing
{
	[Token(Token = "0x6005F67")]
	[Address(RVA = "0x1FE1CD0", Offset = "0x1FE1CD0", VA = "0x1FE1CD0")]
	get
	{
		return default(bool);
	}
}
Bot max random value for accuracy:
// PlayerBot.AIBotController
// Token: 0x17001437 RID: 5175
// (get) Token: 0x06007D73 RID: 32115 RVA: 0x00023328 File Offset: 0x00021528
[Token(Token = "0x17000E97")]
public float maxRandomValueForAim
{
	[Token(Token = "0x6005F6F")]
	[Address(RVA = "0x1FE1F48", Offset = "0x1FE1F48", VA = "0x1FE1F48")]
	get
	{
		return 0f;
	}
}
Bot min random accuracy value:
// PlayerBot.AIBotController
// Token: 0x17001436 RID: 5174
// (get) Token: 0x06007D72 RID: 32114 RVA: 0x00023310 File Offset: 0x00021510
[Token(Token = "0x17000E96")]
public float MinRandomValueForAim
{
	[Token(Token = "0x6005F6E")]
	[Address(RVA = "0x1FE1EA0", Offset = "0x1FE1EA0", VA = "0x1FE1EA0")]
	get
	{
		return 0f;
	}
}
Bot rotation speed:
// PlayerBot.AIBotController
// Token: 0x1700143A RID: 5178
// (get) Token: 0x06007D76 RID: 32118 RVA: 0x00023370 File Offset: 0x00021570
[Token(Token = "0x17000E9A")]
private float RotationSpeed
{
	[Token(Token = "0x6005F72")]
	[Address(RVA = "0x1FE2140", Offset = "0x1FE2140", VA = "0x1FE2140")]
	get
	{
		return 0f;
	}
}
Show dev debug GUI:
// DeveloperConsoleController
// Token: 0x170011B0 RID: 4528
// (get) Token: 0x06006E4C RID: 28236 RVA: 0x0001F020 File Offset: 0x0001D220
// (set) Token: 0x06006E4D RID: 28237 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000CB4")]
internal static bool isDebugGuiVisible
{
	[Token(Token = "0x60053AF")]
	[Address(RVA = "0x14BEBBC", Offset = "0x14BEBBC", VA = "0x14BEBBC")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60053B0")]
	[Address(RVA = "0x14BEC48", Offset = "0x14BEC48", VA = "0x14BEC48")]
	private set
	{
	}
}
Level tier I think:
// ExpController
// Token: 0x0600468D RID: 18061 RVA: 0x000145B0 File Offset: 0x000127B0
[Token(Token = "0x60035F9")]
[Address(RVA = "0x13CA8DC", Offset = "0x13CA8DC", VA = "0x13CA8DC")]
internal static int GetOurTier()
{
	return 0;
}
Level tier 2:
// ExpController
// Token: 0x06004689 RID: 18057 RVA: 0x00014568 File Offset: 0x00012768
[Token(Token = "0x60035F5")]
[Address(RVA = "0x13CC374", Offset = "0x13CC374", VA = "0x13CC374")]
internal static int TierForLevel(int lev)
{
	return 0;
}
Lobby level:
// ExpController
// Token: 0x17000B92 RID: 2962
// (get) Token: 0x0600467D RID: 18045 RVA: 0x00014508 File Offset: 0x00012708
[Token(Token = "0x170007FE")]
internal static int LobbyLevel
{
	[Token(Token = "0x60035E9")]
	[Address(RVA = "0x13CAAC8", Offset = "0x13CAAC8", VA = "0x13CAAC8")]
	get
	{
		return 0;
	}
}
Exp rank:
// ExpController
// Token: 0x17000B97 RID: 2967
// (get) Token: 0x06004691 RID: 18065 RVA: 0x000145F8 File Offset: 0x000127F8
[Token(Token = "0x17000803")]
internal int Rank
{
	[Token(Token = "0x60035FD")]
	[Address(RVA = "0x13CCE70", Offset = "0x13CCE70", VA = "0x13CCE70")]
	get
	{
		return 0;
	}
}
Level percentage full or to next level idk:
// ExpController
// Token: 0x06004696 RID: 18070 RVA: 0x00014610 File Offset: 0x00012810
[Token(Token = "0x6003602")]
[Address(RVA = "0x13CDB04", Offset = "0x13CDB04", VA = "0x13CDB04")]
internal static float GetPercentage(int experience)
{
	return 0f;
}
Exp progress:
// ExpController
// Token: 0x06004697 RID: 18071 RVA: 0x00014628 File Offset: 0x00012828
[Token(Token = "0x6003603")]
[Address(RVA = "0x13CDCAC", Offset = "0x13CDCAC", VA = "0x13CDCAC")]
internal static float ProgressExpInPer()
{
	return 0f;
}
Deadly games max health:
// ChestController
// Token: 0x17000138 RID: 312
// (get) Token: 0x06000932 RID: 2354 RVA: 0x00004A10 File Offset: 0x00002C10
// (set) Token: 0x06000933 RID: 2355 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170000DE")]
public float maxHealth
{
	[Token(Token = "0x6000749")]
	[Address(RVA = "0x135B864", Offset = "0x135B864", VA = "0x135B864", Slot = "6")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6C3270", Offset = "0x6C3270")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x600074A")]
	[Address(RVA = "0x135B660", Offset = "0x135B660", VA = "0x135B660")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6C3280", Offset = "0x6C3280")]
	set
	{
	}
}
Can open clan chest:
// ClanChest
// Token: 0x170009A6 RID: 2470
// (get) Token: 0x06003E7D RID: 15997 RVA: 0x00011FA0 File Offset: 0x000101A0
[Token(Token = "0x1700066B")]
public bool PossibleOpen
{
	[Token(Token = "0x6002FFA")]
	[Address(RVA = "0x1CED224", Offset = "0x1CED224", VA = "0x1CED224")]
	get
	{
		return default(bool);
	}
}
Current armor points:
// PlayerArmor
// Token: 0x17000E78 RID: 3704
// (get) Token: 0x0600586D RID: 22637 RVA: 0x00018BA0 File Offset: 0x00016DA0
// (set) Token: 0x0600586E RID: 22638 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A23")]
private float currentArmorPoints
{
	[Token(Token = "0x600435C")]
	[Address(RVA = "0x1FDE6DC", Offset = "0x1FDE6DC", VA = "0x1FDE6DC")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x600435D")]
	[Address(RVA = "0x1FDE708", Offset = "0x1FDE708", VA = "0x1FDE708")]
	set
	{
	}
}
Current total armor points:
// PlayerArmor
// Token: 0x17000E73 RID: 3699
// (get) Token: 0x06005865 RID: 22629 RVA: 0x00018B28 File Offset: 0x00016D28
[Token(Token = "0x17000A1E")]
public float currentTotalPoints
{
	[Token(Token = "0x6004354")]
	[Address(RVA = "0x1FDE5B4", Offset = "0x1FDE5B4", VA = "0x1FDE5B4")]
	get
	{
		return 0f;
	}
}
Clan chest price:
// ClanChest
// Token: 0x1700099C RID: 2460
// (get) Token: 0x06003E72 RID: 15986 RVA: 0x00011F28 File Offset: 0x00010128
[Token(Token = "0x17000661")]
public int OpenPrice
{
	[Token(Token = "0x6002FEF")]
	[Address(RVA = "0x1CEC94C", Offset = "0x1CEC94C", VA = "0x1CEC94C")]
	get
	{
		return 0;
	}
}
Shop Offer Value 1:
// Rilisoft.Offer
// Token: 0x0600B886 RID: 47238 RVA: 0x00033420 File Offset: 0x00031620
[Token(Token = "0x6008B04")]
[Address(RVA = "0x1909B54", Offset = "0x1909B54", VA = "0x1909B54")]
internal decimal GetInappPriceInPlayerCurrency()
{
	return default(decimal);
}
Shop Offer Value 2:
// Rilisoft.Offer
// Token: 0x0600B88D RID: 47245 RVA: 0x00033480 File Offset: 0x00031680
[Token(Token = "0x6008B0B")]
[Address(RVA = "0x190A594", Offset = "0x190A594", VA = "0x190A594")]
internal decimal GetItemsPriceInPlayerCurrency()
{
	return default(decimal);
}
Shop offer profit visual:
// Rilisoft.Offer
// Token: 0x0600B889 RID: 47241 RVA: 0x00033438 File Offset: 0x00031638
[Token(Token = "0x6008B07")]
[Address(RVA = "0x1907DA8", Offset = "0x1907DA8", VA = "0x1907DA8")]
internal decimal GetProfit()
{
	return default(decimal);
}
Is in offer (all guns from paid offer?):
// Rilisoft.Offer
// Token: 0x0600B893 RID: 47251 RVA: 0x00033498 File Offset: 0x00031698
[Token(Token = "0x6008B11")]
[Address(RVA = "0x190AB28", Offset = "0x190AB28", VA = "0x190AB28")]
internal bool InOffer(OfferItem item)
{
	return default(bool);
}
In offer (all guns  from paid offers) 2:
// Rilisoft.Offer
// Token: 0x0600B894 RID: 47252 RVA: 0x000334B0 File Offset: 0x000316B0
[Token(Token = "0x6008B12")]
[Address(RVA = "0x190ABD8", Offset = "0x190ABD8", VA = "0x190ABD8")]
internal bool InOffer(string itemId)
{
	return default(bool);
}
Is offer available:
// Rilisoft.Offer
// Token: 0x17001E8D RID: 7821
// (get) Token: 0x0600B872 RID: 47218 RVA: 0x00033378 File Offset: 0x00031578
[Token(Token = "0x17001746")]
internal bool Available
{
	[Token(Token = "0x6008AF0")]
	[Address(RVA = "0x1904FA4", Offset = "0x1904FA4", VA = "0x1904FA4")]
	get
	{
		return default(bool);
	}
}
// Rilisoft.Offer
// Token: 0x17001E90 RID: 7824
// (get) Token: 0x0600B875 RID: 47221 RVA: 0x000333C0 File Offset: 0x000315C0
[Token(Token = "0x17001749")]
internal bool AvailableByCondition
{
	[Token(Token = "0x6008AF3")]
	[Address(RVA = "0x1904FF4", Offset = "0x1904FF4", VA = "0x1904FF4")]
	get
	{
		return default(bool);
	}
}
// Rilisoft.Offer
// Token: 0x17001E8C RID: 7820
// (get) Token: 0x0600B871 RID: 47217 RVA: 0x00033360 File Offset: 0x00031560
[Token(Token = "0x17001745")]
internal bool AvailableByEndTime
{
	[Token(Token = "0x6008AEF")]
	[Address(RVA = "0x1904DD0", Offset = "0x1904DD0", VA = "0x1904DD0")]
	get
	{
		return default(bool);
	}
}
// Rilisoft.Offer
// Token: 0x17001E8F RID: 7823
// (get) Token: 0x0600B874 RID: 47220 RVA: 0x000333A8 File Offset: 0x000315A8
[Token(Token = "0x17001748")]
internal bool AvailableByLevel
{
	[Token(Token = "0x6008AF2")]
	[Address(RVA = "0x19052BC", Offset = "0x19052BC", VA = "0x19052BC")]
	get
	{
		return default(bool);
	}
}
// Rilisoft.Offer
// Token: 0x17001E8B RID: 7819
// (get) Token: 0x0600B870 RID: 47216 RVA: 0x00033348 File Offset: 0x00031548
[Token(Token = "0x17001744")]
internal bool AvailableByStartTime
{
	[Token(Token = "0x6008AEE")]
	[Address(RVA = "0x1904BFC", Offset = "0x1904BFC", VA = "0x1904BFC")]
	get
	{
		return default(bool);
	}
}
// Rilisoft.Offer
// Token: 0x17001E8E RID: 7822
// (get) Token: 0x0600B873 RID: 47219 RVA: 0x00033390 File Offset: 0x00031590
[Token(Token = "0x17001747")]
internal bool AvailableByTier
{
	[Token(Token = "0x6008AF1")]
	[Address(RVA = "0x19051B8", Offset = "0x19051B8", VA = "0x19051B8")]
	get
	{
		return default(bool);
	}
}
// Rilisoft.Offer
// Token: 0x17001E8A RID: 7818
// (get) Token: 0x0600B86F RID: 47215 RVA: 0x00033330 File Offset: 0x00031530
[Token(Token = "0x17001743")]
internal bool AvailableByTime
{
	[Token(Token = "0x6008AED")]
	[Address(RVA = "0x1904984", Offset = "0x1904984", VA = "0x1904984")]
	get
	{
		return default(bool);
	}
}
Is offer bought (infinite offer?):
// Rilisoft.Offer
// Token: 0x17001E86 RID: 7814
// (get) Token: 0x0600B86B RID: 47211 RVA: 0x000332D0 File Offset: 0x000314D0
[Token(Token = "0x1700173F")]
internal bool IsBought
{
	[Token(Token = "0x6008AE9")]
	[Address(RVA = "0x190406C", Offset = "0x190406C", VA = "0x190406C")]
	get
	{
		return default(bool);
	}
}
Offer item count:
// Rilisoft.OfferItem
// Token: 0x17002782 RID: 10114
// (get) Token: 0x06010141 RID: 65857 RVA: 0x00046BD8 File Offset: 0x00044DD8
// (set) Token: 0x06010142 RID: 65858 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17002782")]
internal int Count
{
	[Token(Token = "0x6010141")]
	[Address(RVA = "0x4647348", Offset = "0x4647348", VA = "0x4647348")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6010142")]
	[Address(RVA = "0x4647FF0", Offset = "0x4647FF0", VA = "0x4647FF0")]
	set
	{
	}
}
Is offer stackable:
// Rilisoft.OfferItem
// Token: 0x17002777 RID: 10103
// (get) Token: 0x06010136 RID: 65846 RVA: 0x00046AE8 File Offset: 0x00044CE8
[Token(Token = "0x17002777")]
internal bool IsStackable
{
	[Token(Token = "0x6010136")]
	[Address(RVA = "0x4647800", Offset = "0x4647800", VA = "0x4647800")]
	get
	{
		return default(bool);
	}
}
Paid Offer price in gems (maybe visual idk):
// Rilisoft.OfferItem
// Token: 0x17002784 RID: 10116
// (get) Token: 0x06010144 RID: 65860 RVA: 0x00046BF0 File Offset: 0x00044DF0
[Token(Token = "0x17002784")]
internal int PriceInGems
{
	[Token(Token = "0x6010144")]
	[Address(RVA = "0x4648274", Offset = "0x4648274", VA = "0x4648274")]
	get
	{
		return 0;
	}
}

Clan member visual currency:
// ClanMember
// Token: 0x170009DD RID: 2525
// (get) Token: 0x06003FAD RID: 16301 RVA: 0x00012708 File Offset: 0x00010908
// (set) Token: 0x06003FAE RID: 16302 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700069A")]
public int Currency
{
	[Token(Token = "0x60030CF")]
	[Address(RVA = "0x1742044", Offset = "0x1742044", VA = "0x1742044")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60030D0")]
	[Address(RVA = "0x1742054", Offset = "0x1742054", VA = "0x1742054")]
	set
	{
	}
}
Partial or visual clan leader:
// ClanMember
// Token: 0x170009DD RID: 2525
// (get) Token: 0x06003FAD RID: 16301 RVA: 0x00012708 File Offset: 0x00010908
// (set) Token: 0x06003FAE RID: 16302 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700069A")]
public int Currency
{
	[Token(Token = "0x60030CF")]
	[Address(RVA = "0x1742044", Offset = "0x1742044", VA = "0x1742044")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60030D0")]
	[Address(RVA = "0x1742054", Offset = "0x1742054", VA = "0x1742054")]
	set
	{
	}
}
Clan item count:
// ClanItem
// Token: 0x17000A28 RID: 2600
// (get) Token: 0x060042AC RID: 17068 RVA: 0x000133F8 File Offset: 0x000115F8
// (set) Token: 0x060042AD RID: 17069 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170006C9")]
public int Count
{
	[Token(Token = "0x60032FE")]
	[Address(RVA = "0x173EDC8", Offset = "0x173EDC8", VA = "0x173EDC8")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60032FF")]
	[Address(RVA = "0x173EDD0", Offset = "0x173EDD0", VA = "0x173EDD0")]
	set
	{
	}
}
Clan item is crafted:
// ClanItem
// Token: 0x17000A2B RID: 2603
// (get) Token: 0x060042B0 RID: 17072 RVA: 0x00013440 File Offset: 0x00011640
[Token(Token = "0x170006CC")]
public bool IsCrafted
{
	[Token(Token = "0x6003302")]
	[Address(RVA = "0x173EDE8", Offset = "0x173EDE8", VA = "0x173EDE8")]
	get
	{
		return default(bool);
	}
}
Can skip daily BP quest:
// DailyQuestItem
// Token: 0x17000EEC RID: 3820
// (get) Token: 0x06005AD2 RID: 23250 RVA: 0x00019338 File Offset: 0x00017538
[Token(Token = "0x17000A80")]
public bool CanSkip
{
	[Token(Token = "0x6004552")]
	[Address(RVA = "0x149E7D8", Offset = "0x149E7D8", VA = "0x149E7D8")]
	get
	{
		return default(bool);
	}
}
Is crafting fort item:
// Rilisoft.FortCraftScrollItemView
// Token: 0x17001C15 RID: 7189
// (get) Token: 0x0600AAD9 RID: 43737 RVA: 0x0002F1C0 File Offset: 0x0002D3C0
// (set) Token: 0x0600AADA RID: 43738 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001547")]
public bool IsCrafting
{
	[Token(Token = "0x6008134")]
	[Address(RVA = "0x21FC09C", Offset = "0x21FC09C", VA = "0x21FC09C", Slot = "7")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6ED738", Offset = "0x6ED738")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6008135")]
	[Address(RVA = "0x21FC0A4", Offset = "0x21FC0A4", VA = "0x21FC0A4", Slot = "8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6ED748", Offset = "0x6ED748")]
	set
	{
	}
}
Fort item count (for placing):
// Rilisoft.FortItem
// Token: 0x17001BCD RID: 7117
// (get) Token: 0x0600A93F RID: 43327 RVA: 0x0002EB60 File Offset: 0x0002CD60
[Token(Token = "0x1700150F")]
public int ExistsItemCount
{
	[Token(Token = "0x6008009")]
	[Address(RVA = "0x21F2384", Offset = "0x21F2384", VA = "0x21F2384")]
	get
	{
		return 0;
	}
}
Fort item exists (available 2):
// Rilisoft.FortItem
// Token: 0x17001BC8 RID: 7112
// (get) Token: 0x0600A93A RID: 43322 RVA: 0x0002EB00 File Offset: 0x0002CD00
[Token(Token = "0x1700150A")]
public bool IsExists
{
	[Token(Token = "0x6008004")]
	[Address(RVA = "0x21FC80C", Offset = "0x21FC80C", VA = "0x21FC80C")]
	get
	{
		return default(bool);
	}
}
Fort item full exist (idk but use):
// Rilisoft.FortItem
// Token: 0x17001BC9 RID: 7113
// (get) Token: 0x0600A93B RID: 43323 RVA: 0x0002EB18 File Offset: 0x0002CD18
[Token(Token = "0x1700150B")]
public bool IsFullExist
{
	[Token(Token = "0x6008005")]
	[Address(RVA = "0x22018D0", Offset = "0x22018D0", VA = "0x22018D0")]
	get
	{
		return default(bool);
	}
}
Fort item part count (for crafting):
// Rilisoft.FortItem
// Token: 0x17001BCF RID: 7119
// (get) Token: 0x0600A941 RID: 43329 RVA: 0x0002EB90 File Offset: 0x0002CD90
[Token(Token = "0x17001511")]
public int PartsCount
{
	[Token(Token = "0x600800B")]
	[Address(RVA = "0x21F22F4", Offset = "0x21F22F4", VA = "0x21F22F4")]
	get
	{
		return 0;
	}
}
Fort item placed (multiple on one slot?):
// Rilisoft.FortItem
// Token: 0x17001BCA RID: 7114
// (get) Token: 0x0600A93C RID: 43324 RVA: 0x0002EB30 File Offset: 0x0002CD30
[Token(Token = "0x1700150C")]
public bool Placed
{
	[Token(Token = "0x6008006")]
	[Address(RVA = "0x21FCB4C", Offset = "0x21FCB4C", VA = "0x21FCB4C")]
	get
	{
		return default(bool);
	}
}
Fort item free coins reward interval:
// Rilisoft.FortItemEffectFreeCoins
// Token: 0x17001BE0 RID: 7136
// (get) Token: 0x0600A964 RID: 43364 RVA: 0x0002ED10 File Offset: 0x0002CF10
[Token(Token = "0x17001522")]
protected override long RewardInterval
{
	[Token(Token = "0x6008028")]
	[Address(RVA = "0x22026A8", Offset = "0x22026A8", VA = "0x22026A8", Slot = "10")]
	get
	{
		return 0L;
	}
}
FOrt item free coins reward interval:
// Rilisoft.FortItemEffectFreeCoins
// Token: 0x17001BE0 RID: 7136
// (get) Token: 0x0600A964 RID: 43364 RVA: 0x0002ED10 File Offset: 0x0002CF10
[Token(Token = "0x17001522")]
protected override long RewardInterval
{
	[Token(Token = "0x6008028")]
	[Address(RVA = "0x22026A8", Offset = "0x22026A8", VA = "0x22026A8", Slot = "10")]
	get
	{
		return 0L;
	}
}
Fort item free spins reward interval:
// Rilisoft.FortItemEffectFreeCoins
// Token: 0x17001BE0 RID: 7136
// (get) Token: 0x0600A964 RID: 43364 RVA: 0x0002ED10 File Offset: 0x0002CF10
[Token(Token = "0x17001522")]
protected override long RewardInterval
{
	[Token(Token = "0x6008028")]
	[Address(RVA = "0x22026A8", Offset = "0x22026A8", VA = "0x22026A8", Slot = "10")]
	get
	{
		return 0L;
	}
}
Game event item available to drop (99999 parts?):
// Rilisoft.GameEventItem
// Token: 0x17001D35 RID: 7477
// (get) Token: 0x0600B0E5 RID: 45285 RVA: 0x000308A0 File Offset: 0x0002EAA0
[Token(Token = "0x17001625")]
public bool AvailableToDrop
{
	[Token(Token = "0x600858F")]
	[Address(RVA = "0x21127D8", Offset = "0x21127D8", VA = "0x21127D8")]
	get
	{
		return default(bool);
	}
}
// Rilisoft.GameEventItem
// Token: 0x17001D35 RID: 7477
// (get) Token: 0x0600B0E5 RID: 45285 RVA: 0x000308A0 File Offset: 0x0002EAA0
[Token(Token = "0x17001625")]
public bool AvailableToDrop
{
	[Token(Token = "0x600858F")]
	[Address(RVA = "0x21127D8", Offset = "0x21127D8", VA = "0x21127D8")]
	get
	{
		return default(bool);
	}
}
Is item purchased:
// PGCompany.ItemManager
// Token: 0x0600F160 RID: 61792 RVA: 0x000470B8 File Offset: 0x000452B8
[Token(Token = "0x600BD72")]
[Address(RVA = "0x2C224BC", Offset = "0x2C224BC", VA = "0x2C224BC")]
internal bool IsPurchased(ItemParams itemParams)
{
	return default(bool);
}
Is enough item:
// PGCompany.ItemManager
// Token: 0x0600F165 RID: 61797 RVA: 0x00047100 File Offset: 0x00045300
[Token(Token = "0x600BD77")]
[Address(RVA = "0x2C22AD8", Offset = "0x2C22AD8", VA = "0x2C22AD8")]
[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F8580", Offset = "0x6F8580")]
private bool <IsEnoughItem>b__42_0(ItemParams x)
{
	return default(bool);
}
Is enough item 2:
// PGCompany.ItemManager
// Token: 0x0600F162 RID: 61794 RVA: 0x000470E8 File Offset: 0x000452E8
[Token(Token = "0x600BD74")]
[Address(RVA = "0x2C22578", Offset = "0x2C22578", VA = "0x2C22578")]
internal bool IsEnoughItem(List<ItemParams> itemsParams)
{
	return default(bool);
}

Remove item (free stuff like free shopping?):
// PGCompany.ItemManager
// Token: 0x0600F15E RID: 61790 RVA: 0x000470A0 File Offset: 0x000452A0
[Token(Token = "0x600BD70")]
[Address(RVA = "0x2C222C4", Offset = "0x2C222C4", VA = "0x2C222C4")]
private bool DoRemoveItem(ItemParams itemParams, [Optional] Action callback)
{
	return default(bool);
}

Fort item exists part count (for crafting:
// Rilisoft.FortItem
// Token: 0x17001BCC RID: 7116
// (get) Token: 0x0600A93E RID: 43326 RVA: 0x0002EB48 File Offset: 0x0002CD48
[Token(Token = "0x1700150E")]
public int ExistsPartsCount
{
	[Token(Token = "0x6008008")]
	[Address(RVA = "0x21F22B0", Offset = "0x21F22B0", VA = "0x21F22B0")]
	get
	{
		return 0;
	}
}
Clan chest parts count in stock:
// ClansController
// Token: 0x060040CA RID: 16586 RVA: 0x00012AB0 File Offset: 0x00010CB0
[Token(Token = "0x60031EC")]
[Address(RVA = "0x1777668", Offset = "0x1777668", VA = "0x1777668")]
internal static int GetPartCountInStock(string itemId, ClanItemType itemType = ClanItemType.FortParts)
{
	return 0;
}

PG Main Store Things:
// PGCompany.MainStore.丕世丟业丄丄丙业丙
// Token: 0x170037A5 RID: 14245
// (get) Token: 0x06016B16 RID: 92950 RVA: 0x0006CA68 File Offset: 0x0006AC68
[Token(Token = "0x170037A5")]
internal override int 七丞丌丕丌丌丒丞与
{
	[Token(Token = "0x6016B16")]
	[Address(RVA = "0x4A3BEE0", Offset = "0x4A3BEE0", VA = "0x4A3BEE0", Slot = "16")]
	get
	{
		return 0;
	}
}
// PGCompany.MainStore.世三上丕上丘业七丙
// Token: 0x170037AC RID: 14252
// (get) Token: 0x06016B24 RID: 92964 RVA: 0x0006CAE0 File Offset: 0x0006ACE0
[Token(Token = "0x170037AC")]
protected override bool 丈七丂一丘丐丈丂丗
{
	[Token(Token = "0x6016B24")]
	[Address(RVA = "0x4A3BF3C", Offset = "0x4A3BF3C", VA = "0x4A3BF3C", Slot = "12")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.世三上丕上丘业七丙
// Token: 0x170037AD RID: 14253
// (get) Token: 0x06016B25 RID: 92965 RVA: 0x0006CAF8 File Offset: 0x0006ACF8
[Token(Token = "0x170037AD")]
protected override bool 丟丂丂丏专丕丆上丅
{
	[Token(Token = "0x6016B25")]
	[Address(RVA = "0x4A3BF44", Offset = "0x4A3BF44", VA = "0x4A3BF44", Slot = "13")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.世三上丕上丘业七丙
// Token: 0x170037AE RID: 14254
// (get) Token: 0x06016B26 RID: 92966 RVA: 0x0006CB10 File Offset: 0x0006AD10
[Token(Token = "0x170037AE")]
internal override bool 丟世丝丏丐丗丙业丂
{
	[Token(Token = "0x6016B26")]
	[Address(RVA = "0x4A3BF4C", Offset = "0x4A3BF4C", VA = "0x4A3BF4C", Slot = "6")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.一丂丅丟一丏丂丈丅
// Token: 0x170037EC RID: 14316
// (get) Token: 0x06016BCF RID: 93135 RVA: 0x0006CF90 File Offset: 0x0006B190
[Token(Token = "0x170037EC")]
internal static bool 丂丂三且丁丕丂丂万
{
	[Token(Token = "0x6016BCF")]
	[Address(RVA = "0x4935540", Offset = "0x4935540", VA = "0x4935540")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.一上丏丟丟丏丑丟丛
// Token: 0x17003776 RID: 14198
// (get) Token: 0x06016A69 RID: 92777 RVA: 0x0006C5E8 File Offset: 0x0006A7E8
// (set) Token: 0x06016A6A RID: 92778 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17003776")]
internal bool 丒不丝丝三丛丘七丄
{
	[Token(Token = "0x6016A69")]
	[Address(RVA = "0x4935C80", Offset = "0x4935C80", VA = "0x4935C80")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1E2ED84", Offset = "0x1E2ED84")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6016A6A")]
	[Address(RVA = "0x4935C88", Offset = "0x4935C88", VA = "0x4935C88")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1E2ED94", Offset = "0x1E2ED94")]
	private set
	{
	}
}
// PGCompany.MainStore.一上丏丟丟丏丑丟丛
// Token: 0x17003779 RID: 14201
// (get) Token: 0x06016A6D RID: 92781 RVA: 0x0006C600 File Offset: 0x0006A800
[Token(Token = "0x17003779")]
internal virtual bool 丝丌丘世丈且丙丆东
{
	[Token(Token = "0x6016A6D")]
	[Address(RVA = "0x4935C94", Offset = "0x4935C94", VA = "0x4935C94", Slot = "7")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.丂与万与丌丑丞丒丝
// Token: 0x170037A1 RID: 14241
// (get) Token: 0x06016B0A RID: 92938 RVA: 0x0006CA20 File Offset: 0x0006AC20
[Token(Token = "0x170037A1")]
protected override bool 丈七丂一丘丐丈丂丗
{
	[Token(Token = "0x6016B0A")]
	[Address(RVA = "0x4936AC0", Offset = "0x4936AC0", VA = "0x4936AC0", Slot = "12")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.丂与万与丌丑丞丒丝
// Token: 0x170037A3 RID: 14243
// (get) Token: 0x06016B0C RID: 92940 RVA: 0x0006CA50 File Offset: 0x0006AC50
[Token(Token = "0x170037A3")]
internal override bool 丝丌丘世丈且丙丆东
{
	[Token(Token = "0x6016B0C")]
	[Address(RVA = "0x4936AD0", Offset = "0x4936AD0", VA = "0x4936AD0", Slot = "7")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.丂与万与丌丑丞丒丝
// Token: 0x170037A2 RID: 14242
// (get) Token: 0x06016B0B RID: 92939 RVA: 0x0006CA38 File Offset: 0x0006AC38
[Token(Token = "0x170037A2")]
protected override bool 丟丂丂丏专丕丆上丅
{
	[Token(Token = "0x6016B0B")]
	[Address(RVA = "0x4936AC8", Offset = "0x4936AC8", VA = "0x4936AC8", Slot = "13")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.丂与万与丌丑丞丒丝
// Token: 0x170037A0 RID: 14240
// (get) Token: 0x06016B09 RID: 92937 RVA: 0x0006CA08 File Offset: 0x0006AC08
[Token(Token = "0x170037A0")]
internal override bool 丟世丝丏丐丗丙业丂
{
	[Token(Token = "0x6016B09")]
	[Address(RVA = "0x4936AB8", Offset = "0x4936AB8", VA = "0x4936AB8", Slot = "6")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.七专丄丝丛丕丑丗丄
// Token: 0x17003789 RID: 14217
// (get) Token: 0x06016ABB RID: 92859 RVA: 0x0006C780 File Offset: 0x0006A980
[Token(Token = "0x17003789")]
internal override int 七丞丌丕丌丌丒丞与
{
	[Token(Token = "0x6016ABB")]
	[Address(RVA = "0x4939AC4", Offset = "0x4939AC4", VA = "0x4939AC4", Slot = "16")]
	get
	{
		return 0;
	}
}
// PGCompany.MainStore.丄丙丑丏丐不丘三七
// Token: 0x170037BE RID: 14270
// (get) Token: 0x06016B4E RID: 93006 RVA: 0x0006CBE8 File Offset: 0x0006ADE8
[Token(Token = "0x170037BE")]
protected override bool 丈七丂一丘丐丈丂丗
{
	[Token(Token = "0x6016B4E")]
	[Address(RVA = "0x493A130", Offset = "0x493A130", VA = "0x493A130", Slot = "12")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.丅世世世业万丕与丄
// Token: 0x1700380A RID: 14346
// (get) Token: 0x06016C5A RID: 93274 RVA: 0x0006D290 File Offset: 0x0006B490
[Token(Token = "0x1700380A")]
internal int 万万丑丞丛丛丘丁世
{
	[Token(Token = "0x6016C5A")]
	[Address(RVA = "0x493A9A4", Offset = "0x493A9A4", VA = "0x493A9A4")]
	get
	{
		return 0;
	}
}
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x06016C96 RID: 93334 RVA: 0x0006D380 File Offset: 0x0006B580
[Token(Token = "0x6016C96")]
[Address(RVA = "0x493B544", Offset = "0x493B544", VA = "0x493B544")]
internal bool 业万丑丅丗丂丟东与()
{
	return default(bool);
}
// PGCompany.MainStore.三丏丌丏不三丝丐世
// Token: 0x17003809 RID: 14345
// (get) Token: 0x06016C4D RID: 93261 RVA: 0x0006D248 File Offset: 0x0006B448
[Token(Token = "0x17003809")]
internal int 丅东丛七一丒三丝丐
{
	[Token(Token = "0x6016C4D")]
	[Address(RVA = "0x493E7AC", Offset = "0x493E7AC", VA = "0x493E7AC")]
	get
	{
		return 0;
	}
}
// PGCompany.MainStore.三丏丌丏不三丝丐世
// Token: 0x17003807 RID: 14343
// (get) Token: 0x06016C4B RID: 93259 RVA: 0x0006D218 File Offset: 0x0006B418
[Token(Token = "0x17003807")]
internal bool 三业东世丑下专丝专
{
	[Token(Token = "0x6016C4B")]
	[Address(RVA = "0x493E700", Offset = "0x493E700", VA = "0x493E700")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.三丏丌丏不三丝丐世
// Token: 0x17003805 RID: 14341
// (get) Token: 0x06016C49 RID: 93257 RVA: 0x0006D1E8 File Offset: 0x0006B3E8
[Token(Token = "0x17003805")]
internal int 丑丗且世丕丆七不丗
{
	[Token(Token = "0x6016C49")]
	[Address(RVA = "0x493E62C", Offset = "0x493E62C", VA = "0x493E62C")]
	get
	{
		return 0;
	}
}
// PGCompany.MainStore.三丏丌丏不三丝丐世
// Token: 0x17003806 RID: 14342
// (get) Token: 0x06016C4A RID: 93258 RVA: 0x0006D200 File Offset: 0x0006B400
[Token(Token = "0x17003806")]
internal bool 东万世丒丐丕不丙七
{
	[Token(Token = "0x6016C4A")]
	[Address(RVA = "0x493E688", Offset = "0x493E688", VA = "0x493E688")]
	get
	{
		return default(bool);
	}
}
These look good:
// PGCompany.MainStore.丄丙丑丏丐不丘三七
// Token: 0x170037BE RID: 14270
// (get) Token: 0x06016B4E RID: 93006 RVA: 0x0006CBE8 File Offset: 0x0006ADE8
[Token(Token = "0x170037BE")]
protected override bool 丈七丂一丘丐丈丂丗
{
	[Token(Token = "0x6016B4E")]
	[Address(RVA = "0x493A130", Offset = "0x493A130", VA = "0x493A130", Slot = "12")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x06016C9A RID: 93338 RVA: 0x0006D3E0 File Offset: 0x0006B5E0
[Token(Token = "0x6016C9A")]
[Address(RVA = "0x493BD0C", Offset = "0x493BD0C", VA = "0x493BD0C")]
internal int 一业丆丞东丏专且丂(丏且丐且丕丁与万东 万三世丄业丐丕丟丁, 丄丛丞丅丂丝丄三丞 丘丛丙丟丝万丘上丄)
{
	return 0;
}
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x06016C9A RID: 93338 RVA: 0x0006D3E0 File Offset: 0x0006B5E0
[Token(Token = "0x6016C9A")]
[Address(RVA = "0x493BD0C", Offset = "0x493BD0C", VA = "0x493BD0C")]
internal int 一业丆丞东丏专且丂(丏且丐且丕丁与万东 万三世丄业丐丕丟丁, 丄丛丞丅丂丝丄三丞 丘丛丙丟丝万丘上丄)
{
	return 0;
}
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x06016C98 RID: 93336 RVA: 0x0006D3B0 File Offset: 0x0006B5B0
[Token(Token = "0x6016C98")]
[Address(RVA = "0x493B760", Offset = "0x493B760", VA = "0x493B760")]
internal bool 丄丑丒丒丁丂丑丘不(ref List<七丁不业世丐不且业> 丕且丗丞丄一丏丟不, [Optional] 丏且丐且丕丁与万东 万三世丄业丐丕丟丁, 丄丛丞丅丂丝丄三丞 丘丛丙丟丝万丘上丄 = 丄丛丞丅丂丝丄三丞.LooseAll)
{
	return default(bool);
}
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x06016C99 RID: 93337 RVA: 0x0006D3C8 File Offset: 0x0006B5C8
[Token(Token = "0x6016C99")]
[Address(RVA = "0x493BA38", Offset = "0x493BA38", VA = "0x493BA38")]
internal bool 丄丑丒丒丁丂丑丘不(ref List<七丁不业世丐不且业> 丕且丗丞丄一丏丟不, IReadOnlyList<丕万丌丄丏丟不丟丑> 丐不丁丏上丅丈与丆, 丏丙丅万丝丙丟一丕 丘世丗且丁三且专丆)
{
	return default(bool);
}
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x06016C98 RID: 93336 RVA: 0x0006D3B0 File Offset: 0x0006B5B0
[Token(Token = "0x6016C98")]
[Address(RVA = "0x493B760", Offset = "0x493B760", VA = "0x493B760")]
internal bool 丄丑丒丒丁丂丑丘不(ref List<七丁不业世丐不且业> 丕且丗丞丄一丏丟不, [Optional] 丏且丐且丕丁与万东 万三世丄业丐丕丟丁, 丄丛丞丅丂丝丄三丞 丘丛丙丟丝万丘上丄 = 丄丛丞丅丂丝丄三丞.LooseAll)
{
	return default(bool);
}
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x06016C97 RID: 93335 RVA: 0x0006D398 File Offset: 0x0006B598
[Token(Token = "0x6016C97")]
[Address(RVA = "0x493B5A0", Offset = "0x493B5A0", VA = "0x493B5A0")]
internal bool 丕世与专丘七东丘世(丕丟丆丙丛丌下丁丝 业万且丒且专东不万)
{
	return default(bool);
}

// PGCompany.MainStore.七丁不业世丐不且业
// Token: 0x06016C34 RID: 93236 RVA: 0x0006D170 File Offset: 0x0006B370
[Token(Token = "0x6016C34")]
[Address(RVA = "0x49383C4", Offset = "0x49383C4", VA = "0x49383C4")]
internal bool 丄不丙丞丅丌丂丝丆()
{
	return default(bool);
}
// PGCompany.MainStore.丄丙丑丏丐不丘三七
// Token: 0x170037BF RID: 14271
// (get) Token: 0x06016B4F RID: 93007 RVA: 0x0006CC00 File Offset: 0x0006AE00
[Token(Token = "0x170037BF")]
protected override bool 丟丂丂丏专丕丆上丅
{
	[Token(Token = "0x6016B4F")]
	[Address(RVA = "0x493A138", Offset = "0x493A138", VA = "0x493A138", Slot = "13")]
	get
	{
		return default(bool);
	}
}

// PGCompany.MainStore.七丁不业世丐不且业
// Token: 0x06016C38 RID: 93240 RVA: 0x0006D188 File Offset: 0x0006B388
[Token(Token = "0x6016C38")]
[Address(RVA = "0x49386F4", Offset = "0x49386F4", VA = "0x49386F4")]
internal bool 丛丗丞丕丄丟七丗下(string 一丅丛世下下三上丐)
{
	return default(bool);
}
// PGCompany.MainStore.七丑且丞不七业下丈
// Token: 0x17003798 RID: 14232
// (get) Token: 0x06016AE0 RID: 92896 RVA: 0x0006C888 File Offset: 0x0006AA88
[Token(Token = "0x17003798")]
protected override bool 丈七丂一丘丐丈丂丗
{
	[Token(Token = "0x6016AE0")]
	[Address(RVA = "0x4938AD0", Offset = "0x4938AD0", VA = "0x4938AD0", Slot = "12")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.七丑且丞不七业下丈
// Token: 0x17003799 RID: 14233
// (get) Token: 0x06016AE1 RID: 92897 RVA: 0x0006C8A0 File Offset: 0x0006AAA0
[Token(Token = "0x17003799")]
protected override bool 丟丂丂丏专丕丆上丅
{
	[Token(Token = "0x6016AE1")]
	[Address(RVA = "0x4938AD8", Offset = "0x4938AD8", VA = "0x4938AD8", Slot = "13")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.七丑且丞不七业下丈
// Token: 0x1700379A RID: 14234
// (get) Token: 0x06016AE2 RID: 92898 RVA: 0x0006C8B8 File Offset: 0x0006AAB8
[Token(Token = "0x1700379A")]
internal override bool 丟世丝丏丐丗丙业丂
{
	[Token(Token = "0x6016AE2")]
	[Address(RVA = "0x4938AE0", Offset = "0x4938AE0", VA = "0x4938AE0", Slot = "6")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.三丏丌丏不三丝丐世
// Token: 0x17003804 RID: 14340
// (get) Token: 0x06016C48 RID: 93256 RVA: 0x0006D1D0 File Offset: 0x0006B3D0
[Token(Token = "0x17003804")]
internal int 丅下下世丄丅丒丈丌
{
	[Token(Token = "0x6016C48")]
	[Address(RVA = "0x493E5D0", Offset = "0x493E5D0", VA = "0x493E5D0")]
	get
	{
		return 0;
	}
}
// PGCompany.MainStore.三丏丌丏不三丝丐世
// Token: 0x17003804 RID: 14340
// (get) Token: 0x06016C48 RID: 93256 RVA: 0x0006D1D0 File Offset: 0x0006B3D0
[Token(Token = "0x17003804")]
internal int 丅下下世丄丅丒丈丌
{
	[Token(Token = "0x6016C48")]
	[Address(RVA = "0x493E5D0", Offset = "0x493E5D0", VA = "0x493E5D0")]
	get
	{
		return 0;
	}
}
// PGCompany.MainStore.三丏丌丏不三丝丐世
// Token: 0x17003808 RID: 14344
// (get) Token: 0x06016C4C RID: 93260 RVA: 0x0006D230 File Offset: 0x0006B430
[Token(Token = "0x17003808")]
internal bool 丄丝丅一丑且且万万
{
	[Token(Token = "0x6016C4C")]
	[Address(RVA = "0x493E734", Offset = "0x493E734", VA = "0x493E734")]
	get
	{
		return default(bool);
	}
}
// PGCompany.MainStore.三丏丌丏不三丝丐世
// Token: 0x17003803 RID: 14339
// (get) Token: 0x06016C47 RID: 93255 RVA: 0x0006D1B8 File Offset: 0x0006B3B8
[Token(Token = "0x17003803")]
internal int 丂一不万丆一丒丟三
{
	[Token(Token = "0x6016C47")]
	[Address(RVA = "0x493E584", Offset = "0x493E584", VA = "0x493E584")]
	get
	{
		return 0;
	}
}
OOOOH SHINY!:
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x17003818 RID: 14360
// (get) Token: 0x06016C8D RID: 93325 RVA: 0x0006D350 File Offset: 0x0006B550
// (set) Token: 0x06016C8E RID: 93326 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17003818")]
internal int 万丗丟与丂丒丐丅三
{
	[Token(Token = "0x6016C8D")]
	[Address(RVA = "0x493AB14", Offset = "0x493AB14", VA = "0x493AB14")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x1E2F3A4", Offset = "0x1E2F3A4")]
	get
	{
		return 0;
	}
// PGCompany.MainStore.丅丗下三丄丆东丕丂
// Token: 0x17003819 RID: 14361
// (get) Token: 0x06016C8F RID: 93327 RVA: 0x0006D368 File Offset: 0x0006B568
[Token(Token = "0x17003819")]
internal int 丏一且丁丆万丑丘丁
{
	[Token(Token = "0x6016C8F")]
	[Address(RVA = "0x493AB24", Offset = "0x493AB24", VA = "0x493AB24")]
	get
	{
		return 0;
	}
}

Canbuy I believe (free shopping?) (I think some UI thing):
// PGCompany.MainStore.ConstructableOfferMainStorePromotionView
// Token: 0x06016A59 RID: 92761 RVA: 0x0006C588 File Offset: 0x0006A788
[Token(Token = "0x6016A59")]
[Address(RVA = "0x4935188", Offset = "0x4935188", VA = "0x4935188", Slot = "7")]
internal override bool 一且丒三丛丗丙丟丂()
{
	return default(bool);
}

Fort item available (main, use this):
// Rilisoft.FortItem
// Token: 0x17001BDA RID: 7130
// (get) Token: 0x0600A94D RID: 43341 RVA: 0x0002EC08 File Offset: 0x0002CE08
[Token(Token = "0x1700151C")]
public bool Available
{
	[Token(Token = "0x6008017")]
	[Address(RVA = "0x2201D5C", Offset = "0x2201D5C", VA = "0x2201D5C")]
	get
	{
		return default(bool);
	}
}
For item available by level (sub):
// Rilisoft.FortItem
// Token: 0x17001BD9 RID: 7129
// (get) Token: 0x0600A94C RID: 43340 RVA: 0x0002EBF0 File Offset: 0x0002CDF0
[Token(Token = "0x1700151B")]
public bool AvailableByLevel
{
	[Token(Token = "0x6008016")]
	[Address(RVA = "0x21FC9F4", Offset = "0x21FC9F4", VA = "0x21FC9F4")]
	get
	{
		return default(bool);
	}
}
Fort item available by lockers (sub):
// Rilisoft.FortItem
// Token: 0x17001BDB RID: 7131
// (get) Token: 0x0600A94E RID: 43342 RVA: 0x0002EC20 File Offset: 0x0002CE20
[Token(Token = "0x1700151D")]
public bool AvailableByLockers
{
	[Token(Token = "0x6008018")]
	[Address(RVA = "0x21FE060", Offset = "0x21FE060", VA = "0x21FE060")]
	get
	{
		return default(bool);
	}
}
Clan chest is opened:
// ClanChest
// Token: 0x170009A5 RID: 2469
// (get) Token: 0x06003E7C RID: 15996 RVA: 0x00011F88 File Offset: 0x00010188
[Token(Token = "0x1700066A")]
public bool IsOpened
{
	[Token(Token = "0x6002FF9")]
	[Address(RVA = "0x1CED188", Offset = "0x1CED188", VA = "0x1CED188")]
	get
	{
		return default(bool);
	}
}
Can open clan chest 2:
// ClanChest
// Token: 0x170009A7 RID: 2471
// (get) Token: 0x06003E7E RID: 15998 RVA: 0x00011FB8 File Offset: 0x000101B8
[Token(Token = "0x1700066C")]
public bool PossibleOpenByCurrency
{
	[Token(Token = "0x6002FFB")]
	[Address(RVA = "0x1CED5B4", Offset = "0x1CED5B4", VA = "0x1CED5B4")]
	get
	{
		return default(bool);
	}
}
Clan chest parts count Max:
// ClanChest
// Token: 0x06003E82 RID: 16002 RVA: 0x00012018 File Offset: 0x00010218
[Token(Token = "0x6002FFF")]
[Address(RVA = "0x1CEDAE0", Offset = "0x1CEDAE0", VA = "0x1CEDAE0")]
internal int DropPartsCountMax(ClanItemType? itemType, bool withProcChance, ItemRarity? rarity)
{
	return 0;
}
Clan chest parts count max:
// ClanChest
// Token: 0x06003E85 RID: 16005 RVA: 0x00012060 File Offset: 0x00010260
[Token(Token = "0x6003002")]
[Address(RVA = "0x1CEE5F0", Offset = "0x1CEE5F0", VA = "0x1CEE5F0")]
internal int DropPartsCountMin(ClanItemType? itemType, ItemRarity? rarity)
{
	return 0;
}

Turret aoe:
// TurretControllerScene_Rocketslauncher
// Token: 0x170013D8 RID: 5080
// (get) Token: 0x06007A05 RID: 31237 RVA: 0x00022620 File Offset: 0x00020820
[Token(Token = "0x17000E54")]
private float splashRadius
{
	[Token(Token = "0x6005CF0")]
	[Address(RVA = "0x1ECFBAC", Offset = "0x1ECFBAC", VA = "0x1ECFBAC")]
	get
	{
		return 0f;
	}
}
Vehicle max upgrade:
// BalanceController
// Token: 0x060003EA RID: 1002 RVA: 0x00003078 File Offset: 0x00001278
[Token(Token = "0x600032E")]
[Address(RVA = "0x1177078", Offset = "0x1177078", VA = "0x1177078")]
internal static int GetMaxNumberOfUpsForVehicle(string tag)
{
	return 0;
}
Max ammo:
// BalanceController
// Token: 0x06000429 RID: 1065 RVA: 0x00003510 File Offset: 0x00001710
[Token(Token = "0x600036D")]
[Address(RVA = "0x117C320", Offset = "0x117C320", VA = "0x117C320")]
internal static int GetMaxAmmo(int prefabName)
{
	return 0;
}
Rocket is headshot or maybe has headshot ability:
// BalanceController
// Token: 0x06000426 RID: 1062 RVA: 0x000034C8 File Offset: 0x000016C8
[Token(Token = "0x600036A")]
[Address(RVA = "0x117C01C", Offset = "0x117C01C", VA = "0x117C01C")]
internal static bool? GetIsRocketHeadshot(int prefabName)
{
	return default(bool?);
}
Weapon unlock at level:
// BalanceController
// Token: 0x0600042B RID: 1067 RVA: 0x00003540 File Offset: 0x00001740
[Token(Token = "0x600036F")]
[Address(RVA = "0x117C4DC", Offset = "0x117C4DC", VA = "0x117C4DC")]
internal static int GetLevelOpenWeapon(int prefabName)
{
	return 0;
}
Get module value:
// BalanceController
// Token: 0x06000486 RID: 1158 RVA: 0x00003810 File Offset: 0x00001A10
[Token(Token = "0x60003CA")]
[Address(RVA = "0x11A14AC", Offset = "0x11A14AC", VA = "0x11A14AC")]
internal static float GetModuleValue(int level)
{
	return 0f;
}
Get next price or efficiency or damage for weapon upgrade or idk for weapon upgrade:
// BalanceController
// Token: 0x060003E9 RID: 1001 RVA: 0x00003060 File Offset: 0x00001260
[Token(Token = "0x600032D")]
[Address(RVA = "0x1177070", Offset = "0x1177070", VA = "0x1177070")]
internal static float GetNextUpForUpOfWeapon9_1(WeaponUpgradeV7 up, string weaponTag)
{
	return 0f;
}
Get other perameters for weapon:
// BalanceController
// Token: 0x06000428 RID: 1064 RVA: 0x000034F8 File Offset: 0x000016F8
[Token(Token = "0x600036C")]
[Address(RVA = "0x117C214", Offset = "0x117C214", VA = "0x117C214")]
internal static float? GetOtherParameterForWeapon(int _index)
{
	return default(float?);
}
Reload speed modifier:
// BalanceController
// Token: 0x06000421 RID: 1057 RVA: 0x00003450 File Offset: 0x00001650
[Token(Token = "0x6000365")]
[Address(RVA = "0x117BACC", Offset = "0x117BACC", VA = "0x117BACC")]
internal static float GetReloadSpeedCoef(int prefabName)
{
	return 0f;
}
Get rocket aoe:
// BalanceController
// Token: 0x06000424 RID: 1060 RVA: 0x00003498 File Offset: 0x00001698
[Token(Token = "0x6000368")]
[Address(RVA = "0x117BE04", Offset = "0x117BE04", VA = "0x117BE04")]
internal static float? GetRocketRadiusDamage(int prefabName)
{
	return default(float?);
}
Get rocket self damage radius:
// BalanceController
// Token: 0x06000425 RID: 1061 RVA: 0x000034B0 File Offset: 0x000016B0
[Token(Token = "0x6000369")]
[Address(RVA = "0x117BF10", Offset = "0x117BF10", VA = "0x117BF10")]
internal static float? GetRocketRadiusDamageSelf(int prefabName)
{
	return default(float?);
}
Get rocket speed:
// BalanceController
// Token: 0x06000423 RID: 1059 RVA: 0x00003480 File Offset: 0x00001680
[Token(Token = "0x6000367")]
[Address(RVA = "0x117BCC4", Offset = "0x117BCC4", VA = "0x117BCC4")]
internal static float GetRocketSpeed(int prefabName)
{
	return 0f;
}
Fire rate modifier:
// BalanceController
// Token: 0x06000422 RID: 1058 RVA: 0x00003468 File Offset: 0x00001668
[Token(Token = "0x6000366")]
[Address(RVA = "0x117BBC8", Offset = "0x117BBC8", VA = "0x117BBC8")]
internal static float GetShootSpeedCoef(int prefabName)
{
	return 0f;
}
Shop fire rate:
// BalanceController
// Token: 0x0600041D RID: 1053 RVA: 0x000033F0 File Offset: 0x000015F0
[Token(Token = "0x6000361")]
[Address(RVA = "0x117B6C0", Offset = "0x117B6C0", VA = "0x117B6C0")]
internal static int GetShopFireRate(int prefabName)
{
	return 0;
}
Shop mobility:
// BalanceController
// Token: 0x0600041F RID: 1055 RVA: 0x00003420 File Offset: 0x00001620
[Token(Token = "0x6000363")]
[Address(RVA = "0x117B8D4", Offset = "0x117B8D4", VA = "0x117B8D4")]
internal static int GetShopMobility(int prefabName)
{
	return 0;
}
Player walk speed modifier:
// BalanceController
// Token: 0x0600041E RID: 1054 RVA: 0x00003408 File Offset: 0x00001608
[Token(Token = "0x6000362")]
[Address(RVA = "0x117B7B8", Offset = "0x117B7B8", VA = "0x117B7B8")]
internal static float GetSpeedModif(int prefabName)
{
	return 0f;
}
Unlock weapon tournament tier I think:
// BalanceController
// Token: 0x0600042A RID: 1066 RVA: 0x00003528 File Offset: 0x00001728
[Token(Token = "0x600036E")]
[Address(RVA = "0x117C420", Offset = "0x117C420", VA = "0x117C420")]
internal static int GetTierOpenWeapon(int prefabName)
{
	return 0;
}
Get unlock level:
// BalanceController
// Token: 0x0600043F RID: 1087 RVA: 0x00003648 File Offset: 0x00001848
[Token(Token = "0x6000383")]
[Address(RVA = "0x117DEE4", Offset = "0x117DEE4", VA = "0x117DEE4")]
internal static int GetUnlockLevel(GameMode gameMode)
{
	return 0;
}
Get vehicle acceleration:
// BalanceController
// Token: 0x060003E2 RID: 994 RVA: 0x00002FD0 File Offset: 0x000011D0
[Token(Token = "0x6000326")]
[Address(RVA = "0x1176374", Offset = "0x1176374", VA = "0x1176374")]
internal static int GetVehicleAcceleration(string tag, int up)
{
	return 0;
}
Get vehicle durability:
// BalanceController
// Token: 0x060003E5 RID: 997 RVA: 0x00003018 File Offset: 0x00001218
[Token(Token = "0x6000329")]
[Address(RVA = "0x1176998", Offset = "0x1176998", VA = "0x1176998")]
internal static int GetVehicleDurability(string tag, int up)
{
	return 0;
}
Get vehicle handling:
// BalanceController
// Token: 0x060003E3 RID: 995 RVA: 0x00002FE8 File Offset: 0x000011E8
[Token(Token = "0x6000327")]
[Address(RVA = "0x1176580", Offset = "0x1176580", VA = "0x1176580")]
internal static int GetVehicleHandling(string tag, int up)
{
	return 0;
}
Get vehicle speed:
// BalanceController
// Token: 0x060003E4 RID: 996 RVA: 0x00003000 File Offset: 0x00001200
[Token(Token = "0x6000328")]
[Address(RVA = "0x117678C", Offset = "0x117678C", VA = "0x117678C")]
internal static int GetVehicleSpeed(string tag, int up)
{
	return 0;
}
Gadget heal 2:
// BalanceController
// Token: 0x060003EF RID: 1007 RVA: 0x000030C0 File Offset: 0x000012C0
[Token(Token = "0x6000333")]
[Address(RVA = "0x1177784", Offset = "0x1177784", VA = "0x1177784")]
internal static float HealOfGadget(string gadgetId)
{
	return 0f;
}
Heal per sec of med station gadget:
// BalanceController
// Token: 0x060003F0 RID: 1008 RVA: 0x000030D8 File Offset: 0x000012D8
[Token(Token = "0x6000334")]
[Address(RVA = "0x11778DC", Offset = "0x11778DC", VA = "0x11778DC")]
internal static float HPSOfGadget(string gadgetId)
{
	return 0f;
}
Buy all gadgets:
// BalanceController
// Token: 0x06000490 RID: 1168 RVA: 0x00003870 File Offset: 0x00001A70
[Token(Token = "0x60003D4")]
[Address(RVA = "0x11ABC7C", Offset = "0x11ABC7C", VA = "0x11ABC7C")]
private static bool isAvalibleListGadgetes(List<string> _ids)
{
	return default(bool);
}
Weapon available for bonus:
// BalanceController
// Token: 0x0600048E RID: 1166 RVA: 0x00003858 File Offset: 0x00001A58
[Token(Token = "0x60003D2")]
[Address(RVA = "0x11AB758", Offset = "0x11AB758", VA = "0x11AB758")]
private static bool IsWeaponAvalibleForBonus(string weaponTag)
{
	return default(bool);
}
Reload
Valor needed for clan craft:
// BalanceController
// Token: 0x06000406 RID: 1030 RVA: 0x00003288 File Offset: 0x00001488
[Token(Token = "0x600034A")]
[Address(RVA = "0x1179B04", Offset = "0x1179B04", VA = "0x1179B04")]
internal static int MedalsForClanCraft(string _id)
{
	return 0;
}
Craft parts 2:
// BalanceController
// Token: 0x06000404 RID: 1028 RVA: 0x00003258 File Offset: 0x00001458
[Token(Token = "0x6000348")]
[Address(RVA = "0x117935C", Offset = "0x117935C", VA = "0x117935C")]
internal static int NumOfDetailsForCraft(string _id)
{
	return 0;
}
Tier of gadget (maybe clan league?):
// BalanceController
// Token: 0x060003FE RID: 1022 RVA: 0x00003210 File Offset: 0x00001410
[Token(Token = "0x6000342")]
[Address(RVA = "0x1178D14", Offset = "0x1178D14", VA = "0x1178D14")]
internal static int TierOfGadget(string gadgetId)
{
	return 0;
}
Has inapp bonuses:
// BalanceController
// Token: 0x1700009F RID: 159
// (get) Token: 0x0600049D RID: 1181 RVA: 0x000038B8 File Offset: 0x00001AB8
[Token(Token = "0x1700007F")]
internal static bool HasInappBonuses
{
	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x11AFF7C", Offset = "0x11AFF7C", VA = "0x11AFF7C")]
	get
	{
		return default(bool);
	}
}
Add craft parts (event currency)?:
// InappBonusesController
// Token: 0x060050B6 RID: 20662 RVA: 0x00016F80 File Offset: 0x00015180
[Token(Token = "0x6003D91")]
[Address(RVA = "0x18B0FFC", Offset = "0x18B0FFC", VA = "0x18B0FFC")]
internal static bool AddEventCurrency(string eventId, int count)
{
	return default(bool);
}
In app bonus already bought?:
// InappBonusesController
// Token: 0x060050A8 RID: 20648 RVA: 0x00016F20 File Offset: 0x00015120
[Token(Token = "0x6003D83")]
[Address(RVA = "0x18A7A74", Offset = "0x18A7A74", VA = "0x18A7A74")]
public bool InappBonusAlreadyBought(Dictionary<string, object> bonus)
{
	return default(bool);
}
Is in match (bye-bye in app bonuses!):
// InappBonusesController
// Token: 0x060050B1 RID: 20657 RVA: 0x00016F50 File Offset: 0x00015150
[Token(Token = "0x6003D8C")]
[Address(RVA = "0x18AB92C", Offset = "0x18AB92C", VA = "0x18AB92C")]
private static bool IsInMatch()
{
	return default(bool);
}

Free tickets for pack:
// BalanceController
// Token: 0x1700008E RID: 142
// (get) Token: 0x0600043A RID: 1082 RVA: 0x000035D0 File Offset: 0x000017D0
[Token(Token = "0x1700006E")]
internal static int FreeTicketsPerPack
{
	[Token(Token = "0x600037E")]
	[Address(RVA = "0x117DC00", Offset = "0x117DC00", VA = "0x117DC00")]
	get
	{
		return 0;
	}
}
Level to unlock clans:
// BalanceController
// Token: 0x17000085 RID: 133
// (get) Token: 0x06000409 RID: 1033 RVA: 0x000032B8 File Offset: 0x000014B8
[Token(Token = "0x17000065")]
internal static int LevelOpenClans
{
	[Token(Token = "0x600034D")]
	[Address(RVA = "0x1179EA8", Offset = "0x1179EA8", VA = "0x1179EA8")]
	get
	{
		return 0;
	}
}
Task book unlock level:
// BalanceController
// Token: 0x17000086 RID: 134
// (get) Token: 0x0600040A RID: 1034 RVA: 0x000032D0 File Offset: 0x000014D0
[Token(Token = "0x17000066")]
internal static int LevelOpenTaskBook
{
	[Token(Token = "0x600034E")]
	[Address(RVA = "0x1179F3C", Offset = "0x1179F3C", VA = "0x1179F3C")]
	get
	{
		return 0;
	}
}
Lobby items unlock level:
// BalanceController
// Token: 0x17000091 RID: 145
// (get) Token: 0x0600043D RID: 1085 RVA: 0x00003618 File Offset: 0x00001818
[Token(Token = "0x17000071")]
internal static int LobbyItemsLevelRequired
{
	[Token(Token = "0x6000381")]
	[Address(RVA = "0x117DDBC", Offset = "0x117DDBC", VA = "0x117DDBC")]
	get
	{
		return 0;
	}
}
Max free tickets:
// BalanceController
// Token: 0x1700008F RID: 143
// (get) Token: 0x0600043B RID: 1083 RVA: 0x000035E8 File Offset: 0x000017E8
[Token(Token = "0x1700006F")]
internal static int MaxFreeTickets
{
	[Token(Token = "0x600037F")]
	[Address(RVA = "0x117DC94", Offset = "0x117DC94", VA = "0x117DC94")]
	get
	{
		return 0;
	}
}
Minigames unlock level:
// BalanceController
// Token: 0x17000092 RID: 146
// (get) Token: 0x0600043E RID: 1086 RVA: 0x00003630 File Offset: 0x00001830
[Token(Token = "0x17000072")]
internal static int MiniGamesLevelRequired
{
	[Token(Token = "0x6000382")]
	[Address(RVA = "0x117DE50", Offset = "0x117DE50", VA = "0x117DE50")]
	get
	{
		return 0;
	}
}
Start for open 4box (IDK):
// BalanceController
// Token: 0x17000087 RID: 135
// (get) Token: 0x0600040B RID: 1035 RVA: 0x000032E8 File Offset: 0x000014E8
[Token(Token = "0x17000067")]
internal static int StarsForOpen4Box
{
	[Token(Token = "0x600034F")]
	[Address(RVA = "0x1179FD0", Offset = "0x1179FD0", VA = "0x1179FD0")]
	get
	{
		return 0;
	}
}
Time when free tickets:
// BalanceController
// Token: 0x17000090 RID: 144
// (get) Token: 0x0600043C RID: 1084 RVA: 0x00003600 File Offset: 0x00001800
[Token(Token = "0x17000070")]
internal static int TimeGiveFreeTickets
{
	[Token(Token = "0x6000380")]
	[Address(RVA = "0x117DD28", Offset = "0x117DD28", VA = "0x117DD28")]
	get
	{
		return 0;
	}
}
Squads unlock level:
// BalanceController
// Token: 0x17000093 RID: 147
// (get) Token: 0x06000440 RID: 1088 RVA: 0x00003660 File Offset: 0x00001860
[Token(Token = "0x17000073")]
internal static int UnlockSquadsLevel
{
	[Token(Token = "0x6000384")]
	[Address(RVA = "0x117DFC4", Offset = "0x117DFC4", VA = "0x117DFC4")]
	get
	{
		return 0;
	}
}
Is bot reloading (bot no attack):
// Token: 0x17000E87 RID: 3719
	// (get) Token: 0x060058BB RID: 22715 RVA: 0x00018D08 File Offset: 0x00016F08
	[Token(Token = "0x17000A32")]
	internal bool IsReloadingNow
	{
		[Token(Token = "0x60043AA")]
		[Address(RVA = "0x16BFAC8", Offset = "0x16BFAC8", VA = "0x16BFAC8")]
		get
		{
			return default(bool);
		}
	}
Bot can shoot:
// PlayerBotEntity
// Token: 0x17000E88 RID: 3720
// (get) Token: 0x060058BF RID: 22719 RVA: 0x00018D20 File Offset: 0x00016F20
[Token(Token = "0x17000A33")]
internal bool CanShoot
{
	[Token(Token = "0x60043AE")]
	[Address(RVA = "0x16BFC60", Offset = "0x16BFC60", VA = "0x16BFC60")]
	get
	{
		return default(bool);
	}
}
Bot attack distance max:
// PlayerBotEntity
// Token: 0x17000E8A RID: 3722
// (get) Token: 0x060058C2 RID: 22722 RVA: 0x00018D50 File Offset: 0x00016F50
[Token(Token = "0x17000A35")]
internal float AttackDistanceMax
{
	[Token(Token = "0x60043B1")]
	[Address(RVA = "0x16C096C", Offset = "0x16C096C", VA = "0x16C096C")]
	get
	{
		return 0f;
	}
}
Bot no grenades:
// PlayerBotEntity
// Token: 0x17000E8C RID: 3724
// (get) Token: 0x060058C8 RID: 22728 RVA: 0x00018D80 File Offset: 0x00016F80
[Token(Token = "0x17000A37")]
internal bool CanThrowGrenade
{
	[Token(Token = "0x60043B7")]
	[Address(RVA = "0x16C0F84", Offset = "0x16C0F84", VA = "0x16C0F84")]
	get
	{
		return default(bool);
	}
}
Bot current speed:
// PlayerBotEntity
// Token: 0x17000E7F RID: 3711
// (get) Token: 0x06005899 RID: 22681 RVA: 0x00018C78 File Offset: 0x00016E78
[Token(Token = "0x17000A2A")]
internal float CurrentSpeed
{
	[Token(Token = "0x6004388")]
	[Address(RVA = "0x16BBDC8", Offset = "0x16BBDC8", VA = "0x16BBDC8")]
	get
	{
		return 0f;
	}
}
Bot max armor:
// PlayerBotEntity
// Token: 0x17000E81 RID: 3713
// (get) Token: 0x060058A7 RID: 22695 RVA: 0x00018CC0 File Offset: 0x00016EC0
[Token(Token = "0x17000A2C")]
internal float MaxArmor
{
	[Token(Token = "0x6004396")]
	[Address(RVA = "0x16BCE38", Offset = "0x16BCE38", VA = "0x16BCE38")]
	get
	{
		return 0f;
	}
}
Bot max health:
// PlayerBotEntity
// Token: 0x17000E80 RID: 3712
// (get) Token: 0x060058A6 RID: 22694 RVA: 0x00018CA8 File Offset: 0x00016EA8
[Token(Token = "0x17000A2B")]
internal float MaxHealth
{
	[Token(Token = "0x6004395")]
	[Address(RVA = "0x16BCC9C", Offset = "0x16BCC9C", VA = "0x16BCC9C")]
	get
	{
		return 0f;
	}
}
Godmode but maybe only for bots:
// Token: 0x170006F6 RID: 1782
	// (get) Token: 0x06002E95 RID: 11925 RVA: 0x0000E4C0 File Offset: 0x0000C6C0
	// (set) Token: 0x06002E96 RID: 11926 RVA: 0x00002053 File Offset: 0x00000253
	[Token(Token = "0x170004E7")]
	internal bool isImmortality
	{
		[Token(Token = "0x60024E1")]
		[Address(RVA = "0xEE2028", Offset = "0xEE2028", VA = "0xEE2028")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60024E2")]
		[Address(RVA = "0xEE20F0", Offset = "0xEE20F0", VA = "0xEE20F0")]
		set
		{
		}
	}
Has encryption key (do something to encryption, maybe even disable?):
// Rilisoft.EncryptedPlayerPrefs
// Token: 0x0600A6FB RID: 42747 RVA: 0x0002DC60 File Offset: 0x0002BE60
[Token(Token = "0x6007E6E")]
[Address(RVA = "0x1C07CF0", Offset = "0x1C07CF0", VA = "0x1C07CF0")]
public bool HasKey(string key)
{
	return default(bool);
}
Skip tutorial?:
// TrainingController
// Token: 0x17001399 RID: 5017
// (get) Token: 0x0600785D RID: 30813 RVA: 0x00021FC0 File Offset: 0x000201C0
// (set) Token: 0x0600785E RID: 30814 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000E35")]
internal static TrainingController.NewTrainingCompletedStage CompletedTrainingStage
{
	[Token(Token = "0x6005BCD")]
	[Address(RVA = "0x1A0782C", Offset = "0x1A0782C", VA = "0x1A0782C")]
	get
	{
		return TrainingController.NewTrainingCompletedStage.None;
	}
	[Token(Token = "0x6005BCE")]
	[Address(RVA = "0x1A1C2F4", Offset = "0x1A1C2F4", VA = "0x1A1C2F4")]
	set
	{
	}
}
Fire at dummies before allowed in tutorial:
// TrainingController
// Token: 0x1700139D RID: 5021
// (get) Token: 0x06007866 RID: 30822 RVA: 0x00022020 File Offset: 0x00020220
[Token(Token = "0x17000E39")]
internal static bool FireButtonEnabled
{
	[Token(Token = "0x6005BD6")]
	[Address(RVA = "0x1A1D4B0", Offset = "0x1A1D4B0", VA = "0x1A1D4B0")]
	get
	{
		return default(bool);
	}
}
Skip tutorial:
// TrainingController
// Token: 0x17001398 RID: 5016
// (get) Token: 0x06007859 RID: 30809 RVA: 0x00021F90 File Offset: 0x00020190
[Token(Token = "0x17000E34")]
internal static bool TrainingCompleted
{
	[Token(Token = "0x6005BC9")]
	[Address(RVA = "0x1A075C0", Offset = "0x1A075C0", VA = "0x1A075C0")]
	get
	{
		return default(bool);
	}
}

Skip fort tutorial:
// Rilisoft.FortCraftController
// Token: 0x17001C05 RID: 7173
// (get) Token: 0x0600AA52 RID: 43602 RVA: 0x0002F070 File Offset: 0x0002D270
[Token(Token = "0x1700153D")]
private bool TutorialCompleted
{
	[Token(Token = "0x60080E0")]
	[Address(RVA = "0x1C12604", Offset = "0x1C12604", VA = "0x1C12604")]
	get
	{
		return default(bool);
	}
}
Coins price:
// Rilisoft.GameCurrencyData
// Token: 0x17001C30 RID: 7216
// (get) Token: 0x0600AB8C RID: 43916 RVA: 0x0002F358 File Offset: 0x0002D558
[Token(Token = "0x1700155E")]
internal int CoinsPrice
{
	[Token(Token = "0x60081CA")]
	[Address(RVA = "0x2005380", Offset = "0x2005380", VA = "0x2005380")]
	get
	{
		return 0;
	}
}
Currency count:
// Rilisoft.GameCurrencyData
// Token: 0x17001C2C RID: 7212
// (get) Token: 0x0600AB88 RID: 43912 RVA: 0x0002F328 File Offset: 0x0002D528
[Token(Token = "0x1700155A")]
internal int CurrencyCount
{
	[Token(Token = "0x60081C6")]
	[Address(RVA = "0x2005274", Offset = "0x2005274", VA = "0x2005274")]
	get
	{
		return 0;
	}
}
Gems price:
// Token: 0x17001C2F RID: 7215
// (get) Token: 0x0600AB8B RID: 43915 RVA: 0x0002F340 File Offset: 0x0002D540
[Token(Token = "0x1700155D")]
internal int GemsPrice
{
	[Token(Token = "0x60081C9")]
	[Address(RVA = "0x200529C", Offset = "0x200529C", VA = "0x200529C")]
	get
	{
		return 0;
	}
}
Real price:
// Rilisoft.GameCurrencyData
// Token: 0x17001C31 RID: 7217
// (get) Token: 0x0600AB8D RID: 43917 RVA: 0x0002F370 File Offset: 0x0002D570
[Token(Token = "0x1700155F")]
internal int RealPrice
{
	[Token(Token = "0x60081CB")]
	[Address(RVA = "0x2005464", Offset = "0x2005464", VA = "0x2005464")]
	get
	{
		return 0;
	}
}

Armor damage taken I think (godmode?):
// PlayerArmor
// Token: 0x06005881 RID: 22657 RVA: 0x00018C18 File Offset: 0x00016E18
[Token(Token = "0x6004370")]
[Address(RVA = "0x1FDF174", Offset = "0x1FDF174", VA = "0x1FDF174")]
public float GetDamage(float damage)
{
	return 0f;
}
Current total armor points:
// PlayerArmor
// Token: 0x17000E73 RID: 3699
// (get) Token: 0x06005865 RID: 22629 RVA: 0x00018B28 File Offset: 0x00016D28
[Token(Token = "0x17000A1E")]
public float currentTotalPoints
{
	[Token(Token = "0x6004354")]
	[Address(RVA = "0x1FDE5B4", Offset = "0x1FDE5B4", VA = "0x1FDE5B4")]
	get
	{
		return 0f;
	}
}
Current total armor points cached:
// PlayerArmor
// Token: 0x17000E72 RID: 3698
// (get) Token: 0x06005863 RID: 22627 RVA: 0x00018B10 File Offset: 0x00016D10
// (set) Token: 0x06005864 RID: 22628 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A1D")]
private float currentTotalPointsCached
{
	[Token(Token = "0x6004352")]
	[Address(RVA = "0x1FDE554", Offset = "0x1FDE554", VA = "0x1FDE554")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x6004353")]
	[Address(RVA = "0x1FDE580", Offset = "0x1FDE580", VA = "0x1FDE580")]
	set
	{
	}
}
Is armor drop picked up (auto regen?):
// PlayerArmor
// Token: 0x17000E79 RID: 3705
// (get) Token: 0x0600586F RID: 22639 RVA: 0x00018BB8 File Offset: 0x00016DB8
// (set) Token: 0x06005870 RID: 22640 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A24")]
public bool isBonusPickedUp
{
	[Token(Token = "0x600435E")]
	[Address(RVA = "0x1FDE73C", Offset = "0x1FDE73C", VA = "0x1FDE73C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA634", Offset = "0x6DA634")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x600435F")]
	[Address(RVA = "0x1FDE744", Offset = "0x1FDE744", VA = "0x1FDE744")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DA644", Offset = "0x6DA644")]
	private set
	{
	}
}
Max armor for current room:
// PlayerArmor
// Token: 0x17000E7A RID: 3706
// (get) Token: 0x06005871 RID: 22641 RVA: 0x00018BD0 File Offset: 0x00016DD0
[Token(Token = "0x17000A25")]
private int MaxArmorForCurrentRoom
{
	[Token(Token = "0x6004360")]
	[Address(RVA = "0x1FDE74C", Offset = "0x1FDE74C", VA = "0x1FDE74C")]
	get
	{
		return 0;
	}
}
Max armor points 2:
// PlayerArmor
// Token: 0x17000E77 RID: 3703
// (get) Token: 0x0600586B RID: 22635 RVA: 0x00018B88 File Offset: 0x00016D88
// (set) Token: 0x0600586C RID: 22636 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A22")]
private float maxArmorPoints
{
	[Token(Token = "0x600435A")]
	[Address(RVA = "0x1FDE67C", Offset = "0x1FDE67C", VA = "0x1FDE67C")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x600435B")]
	[Address(RVA = "0x1FDE6A8", Offset = "0x1FDE6A8", VA = "0x1FDE6A8")]
	set
	{
	}
}
Max total armor points:
// PlayerArmor
// Token: 0x17000E75 RID: 3701
// (get) Token: 0x06005868 RID: 22632 RVA: 0x00018B58 File Offset: 0x00016D58
[Token(Token = "0x17000A20")]
public float maxTotalPoints
{
	[Token(Token = "0x6004357")]
	[Address(RVA = "0x1FDE640", Offset = "0x1FDE640", VA = "0x1FDE640")]
	get
	{
		return 0f;
	}
}
Craft currency from dungeon:
// DungeonsController
// Token: 0x170001CA RID: 458
// (get) Token: 0x06000E85 RID: 3717 RVA: 0x00005898 File Offset: 0x00003A98
[Token(Token = "0x17000125")]
internal int AddCraftCurencyFromBonuse
{
	[Token(Token = "0x6000B44")]
	[Address(RVA = "0x138A098", Offset = "0x138A098", VA = "0x138A098")]
	get
	{
		return 0;
	}
}
Dungeon time left:
// DungeonsController
// Token: 0x170001C6 RID: 454
// (get) Token: 0x06000E81 RID: 3713 RVA: 0x00005838 File Offset: 0x00003A38
[Token(Token = "0x17000121")]
public float timeLeft
{
	[Token(Token = "0x6000B40")]
	[Address(RVA = "0x1389D34", Offset = "0x1389D34", VA = "0x1389D34")]
	get
	{
		return 0f;
	}
}
Percent for spawn craft currency dungeon:
// DungeonsController
// Token: 0x170001C9 RID: 457
// (get) Token: 0x06000E84 RID: 3716 RVA: 0x00005880 File Offset: 0x00003A80
[Token(Token = "0x17000124")]
internal static float PercentForSpawnCraftCurrency
{
	[Token(Token = "0x6000B43")]
	[Address(RVA = "0x138A00C", Offset = "0x138A00C", VA = "0x138A00C")]
	get
	{
		return 0f;
	}
}
Add craft currency from bonus dungeon 2:
// DungeonsController
// Token: 0x06000E85 RID: 3717 RVA: 0x00005898 File Offset: 0x00003A98
[Token(Token = "0x6000B44")]
[Address(RVA = "0x138A098", Offset = "0x138A098", VA = "0x138A098")]
internal int get_AddCraftCurencyFromBonuse()
{
	return 0;
}
Dungeon damage multiplier:
// DungeonsController
// Token: 0x170001CB RID: 459
// (get) Token: 0x06000E88 RID: 3720 RVA: 0x000058E0 File Offset: 0x00003AE0
[Token(Token = "0x17000126")]
internal static float GetCurrentDamageMultipler
{
	[Token(Token = "0x6000B47")]
	[Address(RVA = "0x138A624", Offset = "0x138A624", VA = "0x138A624")]
	get
	{
		return 0f;
	}
}
Dungeon health multiplier:
// DungeonsController
// Token: 0x170001CC RID: 460
// (get) Token: 0x06000E89 RID: 3721 RVA: 0x000058F8 File Offset: 0x00003AF8
[Token(Token = "0x17000127")]
internal static float GetCurrentHealthMultipler
{
	[Token(Token = "0x6000B48")]
	[Address(RVA = "0x138A8B4", Offset = "0x138A8B4", VA = "0x138A8B4")]
	get
	{
		return 0f;
	}
}
Spawn all mobs dungeon:
// DungeonsController
// Token: 0x170001D5 RID: 469
// (get) Token: 0x06000EA8 RID: 3752 RVA: 0x000059E8 File Offset: 0x00003BE8
[Token(Token = "0x17000130")]
internal static bool IsSpawnAllMobs
{
	[Token(Token = "0x6000B67")]
	[Address(RVA = "0x1392160", Offset = "0x1392160", VA = "0x1392160")]
	get
	{
		return default(bool);
	}
}
Armor same module type defense multiplier:
// Token: 0x17000E71 RID: 3697
	// (get) Token: 0x06005860 RID: 22624 RVA: 0x00018AE0 File Offset: 0x00016CE0
	[Token(Token = "0x17000A1C")]
	private float modulesMobResistMultiplier
	{
		[Token(Token = "0x600434F")]
		[Address(RVA = "0x1FDDF08", Offset = "0x1FDDF08", VA = "0x1FDDF08")]
		get
		{
			return 0f;
		}
	}
Set event has undropped rewards:
// Rilisoft.GameEventGuiSets
// Token: 0x17001C68 RID: 7272
// (get) Token: 0x0600ACD1 RID: 44241 RVA: 0x0002F790 File Offset: 0x0002D990
// (set) Token: 0x0600ACD2 RID: 44242 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001586")]
internal static bool HasUndroppedRewards
{
	[Token(Token = "0x60082C5")]
	[Address(RVA = "0x210C224", Offset = "0x210C224", VA = "0x210C224")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6EE0D0", Offset = "0x6EE0D0")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60082C6")]
	[Address(RVA = "0x210C288", Offset = "0x210C288", VA = "0x210C288")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6EE0E0", Offset = "0x6EE0E0")]
	private set
	{
	}
}
Available gifts count visual:
// GiftCategory
// Token: 0x17000C9C RID: 3228
// (get) Token: 0x06004CCD RID: 19661 RVA: 0x00015B88 File Offset: 0x00013D88
[Token(Token = "0x170008C5")]
public int AvaliableGiftsCount
{
	[Token(Token = "0x6003AED")]
	[Address(RVA = "0x19E5074", Offset = "0x19E5074", VA = "0x19E5074")]
	get
	{
		return 0;
	}
}
Gift increment free spins:
// GiftController
// Token: 0x06004D1D RID: 19741 RVA: 0x00015E88 File Offset: 0x00014088
[Token(Token = "0x6003B39")]
[Address(RVA = "0x19EBC04", Offset = "0x19EBC04", VA = "0x19EBC04")]
public int IncrementFreeSpins(int increment)
{
	return 0;
}
Gift is active:
// GiftController
// Token: 0x17000CB0 RID: 3248
// (get) Token: 0x06004CFE RID: 19710 RVA: 0x00015DF8 File Offset: 0x00013FF8
[Token(Token = "0x170008D9")]
public bool ActiveGift
{
	[Token(Token = "0x6003B1A")]
	[Address(RVA = "0x19E94C4", Offset = "0x19E94C4", VA = "0x19E94C4")]
	get
	{
		return default(bool);
	}
}
Can get free spin gift:
// GiftController
// Token: 0x17000CAD RID: 3245
// (get) Token: 0x06004CFB RID: 19707 RVA: 0x00015DB0 File Offset: 0x00013FB0
[Token(Token = "0x170008D6")]
public bool CanGetFreeSpinGift
{
	[Token(Token = "0x6003B17")]
	[Address(RVA = "0x19E95B4", Offset = "0x19E95B4", VA = "0x19E95B4")]
	get
	{
		return default(bool);
	}
}
Can get gift:
// GiftController
// Token: 0x17000CAE RID: 3246
// (get) Token: 0x06004CFC RID: 19708 RVA: 0x00015DC8 File Offset: 0x00013FC8
[Token(Token = "0x170008D7")]
public bool CanGetGift
{
	[Token(Token = "0x6003B18")]
	[Address(RVA = "0x19E95FC", Offset = "0x19E95FC", VA = "0x19E95FC")]
	get
	{
		return default(bool);
	}
}
Gift free spins count:
// GiftController
// Token: 0x17000CB2 RID: 3250
// (get) Token: 0x06004D00 RID: 19712 RVA: 0x00015E28 File Offset: 0x00014028
// (set) Token: 0x06004D01 RID: 19713 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170008DB")]
public int FreeSpins
{
	[Token(Token = "0x6003B1C")]
	[Address(RVA = "0x19E95F0", Offset = "0x19E95F0", VA = "0x19E95F0")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003B1D")]
	[Address(RVA = "0x19E9800", Offset = "0x19E9800", VA = "0x19E9800")]
	private set
	{
	}
}
Free spin gift?:
// GiftController
// Token: 0x17000C9D RID: 3229
// (get) Token: 0x06004CE0 RID: 19680 RVA: 0x00015C48 File Offset: 0x00013E48
// (set) Token: 0x06004CE1 RID: 19681 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170008C6")]
public bool GetFreeSpinGift
{
	[Token(Token = "0x6003AFC")]
	[Address(RVA = "0x19E78A4", Offset = "0x19E78A4", VA = "0x19E78A4")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6003AFD")]
	[Address(RVA = "0x19E78AC", Offset = "0x19E78AC", VA = "0x19E78AC")]
	set
	{
	}
}
Use free spin?:
// GiftController
// Token: 0x17000CB3 RID: 3251
// (get) Token: 0x06004D02 RID: 19714 RVA: 0x00015E40 File Offset: 0x00014040
[Token(Token = "0x170008DC")]
public bool UseFreeSpin
{
	[Token(Token = "0x6003B1E")]
	[Address(RVA = "0x19E9904", Offset = "0x19E9904", VA = "0x19E9904")]
	get
	{
		return default(bool);
	}
}

Dungeon = co-op survival
Max total armor points cached:
// PlayerArmor
// Token: 0x17000E74 RID: 3700
// (get) Token: 0x06005866 RID: 22630 RVA: 0x00018B40 File Offset: 0x00016D40
// (set) Token: 0x06005867 RID: 22631 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A1F")]
private float maxTotalPointsCached
{
	[Token(Token = "0x6004355")]
	[Address(RVA = "0x1FDE5E0", Offset = "0x1FDE5E0", VA = "0x1FDE5E0")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x6004356")]
	[Address(RVA = "0x1FDE60C", Offset = "0x1FDE60C", VA = "0x1FDE60C")]
	set
	{
	}
}
Raids monster defense against their module type:
// PlayerArmor
// Token: 0x17000E71 RID: 3697
// (get) Token: 0x06005860 RID: 22624 RVA: 0x00018AE0 File Offset: 0x00016CE0
[Token(Token = "0x17000A1C")]
private float modulesMobResistMultiplier
{
	[Token(Token = "0x600434F")]
	[Address(RVA = "0x1FDDF08", Offset = "0x1FDDF08", VA = "0x1FDDF08")]
	get
	{
		return 0f;
	}
}
Pet calculate speed multiplier by distance:
// Rilisoft.PetEngine
// Token: 0x0600BB47 RID: 47943 RVA: 0x000342A8 File Offset: 0x000324A8
[Token(Token = "0x6008D06")]
[Address(RVA = "0x1BE9B38", Offset = "0x1BE9B38", VA = "0x1BE9B38", Slot = "36")]
public virtual float CalculateSpeedMultyplierByDistance()
{
	return 0f;
}
Pet add current health:
// Rilisoft.PetEngine
// Token: 0x0600BB68 RID: 47976 RVA: 0x00034380 File Offset: 0x00032580
[Token(Token = "0x6008D27")]
[Address(RVA = "0x1BED0A4", Offset = "0x1BED0A4", VA = "0x1BED0A4")]
internal float AddCurrentHealth(float incrementValue)
{
	return 0f;
}
Can show pet:
// Rilisoft.PetEngine
// Token: 0x0600BB3B RID: 47931 RVA: 0x000341E8 File Offset: 0x000323E8
[Token(Token = "0x6008CFA")]
[Address(RVA = "0x1BE9858", Offset = "0x1BE9858", VA = "0x1BE9858")]
internal bool CanShowPet()
{
	return default(bool);
}
Pet in range:
// Rilisoft.PetEngine
// Token: 0x0600BB56 RID: 47958 RVA: 0x00034308 File Offset: 0x00032508
[Token(Token = "0x6008D15")]
[Address(RVA = "0x1BEBA20", Offset = "0x1BEBA20", VA = "0x1BEBA20")]
protected bool InRange(Vector3 first, Vector3 second, float range)
{
	return default(bool);
}
Pet is dead (pet immortality):
// Rilisoft.PetEngine
// Token: 0x0600BB20 RID: 47904 RVA: 0x00034188 File Offset: 0x00032388
[Token(Token = "0x6008CDF")]
[Address(RVA = "0x1BE4874", Offset = "0x1BE4874", VA = "0x1BE4874", Slot = "10")]
public bool IsDead()
{
	return default(bool);
}
Pet attacks everyone (kill teammate?):
// Rilisoft.PetEngine
// Token: 0x0600BB1E RID: 47902 RVA: 0x00034170 File Offset: 0x00032370
[Token(Token = "0x6008CDD")]
[Address(RVA = "0x1BE5D60", Offset = "0x1BE5D60", VA = "0x1BE5D60", Slot = "9")]
public bool IsEnemyTo(Player_move_c player)
{
	return default(bool);
}
Godmode I think:
// PlayerDamageable
// Token: 0x060032BB RID: 12987 RVA: 0x0000F258 File Offset: 0x0000D458
[Token(Token = "0x6002775")]
[Address(RVA = "0x16D0B5C", Offset = "0x16D0B5C", VA = "0x16D0B5C", Slot = "8")]
public bool IsEnemyTo(Player_move_c player)
{
	return default(bool);
}
I think godmode (nope not working):
// PlayerDamageable
// Token: 0x060032BC RID: 12988 RVA: 0x0000F270 File Offset: 0x0000D470
[Token(Token = "0x6002776")]
[Address(RVA = "0x16D0DD0", Offset = "0x16D0DD0", VA = "0x16D0DD0", Slot = "9")]
public bool IsDead()
{
	return default(bool);
}
Is falling (infinite jump?):
// FirstPersonControlSharp
// Token: 0x06007638 RID: 30264 RVA: 0x00021870 File Offset: 0x0001FA70
[Token(Token = "0x6005A23")]
[Address(RVA = "0x19A5F38", Offset = "0x19A5F38", VA = "0x19A5F38")]
private bool IsFalling()
{
	return default(bool);
}
IS DEVELOPER?:
// Defs
// Token: 0x17000B78 RID: 2936
// (get) Token: 0x060045DC RID: 17884 RVA: 0x00014268 File Offset: 0x00012468
[Token(Token = "0x170007EA")]
internal static bool IsDeveloperBuild
{
	[Token(Token = "0x600355D")]
	[Address(RVA = "0x149F130", Offset = "0x149F130", VA = "0x149F130")]
	get
	{
		return default(bool);
	}
}

Can fire taptic:
// FirstPersonControlSharp
// Token: 0x1700135F RID: 4959
// (get) Token: 0x06007651 RID: 30289 RVA: 0x000218E8 File Offset: 0x0001FAE8
[Token(Token = "0x17000E11")]
private static bool canFireTaptic
{
	[Token(Token = "0x6005A3C")]
	[Address(RVA = "0x19B36D8", Offset = "0x19B36D8", VA = "0x19B36D8")]
	get
	{
		return default(bool);
	}
}
Can jump (infinite jump / fly!):
// FirstPersonControlSharp
// Token: 0x1700134C RID: 4940
// (get) Token: 0x06007606 RID: 30214 RVA: 0x000216D8 File Offset: 0x0001F8D8
[Token(Token = "0x17000DFE")]
internal bool CanJump
{
	[Token(Token = "0x60059F1")]
	[Address(RVA = "0x199F5B4", Offset = "0x199F5B4", VA = "0x199F5B4")]
	get
	{
		return default(bool);
	}
}
Fire pressed (auto fire):
// FirstPersonControlSharp
// Token: 0x1700135A RID: 4954
// (get) Token: 0x0600762D RID: 30253 RVA: 0x00021840 File Offset: 0x0001FA40
[Token(Token = "0x17000E0C")]
private bool firePressed
{
	[Token(Token = "0x6005A18")]
	[Address(RVA = "0x19A3B7C", Offset = "0x19A3B7C", VA = "0x19A3B7C")]
	get
	{
		return default(bool);
	}
}
Spectator camera:
// FirstPersonControlSharp
// Token: 0x1700135C RID: 4956
// (get) Token: 0x0600764D RID: 30285 RVA: 0x000218A0 File Offset: 0x0001FAA0
[Token(Token = "0x17000E0E")]
internal bool IsCamSpectator
{
	[Token(Token = "0x6005A38")]
	[Address(RVA = "0x19B34C8", Offset = "0x19B34C8", VA = "0x19B34C8")]
	get
	{
		return default(bool);
	}
}
First person camera:
// FirstPersonControlSharp
// Token: 0x17001347 RID: 4935
// (get) Token: 0x060075FB RID: 30203 RVA: 0x00021678 File Offset: 0x0001F878
[Token(Token = "0x17000DF9")]
internal bool isFirstPersonCamera
{
	[Token(Token = "0x60059E6")]
	[Address(RVA = "0x199ED4C", Offset = "0x199ED4C", VA = "0x199ED4C")]
	get
	{
		return default(bool);
	}
}
Third person camera:
// FirstPersonControlSharp
// Token: 0x17001348 RID: 4936
// (get) Token: 0x060075FC RID: 30204 RVA: 0x00021690 File Offset: 0x0001F890
[Token(Token = "0x17000DFA")]
internal bool isThirdPersonCamera
{
	[Token(Token = "0x60059E7")]
	[Address(RVA = "0x199ED5C", Offset = "0x199ED5C", VA = "0x199ED5C")]
	get
	{
		return default(bool);
	}
}
Is old school (no delay / 3catspam?):
// FirstPersonControlSharp
// Token: 0x17001358 RID: 4952
// (get) Token: 0x06007615 RID: 30229 RVA: 0x000217F8 File Offset: 0x0001F9F8
// (set) Token: 0x06007616 RID: 30230 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000E0A")]
internal bool isOldSchoolBrawl
{
	[Token(Token = "0x6005A00")]
	[Address(RVA = "0x199FDF4", Offset = "0x199FDF4", VA = "0x199FDF4")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6E17AC", Offset = "0x6E17AC")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6005A01")]
	[Address(RVA = "0x199FDFC", Offset = "0x199FDFC", VA = "0x199FDFC")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6E17BC", Offset = "0x6E17BC")]
	private set
	{
	}
}

I think don't do damage:
// PlayerDamageable
// Token: 0x170007A5 RID: 1957
// (get) Token: 0x060032BD RID: 12989 RVA: 0x0000F288 File Offset: 0x0000D488
[Token(Token = "0x1700052A")]
public bool isLivingTarget
{
	[Token(Token = "0x6002777")]
	[Address(RVA = "0x16D0DF4", Offset = "0x16D0DF4", VA = "0x16D0DF4", Slot = "5")]
	get
	{
		return default(bool);
	}
}
Battle Royale First Person:
// FirstPersonControlSharp
// Token: 0x17001359 RID: 4953
// (get) Token: 0x06007617 RID: 30231 RVA: 0x00021810 File Offset: 0x0001FA10
// (set) Token: 0x06007618 RID: 30232 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000E0B")]
internal bool is_BR_FPS_Brawl
{
	[Token(Token = "0x6005A02")]
	[Address(RVA = "0x199F0D4", Offset = "0x199F0D4", VA = "0x199F0D4")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6E17CC", Offset = "0x6E17CC")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6005A03")]
	[Address(RVA = "0x199FE04", Offset = "0x199FE04", VA = "0x199FE04")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6E17DC", Offset = "0x6E17DC")]
	private set
	{
	}
}
Jump? (idk):
// FirstPersonControlSharp
// Token: 0x17001356 RID: 4950
// (get) Token: 0x06007612 RID: 30226 RVA: 0x000217C8 File Offset: 0x0001F9C8
// (set) Token: 0x06007613 RID: 30227 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000E08")]
private bool jump
{
	[Token(Token = "0x60059FD")]
	[Address(RVA = "0x199FA20", Offset = "0x199FA20", VA = "0x199FA20")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60059FE")]
	[Address(RVA = "0x199FAAC", Offset = "0x199FAAC", VA = "0x199FAAC")]
	set
	{
	}
}
On ladder:
// FirstPersonControlSharp
// Token: 0x17001351 RID: 4945
// (get) Token: 0x0600760B RID: 30219 RVA: 0x00021750 File Offset: 0x0001F950
[Token(Token = "0x17000E03")]
internal bool onLadder
{
	[Token(Token = "0x60059F6")]
	[Address(RVA = "0x199F774", Offset = "0x199F774", VA = "0x199F774")]
	get
	{
		return default(bool);
	}
}
Trampoline jump (high jump?)
// FirstPersonControlSharp
// Token: 0x1700135E RID: 4958
// (get) Token: 0x0600764F RID: 30287 RVA: 0x000218D0 File Offset: 0x0001FAD0
// (set) Token: 0x06007650 RID: 30288 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000E10")]
internal bool trampolineJump
{
	[Token(Token = "0x6005A3A")]
	[Address(RVA = "0x19A6128", Offset = "0x19A6128", VA = "0x19A6128")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6005A3B")]
	[Address(RVA = "0x19A6C48", Offset = "0x19A6C48", VA = "0x19A6C48")]
	set
	{
	}
}
Weapon moving effects (idk, maybe attributes like double jump and speed up after kill etc.):
// FirstPersonControlSharp
// Token: 0x1700135D RID: 4957
// (get) Token: 0x0600764E RID: 30286 RVA: 0x000218B8 File Offset: 0x0001FAB8
[Token(Token = "0x17000E0F")]
internal bool WeaponMovingEffectsEnabled
{
	[Token(Token = "0x6005A39")]
	[Address(RVA = "0x19A46CC", Offset = "0x19A46CC", VA = "0x19A46CC")]
	get
	{
		return default(bool);
	}
}
Is pet visible:
// Rilisoft.PetEngine
// Token: 0x0600BB57 RID: 47959 RVA: 0x00034320 File Offset: 0x00032520
[Token(Token = "0x6008D16")]
[Address(RVA = "0x1BEBB60", Offset = "0x1BEBB60", VA = "0x1BEBB60")]
protected bool IsVisible(GameObject target, float maxCheckDistance = 200f)
{
	return default(bool);
}
Pet movement speed acceleration:
// Rilisoft.PetEngine
// Token: 0x17001F30 RID: 7984
// (get) Token: 0x0600BB40 RID: 47936 RVA: 0x00034230 File Offset: 0x00032430
// (set) Token: 0x0600BB41 RID: 47937 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170017D1")]
internal float Acceleration
{
	[Token(Token = "0x6008CFF")]
	[Address(RVA = "0x1BE9918", Offset = "0x1BE9918", VA = "0x1BE9918")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x6008D00")]
	[Address(RVA = "0x1BE9920", Offset = "0x1BE9920", VA = "0x1BE9920")]
	private set
	{
	}
}
Pet damage:
// Rilisoft.PetEngine
// Token: 0x17001F37 RID: 7991
// (get) Token: 0x0600BB58 RID: 47960 RVA: 0x00034338 File Offset: 0x00032538
[Token(Token = "0x170017D8")]
private float Damage
{
	[Token(Token = "0x6008D17")]
	[Address(RVA = "0x1BEC1EC", Offset = "0x1BEC1EC", VA = "0x1BEC1EC")]
	get
	{
		return 0f;
	}
}
Pet health:
// Rilisoft.PetEngine
// Token: 0x17001F13 RID: 7955
// (get) Token: 0x0600BAFF RID: 47871 RVA: 0x00034008 File Offset: 0x00032208
// (set) Token: 0x0600BB00 RID: 47872 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170017B4")]
internal float CurrentHealth
{
	[Token(Token = "0x6008CBE")]
	[Address(RVA = "0x1BE48C0", Offset = "0x1BE48C0", VA = "0x1BE48C0")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x6008CBF")]
	[Address(RVA = "0x1BE48EC", Offset = "0x1BE48EC", VA = "0x1BE48EC")]
	set
	{
	}
}
Pet can move to player:
// Rilisoft.PetEngine
// Token: 0x17001F1E RID: 7966
// (get) Token: 0x0600BB11 RID: 47889 RVA: 0x000340B0 File Offset: 0x000322B0
[Token(Token = "0x170017BF")]
internal virtual bool CanMoveToPlayer
{
	[Token(Token = "0x6008CD0")]
	[Address(RVA = "0x1BE5410", Offset = "0x1BE5410", VA = "0x1BE5410", Slot = "23")]
	get
	{
		return default(bool);
	}
}
Pet in attack state (fast attack?):
// Rilisoft.PetEngine
// Token: 0x17001F38 RID: 7992
// (get) Token: 0x0600BB61 RID: 47969 RVA: 0x00034350 File Offset: 0x00032550
// (set) Token: 0x0600BB62 RID: 47970 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170017D9")]
internal bool InAttackState
{
	[Token(Token = "0x6008D20")]
	[Address(RVA = "0x1BECEE4", Offset = "0x1BECEE4", VA = "0x1BECEE4")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F16D0", Offset = "0x6F16D0")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6008D21")]
	[Address(RVA = "0x1BECEEC", Offset = "0x1BECEEC", VA = "0x1BECEEC")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F16E0", Offset = "0x6F16E0")]
	set
	{
	}
}
Pet godmode:
// Rilisoft.PetEngine
// Token: 0x17001F22 RID: 7970
// (get) Token: 0x0600BB16 RID: 47894 RVA: 0x00034110 File Offset: 0x00032310
// (set) Token: 0x0600BB17 RID: 47895 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170017C3")]
internal bool IsImmortal
{
	[Token(Token = "0x6008CD5")]
	[Address(RVA = "0x1BE5534", Offset = "0x1BE5534", VA = "0x1BE5534")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6008CD6")]
	[Address(RVA = "0x1BE554C", Offset = "0x1BE554C", VA = "0x1BE554C")]
	set
	{
	}
}
Is pet alive:
// Rilisoft.PetEngine
// Token: 0x17001F1B RID: 7963
// (get) Token: 0x0600BB0A RID: 47882 RVA: 0x00034038 File Offset: 0x00032238
[Token(Token = "0x170017BC")]
internal bool IsAlive
{
	[Token(Token = "0x6008CC9")]
	[Address(RVA = "0x1BE4D58", Offset = "0x1BE4D58", VA = "0x1BE4D58")]
	get
	{
		return default(bool);
	}
}
Control other players:
// Player_move_c
// Token: 0x170006DE RID: 1758
// (get) Token: 0x06002E71 RID: 11889 RVA: 0x0000E328 File Offset: 0x0000C528
[Token(Token = "0x170004CF")]
internal bool isMine
{
	[Token(Token = "0x60024BD")]
	[Address(RVA = "0xEEAE18", Offset = "0xEEAE18", VA = "0xEEAE18")]
	get
	{
		return default(bool);
	}
}

Is my pet:
// Rilisoft.PetEngine
// Token: 0x17001F1F RID: 7967
// (get) Token: 0x0600BB12 RID: 47890 RVA: 0x000340C8 File Offset: 0x000322C8
// (set) Token: 0x0600BB13 RID: 47891 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170017C0")]
internal bool IsMine
{
	[Token(Token = "0x6008CD1")]
	[Address(RVA = "0x1BE5418", Offset = "0x1BE5418", VA = "0x1BE5418")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6008CD2")]
	[Address(RVA = "0x1BE5420", Offset = "0x1BE5420", VA = "0x1BE5420")]
	set
	{
	}
}
Pet don't move:
// Rilisoft.PetEngine
// Token: 0x17001F2F RID: 7983
// (get) Token: 0x0600BB3E RID: 47934 RVA: 0x00034218 File Offset: 0x00032418
// (set) Token: 0x0600BB3F RID: 47935 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170017D0")]
internal bool IsStay
{
	[Token(Token = "0x6008CFD")]
	[Address(RVA = "0x1BE9908", Offset = "0x1BE9908", VA = "0x1BE9908")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F1570", Offset = "0x6F1570")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6008CFE")]
	[Address(RVA = "0x1BE9910", Offset = "0x1BE9910", VA = "0x1BE9910")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F1580", Offset = "0x6F1580")]
	private set
	{
	}
}
Pet max health:
// Rilisoft.PetEngine
// Token: 0x17001F25 RID: 7973
// (get) Token: 0x0600BB1C RID: 47900 RVA: 0x00034140 File Offset: 0x00032340
[Token(Token = "0x170017C6")]
public float maxHealth
{
	[Token(Token = "0x6008CDB")]
	[Address(RVA = "0x1BE5D24", Offset = "0x1BE5D24", VA = "0x1BE5D24", Slot = "7")]
	get
	{
		return 0f;
	}
}
Is pet alive 2:
// Rilisoft.PetEngine
// Token: 0x17001F1A RID: 7962
// (get) Token: 0x0600BB08 RID: 47880 RVA: 0x00034020 File Offset: 0x00032220
// (set) Token: 0x0600BB09 RID: 47881 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170017BB")]
internal bool PetAlive
{
	[Token(Token = "0x6008CC7")]
	[Address(RVA = "0x1BE4D48", Offset = "0x1BE4D48", VA = "0x1BE4D48")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F1530", Offset = "0x6F1530")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6008CC8")]
	[Address(RVA = "0x1BE4D50", Offset = "0x1BE4D50", VA = "0x1BE4D50")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F1540", Offset = "0x6F1540")]
	private set
	{
	}
}
Pet respawn time:
// Rilisoft.PetEngine
// Token: 0x17001F20 RID: 7968
// (get) Token: 0x0600BB14 RID: 47892 RVA: 0x000340E0 File Offset: 0x000322E0
[Token(Token = "0x170017C1")]
internal float RespawnTime
{
	[Token(Token = "0x6008CD3")]
	[Address(RVA = "0x1BE5428", Offset = "0x1BE5428", VA = "0x1BE5428")]
	get
	{
		return 0f;
	}
}
Pet respawn progress:
// Rilisoft.PetEngine
// Token: 0x17001F21 RID: 7969
// (get) Token: 0x0600BB15 RID: 47893 RVA: 0x000340F8 File Offset: 0x000322F8
[Token(Token = "0x170017C2")]
internal float RespawnTimeLeft
{
	[Token(Token = "0x6008CD4")]
	[Address(RVA = "0x1BE54E4", Offset = "0x1BE54E4", VA = "0x1BE54E4")]
	get
	{
		return 0f;
	}
}
Pet speed 2:
// Rilisoft.PetEngine
// Token: 0x17001F32 RID: 7986
// (get) Token: 0x0600BB43 RID: 47939 RVA: 0x00034260 File Offset: 0x00032460
// (set) Token: 0x0600BB44 RID: 47940 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170017D3")]
internal float Speed
{
	[Token(Token = "0x6008D02")]
	[Address(RVA = "0x1BE7C74", Offset = "0x1BE7C74", VA = "0x1BE7C74")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x6008D03")]
	[Address(RVA = "0x1BE9948", Offset = "0x1BE9948", VA = "0x1BE9948")]
	private set
	{
	}
}
Pet distance to target (range hack):
// Rilisoft.PetEngine
// Token: 0x17001F34 RID: 7988
// (get) Token: 0x0600BB46 RID: 47942 RVA: 0x00034290 File Offset: 0x00032490
[Token(Token = "0x170017D5")]
internal float ToTargetDistance
{
	[Token(Token = "0x6008D05")]
	[Address(RVA = "0x1BE9A54", Offset = "0x1BE9A54", VA = "0x1BE9A54")]
	get
	{
		return 0f;
	}
}
Pet to owner distance:
// Rilisoft.PetEngine
// Token: 0x17001F33 RID: 7987
// (get) Token: 0x0600BB45 RID: 47941 RVA: 0x00034278 File Offset: 0x00032478
[Token(Token = "0x170017D4")]
internal float ToOwnerDistance
{
	[Token(Token = "0x6008D04")]
	[Address(RVA = "0x1BE9950", Offset = "0x1BE9950", VA = "0x1BE9950")]
	get
	{
		return 0f;
	}
}
Turret max health:
// TurretControllerScene
// Token: 0x170013C6 RID: 5062
// (get) Token: 0x060079A3 RID: 31139 RVA: 0x00022458 File Offset: 0x00020658
[Token(Token = "0x17000E50")]
public float maxHealth
{
	[Token(Token = "0x6005CC0")]
	[Address(RVA = "0x1EC7B98", Offset = "0x1EC7B98", VA = "0x1EC7B98", Slot = "13")]
	get
	{
		return 0f;
	}
}
Turret max health 2:
public float maxHealth
	{
		[Token(Token = "0x6005C78")]
		[Address(RVA = "0x1EC4B50", Offset = "0x1EC4B50", VA = "0x1EC4B50", Slot = "6")]
		get
		{
			return 0f;
		}
	}
Offerwall reward:
// Token: 0x170026FB RID: 9979
		// (get) Token: 0x0600ED75 RID: 60789 RVA: 0x00046230 File Offset: 0x00044430
		// (set) Token: 0x0600ED76 RID: 60790 RVA: 0x00002053 File Offset: 0x00000253
		[Token(Token = "0x17001F5A")]
		internal int Reward
		{
			[Token(Token = "0x600BA2B")]
			[Address(RVA = "0x1858B9C", Offset = "0x1858B9C", VA = "0x1858B9C")]
			[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F7268", Offset = "0x6F7268")]
			get
			{
				return 0;
			}
			[Token(Token = "0x600BA2C")]
			[Address(RVA = "0x1858B74", Offset = "0x1858B74", VA = "0x1858B74")]
			[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F7278", Offset = "0x6F7278")]
			private set
			{
			}
		}
Item upgrade levels up:
// ItemUpgrade
// Token: 0x170010DA RID: 4314
// (get) Token: 0x060067D6 RID: 26582 RVA: 0x0001D670 File Offset: 0x0001B870
[Token(Token = "0x17000C0A")]
internal int Up
{
	[Token(Token = "0x6004E29")]
	[Address(RVA = "0x1C6F174", Offset = "0x1C6F174", VA = "0x1C6F174")]
	get
	{
		return 0;
	}
}
Xp spoofer:
// ExperienceController
// Token: 0x170001EB RID: 491
// (get) Token: 0x06000FE0 RID: 4064 RVA: 0x00005C70 File Offset: 0x00003E70
[Token(Token = "0x1700013E")]
internal static int CurrentExperience
{
	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0x13CDD5C", Offset = "0x13CDD5C", VA = "0x13CDD5C")]
	get
	{
		return 0;
	}
}
Current level spoofer:
// ExperienceController
// Token: 0x170001EC RID: 492
// (get) Token: 0x06000FE1 RID: 4065 RVA: 0x00005C88 File Offset: 0x00003E88
// (set) Token: 0x06000FE2 RID: 4066 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700013F")]
internal static int CurrentLevel
{
	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0x13CB598", Offset = "0x13CB598", VA = "0x13CB598")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0x13D2460", Offset = "0x13D2460", VA = "0x13D2460")]
	private set
	{
	}
}

Turret range:
// TurretControllerScene
// Token: 0x170013C2 RID: 5058
// (get) Token: 0x0600798F RID: 31119 RVA: 0x000223F8 File Offset: 0x000205F8
[Token(Token = "0x17000E4C")]
protected float maxDistanceDamageTarget
{
	[Token(Token = "0x6005CAC")]
	[Address(RVA = "0x1EC694C", Offset = "0x1EC694C", VA = "0x1EC694C")]
	get
	{
		return 0f;
	}
}
Turret max radius for detect (range 2):
// TurretControllerScene
// Token: 0x170013C1 RID: 5057
// (get) Token: 0x0600798E RID: 31118 RVA: 0x000223E0 File Offset: 0x000205E0
[Token(Token = "0x17000E4B")]
protected float maxRadiusScanTarget
{
	[Token(Token = "0x6005CAB")]
	[Address(RVA = "0x1EC687C", Offset = "0x1EC687C", VA = "0x1EC687C")]
	get
	{
		return 0f;
	}
}
Turret fire rate:
// TurretControllerScene
// Token: 0x170013C3 RID: 5059
// (get) Token: 0x06007990 RID: 31120 RVA: 0x00022410 File Offset: 0x00020610
[Token(Token = "0x17000E4D")]
protected float shootCooldown
{
	[Token(Token = "0x6005CAD")]
	[Address(RVA = "0x1EC6A1C", Offset = "0x1EC6A1C", VA = "0x1EC6A1C")]
	get
	{
		return 0f;
	}
}

Clan currency:
// Clan
// Token: 0x170009C8 RID: 2504
// (get) Token: 0x06003F2F RID: 16175 RVA: 0x00012498 File Offset: 0x00010698
// (set) Token: 0x06003F30 RID: 16176 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000687")]
public int Currency
{
	[Token(Token = "0x600306C")]
	[Address(RVA = "0x1CE25A8", Offset = "0x1CE25A8", VA = "0x1CE25A8")]
	get
	{
		return 0;
	}
	[Token(Token = "0x600306D")]
	[Address(RVA = "0x1CE25B8", Offset = "0x1CE25B8", VA = "0x1CE25B8")]
	set
	{
	}
}
Members count (join full clan?):
// Clan
// Token: 0x170009D2 RID: 2514
// (get) Token: 0x06003F3F RID: 16191 RVA: 0x00012510 File Offset: 0x00010710
[Token(Token = "0x17000691")]
public int MembersCount
{
	[Token(Token = "0x600307C")]
	[Address(RVA = "0x1CE29A8", Offset = "0x1CE29A8", VA = "0x1CE29A8")]
	get
	{
		return 0;
	}
}
Max clan officers:
// Clan
// Token: 0x170009CA RID: 2506
// (get) Token: 0x06003F32 RID: 16178 RVA: 0x000124C8 File Offset: 0x000106C8
[Token(Token = "0x17000689")]
public int OfficersCapacity
{
	[Token(Token = "0x600306F")]
	[Address(RVA = "0x1CE25E8", Offset = "0x1CE25E8", VA = "0x1CE25E8")]
	get
	{
		return 0;
	}
}
Current clan officers:
// Clan
// Token: 0x170009D3 RID: 2515
// (get) Token: 0x06003F40 RID: 16192 RVA: 0x00012528 File Offset: 0x00010728
[Token(Token = "0x17000692")]
public int OfficersCount
{
	[Token(Token = "0x600307D")]
	[Address(RVA = "0x1CE2A2C", Offset = "0x1CE2A2C", VA = "0x1CE2A2C")]
	get
	{
		return 0;
	}
}
Valor from clan chest:
// ClanChestData
// Token: 0x170009AB RID: 2475
// (get) Token: 0x06003EB7 RID: 16055 RVA: 0x000122B8 File Offset: 0x000104B8
// (set) Token: 0x06003EB8 RID: 16056 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000670")]
public int ForOpenMedals
{
	[Token(Token = "0x6003010")]
	[Address(RVA = "0x1CEC928", Offset = "0x1CEC928", VA = "0x1CEC928")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003011")]
	[Address(RVA = "0x1CF37E8", Offset = "0x1CF37E8", VA = "0x1CF37E8")]
	set
	{
	}
}
Valor from clan chest 2:
// Token: 0x1700099A RID: 2458
	// (get) Token: 0x06003E70 RID: 15984 RVA: 0x00011EF8 File Offset: 0x000100F8
	[Token(Token = "0x1700065F")]
	public int ForOpenMedals
	{
		[Token(Token = "0x6002FED")]
		[Address(RVA = "0x1CEC90C", Offset = "0x1CEC90C", VA = "0x1CEC90C")]
		get
		{
			return 0;
		}
	}
Ability cooldown:
// BalanceController
// Token: 0x060003F4 RID: 1012 RVA: 0x00003120 File Offset: 0x00001320
[Token(Token = "0x6000338")]
[Address(RVA = "0x1177F9C", Offset = "0x1177F9C", VA = "0x1177F9C")]
internal static float AbilityCooldown(string abilityId)
{
	return 0f;
}
Ability damage:
// BalanceController
// Token: 0x060003F6 RID: 1014 RVA: 0x00003150 File Offset: 0x00001350
[Token(Token = "0x600033A")]
[Address(RVA = "0x117824C", Offset = "0x117824C", VA = "0x117824C")]
internal static float AbilityDamage(string abilityId)
{
	return 0f;
}
Ability duration:
// BalanceController
// Token: 0x060003F3 RID: 1011 RVA: 0x00003108 File Offset: 0x00001308
[Token(Token = "0x6000337")]
[Address(RVA = "0x1177E44", Offset = "0x1177E44", VA = "0x1177E44")]
internal static float AbilityActiveTime(string abilityId)
{
	return 0f;
}
Ability run speed increase:
// BalanceController
// Token: 0x060003F7 RID: 1015 RVA: 0x00003168 File Offset: 0x00001368
[Token(Token = "0x600033B")]
[Address(RVA = "0x11783A4", Offset = "0x11783A4", VA = "0x11783A4")]
internal static float AbilitySpeedMod(string abilityId)
{
	return 0f;
}
Cash back from crafting:
// BalanceController
// Token: 0x06000405 RID: 1029 RVA: 0x00003270 File Offset: 0x00001470
[Token(Token = "0x6000349")]
[Address(RVA = "0x11799A0", Offset = "0x11799A0", VA = "0x11799A0")]
internal static int CashbackForCraft(string _id)
{
	return 0;
}
Gadget cooldown:
// BalanceController
// Token: 0x060003FD RID: 1021 RVA: 0x000031F8 File Offset: 0x000013F8
[Token(Token = "0x6000341")]
[Address(RVA = "0x1178BB4", Offset = "0x1178BB4", VA = "0x1178BB4")]
internal static float CooldownOfGadget(string gadgetId)
{
	return 0f;
}
Gadget damage:
// BalanceController
// Token: 0x060003FB RID: 1019 RVA: 0x000031C8 File Offset: 0x000013C8
[Token(Token = "0x600033F")]
[Address(RVA = "0x1178904", Offset = "0x1178904", VA = "0x1178904")]
internal static float DamageOfGadget(string gadgetId)
{
	return 0f;
}
Parts (free craft?):
// BalanceController
// Token: 0x06000466 RID: 1126 RVA: 0x00003768 File Offset: 0x00001968
[Token(Token = "0x60003AA")]
[Address(RVA = "0x117975C", Offset = "0x117975C", VA = "0x117975C")]
internal static int DetailsAmountForCraft(BalanceController.CraftItemType craftItemType, ItemRarity itemRarity)
{
	return 0;
}
Wear durability:
// BalanceController
// Token: 0x06000431 RID: 1073 RVA: 0x00003588 File Offset: 0x00001788
[Token(Token = "0x6000375")]
[Address(RVA = "0x117D3B0", Offset = "0x117D3B0", VA = "0x117D3B0")]
internal static int DurabilityForWearUP(string tg)
{
	return 0;
}
Gadget durability:
// BalanceController
// Token: 0x060003F1 RID: 1009 RVA: 0x000030F0 File Offset: 0x000012F0
[Token(Token = "0x6000335")]
[Address(RVA = "0x1177A3C", Offset = "0x1177A3C", VA = "0x1177A3C")]
internal static float DurabilityOfGadget(string gadgetId)
{
	return 0f;
}
Gadget duration:
// BalanceController
// Token: 0x060003FC RID: 1020 RVA: 0x000031E0 File Offset: 0x000013E0
[Token(Token = "0x6000340")]
[Address(RVA = "0x1178A5C", Offset = "0x1178A5C", VA = "0x1178A5C")]
internal static float DurationOfGadget(string gadgetId)
{
	return 0f;
}
Battle royale ammo:
// BalanceController
// Token: 0x0600041B RID: 1051 RVA: 0x000033D8 File Offset: 0x000015D8
[Token(Token = "0x600035F")]
[Address(RVA = "0x117B398", Offset = "0x117B398", VA = "0x117B398")]
internal static int GetAmmoForBattleRoyale(int prefabName)
{
	return 0;
}
Ammo in clip:
// BalanceController
// Token: 0x06000420 RID: 1056 RVA: 0x00003438 File Offset: 0x00001638
[Token(Token = "0x6000364")]
[Address(RVA = "0x117B9CC", Offset = "0x117B9CC", VA = "0x117B9CC")]
internal static int GetAmmoInClip(int prefabName)
{
	return 0;
}
Armor points:
// BalanceController
// Token: 0x06000430 RID: 1072 RVA: 0x00003570 File Offset: 0x00001770
[Token(Token = "0x6000374")]
[Address(RVA = "0x117D1B4", Offset = "0x117D1B4", VA = "0x117D1B4")]
internal static int GetArmor(int armorLevel)
{
	return 0;
}
Days played:
// BalanceController
// Token: 0x060004A6 RID: 1190 RVA: 0x00003930 File Offset: 0x00001B30
[Token(Token = "0x60003EA")]
[Address(RVA = "0x11AFEC0", Offset = "0x11AFEC0", VA = "0x11AFEC0")]
private static int GetDaysSinceFirstInstall()
{
	return 0;
}
Weapon dps:
// BalanceController
// Token: 0x06000417 RID: 1047 RVA: 0x00003378 File Offset: 0x00001578
[Token(Token = "0x600035B")]
[Address(RVA = "0x117AB50", Offset = "0x117AB50", VA = "0x117AB50")]
internal static float GetDps(WeaponUpgradeV9 up, bool clampForCurrentTier = false)
{
	return 0f;
}
Weapon dps increase:
// BalanceController
// Token: 0x0600041A RID: 1050 RVA: 0x000033C0 File Offset: 0x000015C0
[Token(Token = "0x600035E")]
[Address(RVA = "0x117B27C", Offset = "0x117B27C", VA = "0x117B27C")]
internal static float GetDpsCoeff(int prefabName)
{
	return 0f;
}
Weapon efficiency:
// BalanceController
// Token: 0x0600042C RID: 1068 RVA: 0x00003558 File Offset: 0x00001758
[Token(Token = "0x6000370")]
[Address(RVA = "0x117C5D4", Offset = "0x117C5D4", VA = "0x117C5D4")]
internal static int GetEfficienceWeapon(WeaponUpgradeV9 up)
{
	return 0;
}
Weapon dps 2:
// BalanceController
// Token: 0x060004B4 RID: 1204 RVA: 0x00003960 File Offset: 0x00001B60
[Token(Token = "0x60003F8")]
[Address(RVA = "0x11B436C", Offset = "0x11B436C", VA = "0x11B436C")]
internal static float GetDpsV7(int index, WeaponUpgradeV7 up, int clampForTier)
{
	return 0f;
}
Fort item cooldown:
// BalanceController
// Token: 0x0600044D RID: 1101 RVA: 0x000036C0 File Offset: 0x000018C0
[Token(Token = "0x6000391")]
[Address(RVA = "0x11809C0", Offset = "0x11809C0", VA = "0x11809C0")]
internal static float GetFortItemCooldown(string tag)
{
	return 0f;
}
Fort item damage:
// BalanceController
// Token: 0x0600044B RID: 1099 RVA: 0x00003690 File Offset: 0x00001890
[Token(Token = "0x600038F")]
[Address(RVA = "0x1180528", Offset = "0x1180528", VA = "0x1180528")]
internal static float GetFortItemDamage(string tag)
{
	return 0f;
}
Fort item health:
// BalanceController
// Token: 0x0600044C RID: 1100 RVA: 0x000036A8 File Offset: 0x000018A8
[Token(Token = "0x6000390")]
[Address(RVA = "0x1180774", Offset = "0x1180774", VA = "0x1180774")]
internal static float GetFortItemHealth(string tag)
{
	return 0f;
}
Fort item aoe:
Effects Controller Class Stuff:
Effects Controller Class(has changes due to new effects)(doublechecked in dump.cs):
一丕三丄丘丁与专丄
XP Per Match:
// RVA: 0x3A308A8 Offset: 0x3A308A8 VA: 0x3A308A8
    internal static int 丁东世七丑丄不丈三() { }
In class:
internal ExperienceController
Gadget Spam Via Get Cooldown Time:
// GadgetG
// Token: 0x17000C35 RID: 3125
// (get) Token: 0x06004A53 RID: 19027 RVA: 0x00015270 File Offset: 0x00013470
[Token(Token = "0x17000872")]
internal virtual float Cooldown
{
	[Token(Token = "0x60038E7")]
	[Address(RVA = "0x14FC290", Offset = "0x14FC290", VA = "0x14FC290", Slot = "5")]
	get
	{
		return 0f;
	}
}
Free bp:
// PGCompany.BattlePass.BattlePass
// Token: 0x17002894 RID: 10388
// (get) Token: 0x0600F615 RID: 62997 RVA: 0x00048A50 File Offset: 0x00046C50
[Token(Token = "0x170020B0")]
internal int PremiumPrice
{
	[Token(Token = "0x600C105")]
	[Address(RVA = "0x240FAC0", Offset = "0x240FAC0", VA = "0x240FAC0")]
	get
	{
		return 0;
	}
}
Free bp levels:
// PGCompany.BattlePass.BattlePass
// Token: 0x17002895 RID: 10389
// (get) Token: 0x0600F616 RID: 62998 RVA: 0x00048A68 File Offset: 0x00046C68
[Token(Token = "0x170020B1")]
internal int LevelPrice
{
	[Token(Token = "0x600C106")]
	[Address(RVA = "0x240FAEC", Offset = "0x240FAEC", VA = "0x240FAEC")]
	get
	{
		return 0;
	}
}

Gadget spam via cooldown progress:
// GadgetG
// Token: 0x17000C37 RID: 3127
// (get) Token: 0x06004A55 RID: 19029 RVA: 0x000152A0 File Offset: 0x000134A0
[Token(Token = "0x17000874")]
internal float CooldownProgress
{
	[Token(Token = "0x60038E9")]
	[Address(RVA = "0x14FC434", Offset = "0x14FC434", VA = "0x14FC434")]
	get
	{
		return 0f;
	}
}
Gadget Duration:
// GadgetG
// Token: 0x17000C36 RID: 3126
// (get) Token: 0x06004A54 RID: 19028 RVA: 0x00015288 File Offset: 0x00013488
[Token(Token = "0x17000873")]
internal virtual float Duration
{
	[Token(Token = "0x60038E8")]
	[Address(RVA = "0x14FC348", Offset = "0x14FC348", VA = "0x14FC348", Slot = "6")]
	get
	{
		return 0f;
	}
}
Gadget duration progress:
// GadgetG
// Token: 0x17000C38 RID: 3128
// (get) Token: 0x06004A56 RID: 19030 RVA: 0x000152B8 File Offset: 0x000134B8
[Token(Token = "0x17000875")]
internal float ExpirationProgress
{
	[Token(Token = "0x60038EA")]
	[Address(RVA = "0x14FC4A8", Offset = "0x14FC4A8", VA = "0x14FC4A8")]
	get
	{
		return 0f;
	}
}
Bot damage:
// RilisoftBot.ShootingBot
// Token: 0x1700157C RID: 5500
// (get) Token: 0x06008595 RID: 34197 RVA: 0x00025CF8 File Offset: 0x00023EF8
// (set) Token: 0x06008596 RID: 34198 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000F94")]
public float p_damagePerHitMin
{
	[Token(Token = "0x60065CF")]
	[Address(RVA = "0x161E590", Offset = "0x161E590", VA = "0x161E590", Slot = "79")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x60065D0")]
	[Address(RVA = "0x161E598", Offset = "0x161E598", VA = "0x161E598", Slot = "80")]
	set
	{
	}
}
Bot projectile explosion / exploding bullet:
// RilisoftBot.ShootingBot
// Token: 0x1700157B RID: 5499
// (get) Token: 0x06008593 RID: 34195 RVA: 0x00025CE0 File Offset: 0x00023EE0
// (set) Token: 0x06008594 RID: 34196 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000F93")]
public bool p_isProjectileExplosion
{
	[Token(Token = "0x60065CD")]
	[Address(RVA = "0x161E580", Offset = "0x161E580", VA = "0x161E580", Slot = "77")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60065CE")]
	[Address(RVA = "0x161E588", Offset = "0x161E588", VA = "0x161E588", Slot = "78")]
	set
	{
	}
}
Bot explosion radius:
// RilisoftBot.ShootingBot
// Token: 0x1700157E RID: 5502
// (get) Token: 0x06008599 RID: 34201 RVA: 0x00025D10 File Offset: 0x00023F10
// (set) Token: 0x0600859A RID: 34202 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000F96")]
public float p_radiusExplosion
{
	[Token(Token = "0x60065D3")]
	[Address(RVA = "0x161E5B0", Offset = "0x161E5B0", VA = "0x161E5B0", Slot = "83")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x60065D4")]
	[Address(RVA = "0x161E5B8", Offset = "0x161E5B8", VA = "0x161E5B8", Slot = "84")]
	set
	{
	}
}
Bot melee weapon is enemy in range:
// RilisoftBot.MeleeBot
// Token: 0x0600C6CD RID: 50893 RVA: 0x00036660 File Offset: 0x00034860
[Token(Token = "0x600C6CD")]
[Address(RVA = "0x4B9E950", Offset = "0x4B9E950", VA = "0x4B9E950", Slot = "67")]
public override bool CheckEnemyInAttackZone(float 丝丙万业丆东丞上丅)
{
	return default(bool);
}
Bot bullet speed:
// RilisoftBot.ShootingBot
// Token: 0x1700157F RID: 5503
// (get) Token: 0x0600859B RID: 34203 RVA: 0x00025D28 File Offset: 0x00023F28
// (set) Token: 0x0600859C RID: 34204 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000F97")]
public float p_speedBullet
{
	[Token(Token = "0x60065D5")]
	[Address(RVA = "0x161E5C0", Offset = "0x161E5C0", VA = "0x161E5C0", Slot = "85")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x60065D6")]
	[Address(RVA = "0x161E5C8", Offset = "0x161E5C8", VA = "0x161E5C8", Slot = "86")]
	set
	{
	}
}
Is gadget effect (denied, invis, etc.) active:
// GadgetG
// Token: 0x17000C34 RID: 3124
// (get) Token: 0x06004A52 RID: 19026 RVA: 0x00015258 File Offset: 0x00013458
[Token(Token = "0x17000871")]
internal bool isEffectActive
{
	[Token(Token = "0x60038E6")]
	[Address(RVA = "0x14FC24C", Offset = "0x14FC24C", VA = "0x14FC24C")]
	get
	{
		return default(bool);
	}
}
Gadget amplification:
// GadgetInfo
// Token: 0x17000C62 RID: 3170
// (get) Token: 0x06004B6B RID: 19307 RVA: 0x000156C0 File Offset: 0x000138C0
[Token(Token = "0x1700089F")]
internal float Amplification
{
	[Token(Token = "0x60039E3")]
	[Address(RVA = "0x14FF6A0", Offset = "0x14FF6A0", VA = "0x14FF6A0")]
	get
	{
		return 0f;
	}
}
Gaget cooldown two:
// GadgetInfo
// Token: 0x17000C64 RID: 3172
// (get) Token: 0x06004B6D RID: 19309 RVA: 0x000156F0 File Offset: 0x000138F0
[Token(Token = "0x170008A1")]
internal float Cooldown
{
	[Token(Token = "0x60039E5")]
	[Address(RVA = "0x14FF74C", Offset = "0x14FF74C", VA = "0x14FF74C")]
	get
	{
		return 0f;
	}
}
Gadget Damage:
// GadgetInfo
// Token: 0x17000C61 RID: 3169
// (get) Token: 0x06004B6A RID: 19306 RVA: 0x000156A8 File Offset: 0x000138A8
[Token(Token = "0x1700089E")]
internal float Damage
{
	[Token(Token = "0x60039E2")]
	[Address(RVA = "0x14FF3D4", Offset = "0x14FF3D4", VA = "0x14FF3D4")]
	get
	{
		return 0f;
	}
}
Mech / turret etc. durability:
// GadgetInfo
// Token: 0x17000C57 RID: 3159
// (get) Token: 0x06004B5F RID: 19295 RVA: 0x000155A0 File Offset: 0x000137A0
[Token(Token = "0x17000894")]
internal float Durability
{
	[Token(Token = "0x60039D7")]
	[Address(RVA = "0x14FEF00", Offset = "0x14FEF00", VA = "0x14FEF00")]
	get
	{
		return 0f;
	}
}
Gadget duration two:
// GadgetInfo
// Token: 0x17000C63 RID: 3171
// (get) Token: 0x06004B6C RID: 19308 RVA: 0x000156D8 File Offset: 0x000138D8
[Token(Token = "0x170008A0")]
internal float Duration
{
	[Token(Token = "0x60039E4")]
	[Address(RVA = "0x14FF6A8", Offset = "0x14FF6A8", VA = "0x14FF6A8")]
	get
	{
		return 0f;
	}
}
Gadget heal:
// GadgetInfo
// Token: 0x17000C55 RID: 3157
// (get) Token: 0x06004B5D RID: 19293 RVA: 0x00015570 File Offset: 0x00013770
[Token(Token = "0x17000892")]
internal float Heal
{
	[Token(Token = "0x60039D5")]
	[Address(RVA = "0x14FEDF0", Offset = "0x14FEDF0", VA = "0x14FEDF0")]
	get
	{
		return 0f;
	}
}
Gadget impulse force:
// GadgetInfo
// Token: 0x17000C68 RID: 3176
// (get) Token: 0x06004B72 RID: 19314 RVA: 0x00015738 File Offset: 0x00013938
[Token(Token = "0x170008A5")]
internal float ImpulseForce
{
	[Token(Token = "0x60039EA")]
	[Address(RVA = "0x14FF808", Offset = "0x14FF808", VA = "0x14FF808")]
	get
	{
		return 0f;
	}
}
Gadget level:
// GadgetInfo
// Token: 0x17000C66 RID: 3174
// (get) Token: 0x06004B70 RID: 19312 RVA: 0x00015720 File Offset: 0x00013920
[Token(Token = "0x170008A3")]
internal int Level
{
	[Token(Token = "0x60039E8")]
	[Address(RVA = "0x14FF5D8", Offset = "0x14FF5D8", VA = "0x14FF5D8")]
	get
	{
		return 0;
	}
}
Module duration:
// GadgetInfo
// Token: 0x17000C59 RID: 3161
// (get) Token: 0x06004B61 RID: 19297 RVA: 0x000155D0 File Offset: 0x000137D0
[Token(Token = "0x17000896")]
internal float ModuleActiveTime
{
	[Token(Token = "0x60039D9")]
	[Address(RVA = "0x14FEF90", Offset = "0x14FEF90", VA = "0x14FEF90")]
	get
	{
		return 0f;
	}
}
Module chance:
// GadgetInfo
// Token: 0x17000C5F RID: 3167
// (get) Token: 0x06004B67 RID: 19303 RVA: 0x00015660 File Offset: 0x00013860
[Token(Token = "0x1700089C")]
internal float ModuleChanceToWork
{
	[Token(Token = "0x60039DF")]
	[Address(RVA = "0x14FF2C0", Offset = "0x14FF2C0", VA = "0x14FF2C0")]
	get
	{
		return 0f;
	}
}
Module cooldown:
// GadgetInfo
// Token: 0x17000C5A RID: 3162
// (get) Token: 0x06004B62 RID: 19298 RVA: 0x000155E8 File Offset: 0x000137E8
[Token(Token = "0x17000897")]
internal float ModuleCooldownTime
{
	[Token(Token = "0x60039DA")]
	[Address(RVA = "0x14FF018", Offset = "0x14FF018", VA = "0x14FF018")]
	get
	{
		return 0f;
	}
}
Module ability damage:
// GadgetInfo
// Token: 0x17000C5C RID: 3164
// (get) Token: 0x06004B64 RID: 19300 RVA: 0x00015618 File Offset: 0x00013818
[Token(Token = "0x17000899")]
internal float ModuleDamage
{
	[Token(Token = "0x60039DC")]
	[Address(RVA = "0x14FF128", Offset = "0x14FF128", VA = "0x14FF128")]
	get
	{
		return 0f;
	}
}
Module run speed:
// GadgetInfo
// Token: 0x17000C5D RID: 3165
// (get) Token: 0x06004B65 RID: 19301 RVA: 0x00015630 File Offset: 0x00013830
[Token(Token = "0x1700089A")]
internal float ModuleSpeedModifire
{
	[Token(Token = "0x60039DD")]
	[Address(RVA = "0x14FF1B0", Offset = "0x14FF1B0", VA = "0x14FF1B0")]
	get
	{
		return 0f;
	}
}
Is gadget bought:
// GadgetsInfo
// Token: 0x06004B15 RID: 19221 RVA: 0x00015408 File Offset: 0x00013608
[Token(Token = "0x60039A9")]
[Address(RVA = "0x1506460", Offset = "0x1506460", VA = "0x1506460")]
internal static bool IsBought(string gadgetId, bool doEditorChecks = true)
{
	return default(bool);
}
Gadget unlocked (i doubt unlock all gadgets):
// ModulesSetGadgetsStorage
// Token: 0x06005545 RID: 21829 RVA: 0x00017F28 File Offset: 0x00016128
[Token(Token = "0x6004118")]
[Address(RVA = "0x1728C00", Offset = "0x1728C00", VA = "0x1728C00")]
internal static bool GadgetUnlocked(string gadgetId)
{
	return default(bool);
}

Ragdoll (enemy launch) increase:
// GadgetInfo
// Token: 0x17000C58 RID: 3160
// (get) Token: 0x06004B60 RID: 19296 RVA: 0x000155B8 File Offset: 0x000137B8
[Token(Token = "0x17000895")]
internal float RagdollImpulse
{
	[Token(Token = "0x60039D8")]
	[Address(RVA = "0x14FEF88", Offset = "0x14FEF88", VA = "0x14FEF88")]
	get
	{
		return 0f;
	}
}
Quest/Task Rewarded?
// Rilisoft.QuestBase
// Token: 0x17001F71 RID: 8049
// (get) Token: 0x0600BCFA RID: 48378 RVA: 0x00034AE8 File Offset: 0x00032CE8
[Token(Token = "0x17001801")]
public bool Rewarded
{
	[Token(Token = "0x6008E1F")]
	[Address(RVA = "0x1D3BF7C", Offset = "0x1D3BF7C", VA = "0x1D3BF7C")]
	get
	{
		return default(bool);
	}
}
Is max upgrade armor:
// Wear
// Token: 0x17001109 RID: 4361
// (get) Token: 0x06006896 RID: 26774 RVA: 0x0001DA60 File Offset: 0x0001BC60
[Token(Token = "0x17000C33")]
internal static bool IsMaxUpgradedArmor
{
	[Token(Token = "0x6004ECA")]
	[Address(RVA = "0x25F6214", Offset = "0x25F6214", VA = "0x25F6214")]
	get
	{
		return default(bool);
	}
}
Is upgrading armor (old upgrade system has upgrade time):
// Wear
// Token: 0x17001104 RID: 4356
// (get) Token: 0x06006875 RID: 26741 RVA: 0x0001D970 File Offset: 0x0001BB70
[Token(Token = "0x17000C2E")]
internal static bool IsUpgradingArmor
{
	[Token(Token = "0x6004EA9")]
	[Address(RVA = "0x25F2E60", Offset = "0x25F2E60", VA = "0x25F2E60")]
	get
	{
		return default(bool);
	}
}
Upgrade item level:
// ItemUpgrade
// Token: 0x170010DB RID: 4315
// (get) Token: 0x060067D7 RID: 26583 RVA: 0x0001D688 File Offset: 0x0001B888
[Token(Token = "0x17000C0B")]
internal int Level
{
	[Token(Token = "0x6004E2A")]
	[Address(RVA = "0x1C6F180", Offset = "0x1C6F180", VA = "0x1C6F180")]
	get
	{
		return 0;
	}
}
Level (XP Spoofer) 1:
// Token: 0x17000CF9 RID: 3321
	// (get) Token: 0x06004E4E RID: 20046 RVA: 0x000164B8 File Offset: 0x000146B8
	// (set) Token: 0x06004E4F RID: 20047 RVA: 0x00002053 File Offset: 0x00000253
	[Token(Token = "0x1700090C")]
	public static int currentLevel
	{
		[Token(Token = "0x6003BF7")]
		[Address(RVA = "0x279BA14", Offset = "0x279BA14", VA = "0x279BA14")]
		get
		{
			return 0;
		}
		[Token(Token = "0x6003BF8")]
		[Address(RVA = "0x279BAA0", Offset = "0x279BAA0", VA = "0x279BAA0")]
		set
		{
		}
	}
Level (XP Spoofer) 2:
// Token: 0x170001EC RID: 492
	// (get) Token: 0x06000FE1 RID: 4065 RVA: 0x00005C88 File Offset: 0x00003E88
	// (set) Token: 0x06000FE2 RID: 4066 RVA: 0x00002053 File Offset: 0x00000253
	[Token(Token = "0x1700013F")]
	internal static int CurrentLevel
	{
		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x13CB598", Offset = "0x13CB598", VA = "0x13CB598")]
		get
		{
			return 0;
		}
		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x13D2460", Offset = "0x13D2460", VA = "0x13D2460")]
		private set
		{
		}
	}
Campaign level:
// Token: 0x17000A80 RID: 2688
	// (get) Token: 0x060044A8 RID: 17576 RVA: 0x00013D10 File Offset: 0x00011F10
	[Token(Token = "0x170006F4")]
	internal static int currentLevel
	{
		[Token(Token = "0x600342F")]
		[Address(RVA = "0x1533640", Offset = "0x1533640", VA = "0x1533640")]
		get
		{
			return 0;
		}
	}
Item price (free shopping) (WORKS, RUN ON LOADING SCREEN! MIN IS 50):
// ItemPrice
// Token: 0x17001240 RID: 4672
// (get) Token: 0x060071C2 RID: 29122 RVA: 0x0001FEC0 File Offset: 0x0001E0C0
[Token(Token = "0x17000D23")]
internal int Price
{
	[Token(Token = "0x6005680")]
	[Address(RVA = "0x1C6A67C", Offset = "0x1C6A67C", VA = "0x1C6A67C")]
	get
	{
		return 0;
	}
}
Item Price (Free shopping) 2 (Doesn't work):
	// ItemPrice
	// Token: 0x060071BF RID: 29119 RVA: 0x00002053 File Offset: 0x00000253
	[Token(Token = "0x600567D")]
	[Address(RVA = "0x1C6A26C", Offset = "0x1C6A26C", VA = "0x1C6A26C")]
	internal ItemPrice(int price, string currency)
	{
	}
Item Price (Free shopping) 3 (BAD):
// Token: 0x060071C0 RID: 29120 RVA: 0x00002053 File Offset: 0x00000253
	[Token(Token = "0x600567E")]
	[Address(RVA = "0x1C6A2D0", Offset = "0x1C6A2D0", VA = "0x1C6A2D0")]
	internal ItemPrice(ItemPrice price)
	{
	}
Add Ammo:
// WeaponManager
// Token: 0x060066C0 RID: 26304 RVA: 0x0001CCC8 File Offset: 0x0001AEC8
[Token(Token = "0x6004DBD")]
[Address(RVA = "0x101E3E4", Offset = "0x101E3E4", VA = "0x101E3E4")]
internal bool AddAmmo(int idx = -1)
{
	return default(bool);
}
Add ammo for all guns:
// WeaponManager
// Token: 0x060066C1 RID: 26305 RVA: 0x0001CCE0 File Offset: 0x0001AEE0
[Token(Token = "0x6004DBE")]
[Address(RVA = "0x101ECE0", Offset = "0x101ECE0", VA = "0x101ECE0")]
internal bool AddAmmoForAllGuns()
{
	return default(bool);
}
Add max ammo for all guns:
// WeaponManager
// Token: 0x060066C2 RID: 26306 RVA: 0x0001CCF8 File Offset: 0x0001AEF8
[Token(Token = "0x6004DBF")]
[Address(RVA = "0x101F020", Offset = "0x101F020", VA = "0x101F020")]
internal bool AddMaxAmmoForAllGuns()
{
	return default(bool);
}
Is crafting item:
// WeaponManager
// Token: 0x060065EC RID: 26092 RVA: 0x0001CB78 File Offset: 0x0001AD78
[Token(Token = "0x6004CE9")]
[Address(RVA = "0x10009E4", Offset = "0x10009E4", VA = "0x10009E4")]
internal static bool IsCraftingItem(string tg)
{
	return default(bool);
}
Buy all guns for rent price:
// WeaponManager
// Token: 0x060066E9 RID: 26345 RVA: 0x0001CD70 File Offset: 0x0001AF70
[Token(Token = "0x6004DE6")]
[Address(RVA = "0x10192DC", Offset = "0x10192DC", VA = "0x10192DC")]
internal bool IsAvailableTryGun(string tryGunTag)
{
	return default(bool);
}
Rent discount:
// Token: 0x060066E1 RID: 26337 RVA: 0x0001CD40 File Offset: 0x0001AF40
	[Token(Token = "0x6004DDE")]
	[Address(RVA = "0x10243EC", Offset = "0x10243EC", VA = "0x10243EC")]
	internal long DiscountForTryGun(string tg)
	{
		return 0L;
	}
Rent discount 2:
// Token: 0x060066E5 RID: 26341 RVA: 0x0001CD58 File Offset: 0x0001AF58
	[Token(Token = "0x6004DE2")]
	[Address(RVA = "0x1024624", Offset = "0x1024624", VA = "0x1024624")]
	internal static int BaseTryGunDiscount()
	{
		return 0;
	}
Free craft (working!):
//WeaponCraftDetailsInfo
// Token: 0x0600A6B1 RID: 42673 RVA: 0x0002D9A8 File Offset: 0x0002BBA8
		[Token(Token = "0x6007E47")]
		[Address(RVA = "0x21CCC60", Offset = "0x21CCC60", VA = "0x21CCC60")]
		internal static int GetDetailsCount(string tag)
		{
			return 0;
		}
Auto aim distance:
// PlayerCoreSettingsStorager
// Token: 0x170019C8 RID: 6600
// (get) Token: 0x0600B2C8 RID: 45768 RVA: 0x0002FEC8 File Offset: 0x0002E0C8
[Token(Token = "0x170019C8")]
public float AutoAimDistance
{
	[Token(Token = "0x600B2C8")]
	[Address(RVA = "0x3B33370", Offset = "0x3B33370", VA = "0x3B33370")]
	get
	{
		return 0f;
	}
}

Can craft:
// Rilisoft.WeaponCraftDetailsInfo
// Token: 0x0600A6AF RID: 42671 RVA: 0x0002D990 File Offset: 0x0002BB90
[Token(Token = "0x6007E45")]
[Address(RVA = "0x21DC8B8", Offset = "0x21DC8B8", VA = "0x21DC8B8")]
internal static bool IsEnoughDetailsForCraftItem(string idOfItem, string idOfItemForBalanceController)
{
	return default(bool);
}
Is locked by level:
// WeaponManager
// Token: 0x060065F5 RID: 26101 RVA: 0x0001CB90 File Offset: 0x0001AD90
[Token(Token = "0x6004CF2")]
[Address(RVA = "0x100759C", Offset = "0x100759C", VA = "0x100759C")]
internal static bool IsLockedByLevel(string weaponTag)
{
	return default(bool);
}
Weapon buyable (unlock all visual):
// WeaponManager
// Token: 0x060066A9 RID: 26281 RVA: 0x0001CC38 File Offset: 0x0001AE38
[Token(Token = "0x6004DA6")]
[Address(RVA = "0x1016B88", Offset = "0x1016B88", VA = "0x1016B88")]
private bool _WeaponAvailable(ItemRecord rec, List<string> weaponsGotInCampaign, FilterMaps filterMap)
{
	return default(bool);
}
Campaign add weapon:
// WeaponManager
// Token: 0x060066BE RID: 26302 RVA: 0x0001CCB0 File Offset: 0x0001AEB0
[Token(Token = "0x6004DBB")]
[Address(RVA = "0x101CB70", Offset = "0x101CB70", VA = "0x101CB70")]
internal bool AddWeapon(ItemRecord weaponRecord, out int score, bool equipIfNeeded, bool fromProviding, int _ammoInClip = -1, int _ammoInBackpack = -1)
{
	return default(bool);
}
Ammo in clip 2:
// ItemRecord
// Token: 0x17001263 RID: 4707
// (get) Token: 0x060071ED RID: 29165 RVA: 0x00020178 File Offset: 0x0001E378
[Token(Token = "0x17000D46")]
internal int AmmoInClip
{
	[Token(Token = "0x60056AB")]
	[Address(RVA = "0x1C6D00C", Offset = "0x1C6D00C", VA = "0x1C6D00C")]
	get
	{
		return 0;
	}
}
Armor percent:
// ItemRecord
// Token: 0x1700197A RID: 6522
// (get) Token: 0x0600AF6F RID: 44911 RVA: 0x0002F4A8 File Offset: 0x0002D6A8
[Token(Token = "0x1700197A")]
internal int ArmorPercent
{
	[Token(Token = "0x600AF6F")]
	[Address(RVA = "0x4651590", Offset = "0x4651590", VA = "0x4651590")]
	get
	{
		return 0;
	}
}
Available ads or can watch ad for coupons:
// ItemRecord
// Token: 0x17001981 RID: 6529
// (get) Token: 0x0600AF77 RID: 44919 RVA: 0x0002F520 File Offset: 0x0002D720
[Token(Token = "0x17001981")]
internal bool AvailableAdsAlmanach
{
	[Token(Token = "0x600AF77")]
	[Address(RVA = "0x46516AC", Offset = "0x46516AC", VA = "0x46516AC")]
	get
	{
		return default(bool);
	}
}
Bot damage:
// ItemRecord
// Token: 0x17001959 RID: 6489
// (get) Token: 0x0600AF4B RID: 44875 RVA: 0x0002F208 File Offset: 0x0002D408
[Token(Token = "0x17001959")]
internal float DPSForBot
{
	[Token(Token = "0x600AF4B")]
	[Address(RVA = "0x465035C", Offset = "0x465035C", VA = "0x465035C")]
	get
	{
		return 0f;
	}
}
Lots of useful module functions:
public static class PlayerModules // TypeDefIndex: 8812
{
	// Fields
	private static int[] appliedResistsBuf; // 0x0

	// Properties
	internal static bool isAvailable { get; }

	// Methods

	// RVA: 0x16E1B68 Offset: 0x16E1B68 VA: 0x16E1B68
	private static float GetModulesDPSForTarget(WeaponSounds weapon, IDamageable target, out int resistType) { }

	// RVA: 0x16E2918 Offset: 0x16E2918 VA: 0x16E2918
	internal static float GetWeaponDamageAndShowResist(WeaponSounds weapon, Transform target) { }

	// RVA: 0x16E3230 Offset: 0x16E3230 VA: 0x16E3230
	internal static float GetGadgetDamageAndShowResist(float gadgetDamage, Dictionary<int, float> gadgetModules, Transform target) { }

	// RVA: 0x16E39DC Offset: 0x16E39DC VA: 0x16E39DC
	private static float GetConvertedModuleModificator(ModuleData.ModuleType moduleType, float modificator) { }

	// RVA: 0x16E3AD4 Offset: 0x16E3AD4 VA: 0x16E3AD4
	internal static void UpdateMineWeaponModulesList() { }

	// RVA: 0x16E3F94 Offset: 0x16E3F94 VA: 0x16E3F94
	internal static void UpdateMineArmorModulesList() { }

	// RVA: 0x16E439C Offset: 0x16E439C VA: 0x16E439C
	internal static void UpdateModulesList(Dictionary<int, float> playerModules, int[] modulesTypes, float[] modulesModifires) { }

	// RVA: 0x16E44E8 Offset: 0x16E44E8 VA: 0x16E44E8
	internal static void GetModulesArrays(Dictionary<int, float> playerModules, out int[] modulesTypes, out float[] modulesModifires) { }

	// RVA: 0x16E2E40 Offset: 0x16E2E40 VA: 0x16E2E40
	internal static void ShowModuleResistParticles(Transform target, int resistType) { }

	// RVA: 0x16E268C Offset: 0x16E268C VA: 0x16E268C
	internal static bool get_isAvailable() { }

	// RVA: 0x16E2900 Offset: 0x16E2900 VA: 0x16E2900
	internal static bool IsDPSModule(int moduleType) { }

	// RVA: 0x16E2914 Offset: 0x16E2914 VA: 0x16E2914
	internal static int MobTypeToModule(MobModuleType mobType) { }

	// RVA: 0x16E47A0 Offset: 0x16E47A0 VA: 0x16E47A0
	internal static void SetModuleSprite(UISprite sprite, ModuleData.ModuleType moduleType) { }

	// RVA: 0x16E4928 Offset: 0x16E4928 VA: 0x16E4928
	private static void .cctor() { }
}

Is elemental module 2:
// RVA: 0x16E2900 Offset: 0x16E2900 VA: 0x16E2900
	internal static bool IsDPSModule(int moduleType) { }
Ammo in clip without effects:
// ItemRecord
// Token: 0x17001262 RID: 4706
// (get) Token: 0x060071EC RID: 29164 RVA: 0x00020160 File Offset: 0x0001E360
[Token(Token = "0x17000D45")]
internal int AmmoInClipWithoutEffects
{
	[Token(Token = "0x60056AA")]
	[Address(RVA = "0x1C6CF84", Offset = "0x1C6CF84", VA = "0x1C6CF84")]
	get
	{
		return 0;
	}
}
Bot target lost:
// RilisoftBot.BotAiController
// Token: 0x060084E2 RID: 34018 RVA: 0x000259B0 File Offset: 0x00023BB0
[Token(Token = "0x6006576")]
[Address(RVA = "0x1612220", Offset = "0x1612220", VA = "0x1612220")]
private bool IsCurrentTargetLost()
{
	return default(bool);
}
Bots don't shoot:
// RilisoftBot.BotAiController
// Token: 0x060084CE RID: 33998 RVA: 0x000258D8 File Offset: 0x00023AD8
[Token(Token = "0x6006562")]
[Address(RVA = "0x160FBAC", Offset = "0x160FBAC", VA = "0x160FBAC")]
internal bool IsTargetAvailabelForShot()
{
	return default(bool);
}
Bot get distance to player:
// RilisoftBot.BotAiController
// Token: 0x060084DF RID: 34015 RVA: 0x00025980 File Offset: 0x00023B80
[Token(Token = "0x6006573")]
[Address(RVA = "0x1613038", Offset = "0x1613038", VA = "0x1613038")]
private float GetDistanceToPlayer(GameObject playerObj)
{
	return 0f;
}
Bot is target available:
// RilisoftBot.BotAiController
// Token: 0x060084E5 RID: 34021 RVA: 0x000259F8 File Offset: 0x00023BF8
[Token(Token = "0x6006579")]
[Address(RVA = "0x1613914", Offset = "0x1613914", VA = "0x1613914")]
private bool IsTargetNotAvailabel(Player_move_c target)
{
	return default(bool);
}
Don't activate bots:
// RilisoftBot.BotAiController
// Token: 0x17001557 RID: 5463
// (get) Token: 0x060084B9 RID: 33977 RVA: 0x00025878 File Offset: 0x00023A78
[Token(Token = "0x17000F89")]
internal bool ActivateBot
{
	[Token(Token = "0x600654D")]
	[Address(RVA = "0x160D41C", Offset = "0x160D41C", VA = "0x160D41C")]
	get
	{
		return default(bool);
	}
}
Bots can't move:
// RilisoftBot.BotAiController
// Token: 0x1700155A RID: 5466
// (get) Token: 0x060084C5 RID: 33989 RVA: 0x000258A8 File Offset: 0x00023AA8
// (set) Token: 0x060084C6 RID: 33990 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000F8C")]
public bool IsCanMove
{
	[Token(Token = "0x6006559")]
	[Address(RVA = "0x160CE08", Offset = "0x160CE08", VA = "0x160CE08")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x600655A")]
	[Address(RVA = "0x160D130", Offset = "0x160D130", VA = "0x160D130")]
	set
	{
	}
}
Armor left percent (visual I think):
// ItemRecord
// Token: 0x17001269 RID: 4713
// (get) Token: 0x060071F3 RID: 29171 RVA: 0x00020208 File Offset: 0x0001E408
[Token(Token = "0x17000D4C")]
internal int ArmorPercent
{
	[Token(Token = "0x60056B1")]
	[Address(RVA = "0x1C6D0D0", Offset = "0x1C6D0D0", VA = "0x1C6D0D0")]
	get
	{
		return 0;
	}
}
Is skin for weapon (skin glitch?):
// Rilisoft.WeaponSkin
// Token: 0x0600C2D2 RID: 49874 RVA: 0x000365B8 File Offset: 0x000347B8
[Token(Token = "0x6009278")]
[Address(RVA = "0x1C8D8EC", Offset = "0x1C8D8EC", VA = "0x1C8D8EC")]
public bool IsForWeapon(string weaponName)
{
	return default(bool);
}

Can buy item (unlock all ) 2 (doesn't work):
// ItemRecord
// Token: 0x17001278 RID: 4728
// (get) Token: 0x0600720B RID: 29195 RVA: 0x000202C8 File Offset: 0x0001E4C8
[Token(Token = "0x17000D5B")]
internal bool CanBuy
{
	[Token(Token = "0x60056C9")]
	[Address(RVA = "0x1C6C57C", Offset = "0x1C6C57C", VA = "0x1C6C57C")]
	get
	{
		return default(bool);
	}
}
Damage:
// ItemRecord
// Token: 0x17001243 RID: 4675
// (get) Token: 0x060071CC RID: 29132 RVA: 0x0001FF20 File Offset: 0x0001E120
[Token(Token = "0x17000D26")]
internal int damageShop
{
	[Token(Token = "0x600568A")]
	[Address(RVA = "0x1C6B450", Offset = "0x1C6B450", VA = "0x1C6B450")]
	get
	{
		return 0;
	}
}
Rapid fire:
// ItemRecord
// Token: 0x1700125D RID: 4701
// (get) Token: 0x060071E6 RID: 29158 RVA: 0x000200E8 File Offset: 0x0001E2E8
[Token(Token = "0x17000D40")]
internal int FireRateShop
{
	[Token(Token = "0x60056A4")]
	[Address(RVA = "0x1C6C888", Offset = "0x1C6C888", VA = "0x1C6C888")]
	get
	{
		return 0;
	}
}
Impulse force:
// ItemRecord
// Token: 0x1700124C RID: 4684
// (get) Token: 0x060071D5 RID: 29141 RVA: 0x0001FFE0 File Offset: 0x0001E1E0
[Token(Token = "0x17000D2F")]
internal float ImpulseForce
{
	[Token(Token = "0x6005693")]
	[Address(RVA = "0x1C6C1F0", Offset = "0x1C6C1F0", VA = "0x1C6C1F0")]
	get
	{
		return 0f;
	}
}
Head shot damage increase:
// ItemRecord
// Token: 0x17001246 RID: 4678
// (get) Token: 0x060071CF RID: 29135 RVA: 0x0001FF68 File Offset: 0x0001E168
[Token(Token = "0x17000D29")]
internal float HeadShotCoef
{
	[Token(Token = "0x600568D")]
	[Address(RVA = "0x1C6B818", Offset = "0x1C6B818", VA = "0x1C6B818")]
	get
	{
		return 0f;
	}
}
Initial ammo:
// ItemRecord
// Token: 0x17001267 RID: 4711
// (get) Token: 0x060071F1 RID: 29169 RVA: 0x000201D8 File Offset: 0x0001E3D8
[Token(Token = "0x17000D4A")]
internal int InitialAmmo
{
	[Token(Token = "0x60056AF")]
	[Address(RVA = "0x1C6CE08", Offset = "0x1C6CE08", VA = "0x1C6CE08")]
	get
	{
		return 0;
	}
}
Is campaign weapon:
// ItemRecord
// Token: 0x1700127B RID: 4731
// (get) Token: 0x06007212 RID: 29202 RVA: 0x00020328 File Offset: 0x0001E528
[Token(Token = "0x17000D5E")]
internal bool IsCampaignWeapon
{
	[Token(Token = "0x60056D0")]
	[Address(RVA = "0x1C6ED3C", Offset = "0x1C6ED3C", VA = "0x1C6ED3C")]
	get
	{
		return default(bool);
	}
}
Is grenade weapon:
// ItemRecord
// Token: 0x1700124E RID: 4686
// (get) Token: 0x060071D7 RID: 29143 RVA: 0x00020010 File Offset: 0x0001E210
[Token(Token = "0x17000D31")]
internal bool IsGrenadeWeapon
{
	[Token(Token = "0x6005695")]
	[Address(RVA = "0x1C6C200", Offset = "0x1C6C200", VA = "0x1C6C200")]
	get
	{
		return default(bool);
	}
}
Is royale weapon (show up in chests? ulti in br?):
// ItemRecord
// Token: 0x17001253 RID: 4691
// (get) Token: 0x060071DC RID: 29148 RVA: 0x00020058 File Offset: 0x0001E258
[Token(Token = "0x17000D36")]
internal bool IsRoyale
{
	[Token(Token = "0x600569A")]
	[Address(RVA = "0x1C6C304", Offset = "0x1C6C304", VA = "0x1C6C304")]
	get
	{
		return default(bool);
	}
}
Use anything in block crash:
// ItemRecord
// Token: 0x17001259 RID: 4697
// (get) Token: 0x060071E2 RID: 29154 RVA: 0x000200A0 File Offset: 0x0001E2A0
[Token(Token = "0x17000D3C")]
internal bool IsSpleef
{
	[Token(Token = "0x60056A0")]
	[Address(RVA = "0x1C6C45C", Offset = "0x1C6C45C", VA = "0x1C6C45C")]
	get
	{
		return default(bool);
	}
}
Level for buy in armory:
// ItemRecord
// Token: 0x17001252 RID: 4690
// (get) Token: 0x060071DB RID: 29147 RVA: 0x00020040 File Offset: 0x0001E240
[Token(Token = "0x17000D35")]
internal int LevelForShop
{
	[Token(Token = "0x6005699")]
	[Address(RVA = "0x1C6C2B8", Offset = "0x1C6C2B8", VA = "0x1C6C2B8")]
	get
	{
		return 0;
	}
}
Level for buy in armory 2:
// ItemRecord
// Token: 0x1700126E RID: 4718
// (get) Token: 0x060071F8 RID: 29176 RVA: 0x00020268 File Offset: 0x0001E468
[Token(Token = "0x17000D51")]
internal virtual int LevelOpen
{
	[Token(Token = "0x60056B6")]
	[Address(RVA = "0x1C6D0F4", Offset = "0x1C6D0F4", VA = "0x1C6D0F4", Slot = "5")]
	get
	{
		return 0;
	}
}
Weapon max ammo:
// ItemRecord
// Token: 0x17001266 RID: 4710
// (get) Token: 0x060071F0 RID: 29168 RVA: 0x000201C0 File Offset: 0x0001E3C0
[Token(Token = "0x17000D49")]
internal int MaxAmmo
{
	[Token(Token = "0x60056AE")]
	[Address(RVA = "0x1C6CCC4", Offset = "0x1C6CCC4", VA = "0x1C6CCC4")]
	get
	{
		return 0;
	}
}
Mobility:
// ItemRecord
// Token: 0x17001245 RID: 4677
// (get) Token: 0x060071CE RID: 29134 RVA: 0x0001FF50 File Offset: 0x0001E150
[Token(Token = "0x17000D28")]
internal int mobilityShop
{
	[Token(Token = "0x600568C")]
	[Address(RVA = "0x1C6B788", Offset = "0x1C6B788", VA = "0x1C6B788")]
	get
	{
		return 0;
	}
}
Ragdoll impulse:
// ItemRecord
// Token: 0x1700124F RID: 4687
// (get) Token: 0x060071D8 RID: 29144 RVA: 0x00020028 File Offset: 0x0001E228
[Token(Token = "0x17000D32")]
internal float RagdollImpulse
{
	[Token(Token = "0x6005696")]
	[Address(RVA = "0x1C6C208", Offset = "0x1C6C208", VA = "0x1C6C208")]
	get
	{
		return 0f;
	}
}
Multiple shots or rocket type probably rocket type:
// ItemRecord
// Token: 0x1700124D RID: 4685
// (get) Token: 0x060071D6 RID: 29142 RVA: 0x0001FFF8 File Offset: 0x0001E1F8
[Token(Token = "0x17000D30")]
internal int RocketNum
{
	[Token(Token = "0x6005694")]
	[Address(RVA = "0x1C6C1F8", Offset = "0x1C6C1F8", VA = "0x1C6C1F8")]
	get
	{
		return 0;
	}
}
Rocket speed:
// ItemRecord
// Token: 0x17001268 RID: 4712
// (get) Token: 0x060071F2 RID: 29170 RVA: 0x000201F0 File Offset: 0x0001E3F0
[Token(Token = "0x17000D4B")]
internal float RocketSpeed
{
	[Token(Token = "0x60056B0")]
	[Address(RVA = "0x1C6D048", Offset = "0x1C6D048", VA = "0x1C6D048")]
	get
	{
		return 0f;
	}
}
Exploding bullets:
// ItemRecord
// Token: 0x1700195F RID: 6495
// (get) Token: 0x0600AF51 RID: 44881 RVA: 0x0002F280 File Offset: 0x0002D480
[Token(Token = "0x1700195F")]
internal bool IsGrenadeWeapon
{
	[Token(Token = "0x600AF51")]
	[Address(RVA = "0x46509D0", Offset = "0x46509D0", VA = "0x46509D0")]
	get
	{
		return default(bool);
	}
}
Speed modifier:
// ItemRecord
// Token: 0x17001261 RID: 4705
// (get) Token: 0x060071EB RID: 29163 RVA: 0x00020148 File Offset: 0x0001E348
[Token(Token = "0x17000D44")]
internal float SpeedModifier
{
	[Token(Token = "0x60056A9")]
	[Address(RVA = "0x1C6CEFC", Offset = "0x1C6CEFC", VA = "0x1C6CEFC")]
	get
	{
		return 0f;
	}
}
Gallery number:
// ItemRecord
// Token: 0x17001277 RID: 4727
// (get) Token: 0x06007209 RID: 29193 RVA: 0x000202B0 File Offset: 0x0001E4B0
// (set) Token: 0x0600720A RID: 29194 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000D5A")]
internal int WeaponNumber
{
	[Token(Token = "0x60056C7")]
	[Address(RVA = "0x1C6D21C", Offset = "0x1C6D21C", VA = "0x1C6D21C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6E068C", Offset = "0x6E068C")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60056C8")]
	[Address(RVA = "0x1C6B448", Offset = "0x1C6B448", VA = "0x1C6B448")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6E069C", Offset = "0x6E069C")]
	private set
	{
	}
}
Shop zoom:
// ItemRecord
// Token: 0x1700125E RID: 4702
// (get) Token: 0x060071E7 RID: 29159 RVA: 0x00020100 File Offset: 0x0001E300
[Token(Token = "0x17000D41")]
internal int ZoomShop
{
	[Token(Token = "0x60056A5")]
	[Address(RVA = "0x1C6C920", Offset = "0x1C6C920", VA = "0x1C6C920")]
	get
	{
		return 0;
	}
}
Try compare battle pass with pixel pass?
Free shopping gems:
// BankExchangeItemData
// Token: 0x17000D3A RID: 3386
// (get) Token: 0x06004FDE RID: 20446 RVA: 0x00016DE8 File Offset: 0x00014FE8
// (set) Token: 0x06004FDF RID: 20447 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000947")]
public int CurrencyCount
{
	[Token(Token = "0x6003D3A")]
	[Address(RVA = "0x197B31C", Offset = "0x197B31C", VA = "0x197B31C")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003D3B")]
	[Address(RVA = "0x197B328", Offset = "0x197B328", VA = "0x197B328")]
	set
	{
	}
}
Gem price:
// BankExchangeItemData
// Token: 0x17000D3B RID: 3387
// (get) Token: 0x06004FE0 RID: 20448 RVA: 0x00016E00 File Offset: 0x00015000
// (set) Token: 0x06004FE1 RID: 20449 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000948")]
public int GemsPrice
{
	[Token(Token = "0x6003D3C")]
	[Address(RVA = "0x197B378", Offset = "0x197B378", VA = "0x197B378")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003D3D")]
	[Address(RVA = "0x197B384", Offset = "0x197B384", VA = "0x197B384")]
	set
	{
	}
}

Dropped items comparer:
// Rilisoft.GameEvent
// Token: 0x0600B009 RID: 45065 RVA: 0x00030018 File Offset: 0x0002E218
[Token(Token = "0x6008508")]
[Address(RVA = "0x201153C", Offset = "0x201153C", VA = "0x201153C")]
internal static int DroppedItemsComparer(DroppedItemData first, DroppedItemData second)
{
	return 0;
}
Get currency priority:
// Rilisoft.GameEvent
// Token: 0x0600B00C RID: 45068 RVA: 0x00030060 File Offset: 0x0002E260
[Token(Token = "0x600850B")]
[Address(RVA = "0x201163C", Offset = "0x201163C", VA = "0x201163C")]
private static int GetCurrencyPriority(string currency)
{
	return 0;
}
Drop Item:
// Rilisoft.GameEvent
// Token: 0x0600AFF8 RID: 45048 RVA: 0x0002FFB8 File Offset: 0x0002E1B8
[Token(Token = "0x60084F7")]
[Address(RVA = "0x200BCEC", Offset = "0x200BCEC", VA = "0x200BCEC")]
public bool DropItem(GameEventChest chest, bool canIncrementSpinsCount, bool isMaxSpinsCount, out GameEventItem item, out GameEventItemContainer fromContainer)
{
	return default(bool);
}
Is Item Crafted:
// CraftSetsManager
// Token: 0x06006168 RID: 24936 RVA: 0x0001B888 File Offset: 0x00019A88
[Token(Token = "0x6004984")]
[Address(RVA = "0x1527CF4", Offset = "0x1527CF4", VA = "0x1527CF4")]
internal static bool IsItemCrafted(string itemId)
{
	return default(bool);
}
Has facebook login reward (infinite gems?):
// FacebookController
// Token: 0x1700121A RID: 4634
// (get) Token: 0x060070F8 RID: 28920 RVA: 0x0001F9B0 File Offset: 0x0001DBB0
// (set) Token: 0x060070F9 RID: 28921 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000D03")]
internal static bool IsLoginRewardaGained
{
	[Token(Token = "0x60055F3")]
	[Address(RVA = "0x13D9980", Offset = "0x13D9980", VA = "0x13D9980")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60055F4")]
	[Address(RVA = "0x13D9A20", Offset = "0x13D9A20", VA = "0x13D9A20")]
	set
	{
	}
}
Is social uzi event active?:
// FacebookController
// Token: 0x1700121D RID: 4637
// (get) Token: 0x06007103 RID: 28931 RVA: 0x0001F9F8 File Offset: 0x0001DBF8
[Token(Token = "0x17000D06")]
internal bool SocialGunEventActive
{
	[Token(Token = "0x60055FE")]
	[Address(RVA = "0x13DA80C", Offset = "0x13DA80C", VA = "0x13DA80C")]
	get
	{
		return default(bool);
	}
}
Add reward from clan chest?:
// ClansController
// Token: 0x06003FDC RID: 16348 RVA: 0x00012858 File Offset: 0x00010A58
[Token(Token = "0x60030FE")]
[Address(RVA = "0x1756564", Offset = "0x1756564", VA = "0x1756564")]
private bool AddRewardFromChest(int chestId, int seasonId, List<ClanItem> rewards)
{
	return default(bool);
}

Has twitter login reward (infinite gems?):
// TwitterController
// Token: 0x170013DB RID: 5083
// (get) Token: 0x06007A28 RID: 31272 RVA: 0x00022698 File Offset: 0x00020898
// (set) Token: 0x06007A29 RID: 31273 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000E57")]
internal static bool IsLoginRewardaGained
{
	[Token(Token = "0x6005D0F")]
	[Address(RVA = "0x221DDC0", Offset = "0x221DDC0", VA = "0x221DDC0")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6005D10")]
	[Address(RVA = "0x221DE60", Offset = "0x221DE60", VA = "0x221DE60")]
	set
	{
	}
}
Is set equipped (all set effects?) (doesn't work):
// CraftSetsManager
// Token: 0x06006166 RID: 24934 RVA: 0x0001B858 File Offset: 0x00019A58
[Token(Token = "0x6004982")]
[Address(RVA = "0x15267DC", Offset = "0x15267DC", VA = "0x15267DC")]
private static bool IsSetEquipped(string setId)
{
	return default(bool);
}
Is charm effect active 1:
// AdvancedEffects
// Token: 0x060000BA RID: 186 RVA: 0x000022F8 File Offset: 0x000004F8
[Token(Token = "0x6000097")]
[Address(RVA = "0x194B510", Offset = "0x194B510", VA = "0x194B510")]
public bool IsEffectActive(AdvancedEffects.AdvancedEffect effect)
{
	return default(bool);
}
Is charm effect active 2:
// AdvancedEffects
// Token: 0x060000B9 RID: 185 RVA: 0x000022E0 File Offset: 0x000004E0
[Token(Token = "0x6000096")]
[Address(RVA = "0x194B3B8", Offset = "0x194B3B8", VA = "0x194B3B8")]
internal bool IsEffectActive(AdvancedEffects.AdvancedEffect effect, Player_move_c sender)
{
	return default(bool);
}
Is lobby item available:
// Rilisoft.LobbyItemsBundle
// Token: 0x17001DE0 RID: 7648
// (get) Token: 0x0600B4C4 RID: 46276 RVA: 0x00031F50 File Offset: 0x00030150
[Token(Token = "0x170016B6")]
public bool Available
{
	[Token(Token = "0x6008849")]
	[Address(RVA = "0x23AA310", Offset = "0x23AA310", VA = "0x23AA310")]
	get
	{
		return default(bool);
	}
}
Lobby item coins reward (coin hack):
// Rilisoft.LobbyItemsBundle
// Token: 0x17001DE3 RID: 7651
// (get) Token: 0x0600B4C7 RID: 46279 RVA: 0x00031F80 File Offset: 0x00030180
[Token(Token = "0x170016B9")]
private int CoinsRewardBase
{
	[Token(Token = "0x600884C")]
	[Address(RVA = "0x23AA6C0", Offset = "0x23AA6C0", VA = "0x23AA6C0")]
	get
	{
		return 0;
	}
}
Lobby item gems reward (gem hack):// Rilisoft.LobbyItemsBundle
// Token: 0x17001DE2 RID: 7650
// (get) Token: 0x0600B4C6 RID: 46278 RVA: 0x00031F68 File Offset: 0x00030168
[Token(Token = "0x170016B8")]
private int GemsRewardBase
{
	[Token(Token = "0x600884B")]
	[Address(RVA = "0x23AA55C", Offset = "0x23AA55C", VA = "0x23AA55C")]
	get
	{
		return 0;
	}
}
Lobby item price:
// Rilisoft.LobbyItemsBundle
// Token: 0x17001DEC RID: 7660
// (get) Token: 0x0600B4D3 RID: 46291 RVA: 0x00031FB0 File Offset: 0x000301B0
// (set) Token: 0x0600B4D4 RID: 46292 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170016C2")]
internal decimal ContentRealPrice
{
	[Token(Token = "0x6008858")]
	[Address(RVA = "0x23AAE84", Offset = "0x23AAE84", VA = "0x23AAE84")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6EFF18", Offset = "0x6EFF18")]
	get
	{
		return default(decimal);
	}
	[Token(Token = "0x6008859")]
	[Address(RVA = "0x23AAE94", Offset = "0x23AAE94", VA = "0x23AAE94")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6EFF28", Offset = "0x6EFF28")]
	private set
	{
	}
}
All values (probably ban):
// Rilisoft.GetIntValueEventArgs
// Token: 0x17001FA9 RID: 8105
// (get) Token: 0x0600BEDE RID: 48862 RVA: 0x00034F68 File Offset: 0x00033168
// (set) Token: 0x0600BEDF RID: 48863 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001839")]
public int Amount
{
	[Token(Token = "0x6008F7E")]
	[Address(RVA = "0x1BD1164", Offset = "0x1BD1164", VA = "0x1BD1164")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F26A8", Offset = "0x6F26A8")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6008F7F")]
	[Address(RVA = "0x1BD116C", Offset = "0x1BD116C", VA = "0x1BD116C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6F26B8", Offset = "0x6F26B8")]
	set
	{
	}
}
Ad reward:
// GoogleMobileAds.Api.Reward
// Token: 0x17001976 RID: 6518
// (get) Token: 0x06009AC8 RID: 39624 RVA: 0x0002A798 File Offset: 0x00028998
// (set) Token: 0x06009AC9 RID: 39625 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001343")]
public double Amount
{
	[Token(Token = "0x60075DB")]
	[Address(RVA = "0x27B1F50", Offset = "0x27B1F50", VA = "0x27B1F50")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6E91FC", Offset = "0x6E91FC")]
	get
	{
		return 0.0;
	}
	[Token(Token = "0x60075DC")]
	[Address(RVA = "0x27A96F8", Offset = "0x27A96F8", VA = "0x27A96F8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6E920C", Offset = "0x6E920C")]
	set
	{
	}
}

Set event can drop:
// Rilisoft.GameEvent
// Token: 0x17001CE2 RID: 7394
// (get) Token: 0x0600AFCE RID: 45006 RVA: 0x0002FF28 File Offset: 0x0002E128
[Token(Token = "0x170015D6")]
public bool CanDrop
{
	[Token(Token = "0x60084CD")]
	[Address(RVA = "0x2006F44", Offset = "0x2006F44", VA = "0x2006F44")]
	get
	{
		return default(bool);
	}
}
Visual accumulated spins:
// Rilisoft.GameEvent
// Token: 0x17001CEA RID: 7402
// (get) Token: 0x0600AFD9 RID: 45017 RVA: 0x0002FF70 File Offset: 0x0002E170
// (set) Token: 0x0600AFDA RID: 45018 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170015DE")]
public int AccumulatedSpins
{
	[Token(Token = "0x60084D8")]
	[Address(RVA = "0x2007350", Offset = "0x2007350", VA = "0x2007350")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60084D9")]
	[Address(RVA = "0x2007384", Offset = "0x2007384", VA = "0x2007384")]
	private set
	{
	}
}
Free super chest:
// Rilisoft.GameEvent
// Token: 0x17001CE4 RID: 7396
// (get) Token: 0x0600AFD0 RID: 45008 RVA: 0x0002FF40 File Offset: 0x0002E140
[Token(Token = "0x170015D8")]
public bool HasSuperChest
{
	[Token(Token = "0x60084CF")]
	[Address(RVA = "0x2007258", Offset = "0x2007258", VA = "0x2007258")]
	get
	{
		return default(bool);
	}
}
Key spins count (I think open multiple at once feature):
// Rilisoft.GameEvent
// Token: 0x17001CD3 RID: 7379
// (get) Token: 0x0600AFBE RID: 44990 RVA: 0x00002050 File Offset: 0x00000250
[Token(Token = "0x170015C7")]
private string KeySpinsCount
{
	[Token(Token = "0x60084BD")]
	[Address(RVA = "0x2006294", Offset = "0x2006294", VA = "0x2006294")]
	get
	{
		return null;
	}
}
Min level for lotto:
// Rilisoft.GameEvent
// Token: 0x17001CDE RID: 7390
// (get) Token: 0x0600AFCA RID: 45002 RVA: 0x0002FEC8 File Offset: 0x0002E0C8
[Token(Token = "0x170015D2")]
public int MinPlayerLevel
{
	[Token(Token = "0x60084C9")]
	[Address(RVA = "0x2006A60", Offset = "0x2006A60", VA = "0x2006A60")]
	get
	{
		return 0;
	}
}
Super chest 2:
// Rilisoft.GameEvent
// Token: 0x17001CE5 RID: 7397
// (get) Token: 0x0600AFD1 RID: 45009 RVA: 0x0002FF58 File Offset: 0x0002E158
[Token(Token = "0x170015D9")]
public bool SuperChestSpinPossible
{
	[Token(Token = "0x60084D0")]
	[Address(RVA = "0x2007270", Offset = "0x2007270", VA = "0x2007270")]
	get
	{
		return default(bool);
	}
}
Can drop chest item (99999 parts?):
// Rilisoft.GameEvent
// Token: 0x17001CE2 RID: 7394
// (get) Token: 0x0600AFCE RID: 45006 RVA: 0x0002FF28 File Offset: 0x0002E128
[Token(Token = "0x170015D6")]
public bool CanDrop
{
	[Token(Token = "0x60084CD")]
	[Address(RVA = "0x2006F44", Offset = "0x2006F44", VA = "0x2006F44")]
	get
	{
		return default(bool);
	}
}
Accumulated spins visual:
// Rilisoft.GameEvent
// Token: 0x17001CEA RID: 7402
// (get) Token: 0x0600AFD9 RID: 45017 RVA: 0x0002FF70 File Offset: 0x0002E170
// (set) Token: 0x0600AFDA RID: 45018 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170015DE")]
public int AccumulatedSpins
{
	[Token(Token = "0x60084D8")]
	[Address(RVA = "0x2007350", Offset = "0x2007350", VA = "0x2007350")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60084D9")]
	[Address(RVA = "0x2007384", Offset = "0x2007384", VA = "0x2007384")]
	private set
	{
	}
}
Free chests:
// Token: 0x020016BB RID: 5819
		[Token(Token = "0x2001D7C")]
		[Serializable]
		public class FreeSpin : ISerializationCallbackReceiver
		{
			// Token: 0x17001CF4 RID: 7412
			// (get) Token: 0x0600B013 RID: 45075 RVA: 0x000300D8 File Offset: 0x0002E2D8
			// (set) Token: 0x0600B014 RID: 45076 RVA: 0x00002053 File Offset: 0x00000253
			[Token(Token = "0x170028DD")]
			public int SpinsCount
			{
				[Token(Token = "0x600F278")]
				[Address(RVA = "0x20F3D40", Offset = "0x20F3D40", VA = "0x20F3D40")]
				get
				{
					return 0;
				}
				[Token(Token = "0x600F279")]
				[Address(RVA = "0x20F3D4C", Offset = "0x20F3D4C", VA = "0x20F3D4C")]
				set
				{
				}
			}
Free super chest 5:
// Rilisoft.GameEventChest
// Token: 0x17001D03 RID: 7427
// (get) Token: 0x0600B051 RID: 45137 RVA: 0x000303C0 File Offset: 0x0002E5C0
[Token(Token = "0x170015F4")]
public int ToOpenSpins
{
	[Token(Token = "0x6008523")]
	[Address(RVA = "0x20F6F30", Offset = "0x20F6F30", VA = "0x20F6F30")]
	get
	{
		return 0;
	}
}
Free super chest 4:
Chest bet available 2:
// Rilisoft.GameEventChest
// Token: 0x17001D0C RID: 7436
// (get) Token: 0x0600B05E RID: 45150 RVA: 0x00030450 File Offset: 0x0002E650
[Token(Token = "0x170015FD")]
public virtual bool Available
{
	[Token(Token = "0x6008530")]
	[Address(RVA = "0x20F73F8", Offset = "0x20F73F8", VA = "0x20F73F8", Slot = "7")]
	get
	{
		return default(bool);
	}
}
Free super chest:
// Rilisoft.GameEventChest
// Token: 0x17001D03 RID: 7427
// (get) Token: 0x0600B051 RID: 45137 RVA: 0x000303C0 File Offset: 0x0002E5C0
[Token(Token = "0x170015F4")]
public int ToOpenSpins
{
	[Token(Token = "0x6008523")]
	[Address(RVA = "0x20F6F30", Offset = "0x20F6F30", VA = "0x20F6F30")]
	get
	{
		return 0;
	}
}
Free super chest 3 (not bannable I don't think but maybe):
// Rilisoft.GameEventProgressBar
// Token: 0x17001C4E RID: 7246
// (get) Token: 0x0600AC5A RID: 44122 RVA: 0x0002F5C8 File Offset: 0x0002D7C8
[Token(Token = "0x17001576")]
private int AccumulatedSpins
{
	[Token(Token = "0x600826F")]
	[Address(RVA = "0x1F5587C", Offset = "0x1F5587C", VA = "0x1F5587C")]
	get
	{
		return 0;
	}
}

Free super chest 2:
// Token: 0x17001C4D RID: 7245
		// (get) Token: 0x0600AC59 RID: 44121 RVA: 0x0002F5B0 File Offset: 0x0002D7B0
		[Token(Token = "0x17001575")]
		private int ToOpenSpins
		{
			[Token(Token = "0x600826E")]
			[Address(RVA = "0x1F55800", Offset = "0x1F55800", VA = "0x1F55800")]
			get
			{
				return 0;
			}
		}
Chest bet available (in last hour of lotto u cant bet):
// Rilisoft.GameEventChest
// Token: 0x17001D0B RID: 7435
// (get) Token: 0x0600B05D RID: 45149 RVA: 0x00030438 File Offset: 0x0002E638
[Token(Token = "0x170015FC")]
public bool AvailableByTime
{
	[Token(Token = "0x600852F")]
	[Address(RVA = "0x20F70BC", Offset = "0x20F70BC", VA = "0x20F70BC")]
	get
	{
		return default(bool);
	}
}
Duels gems bet:
// Rilisoft.GameEventChest
// Token: 0x17001CFF RID: 7423
// (get) Token: 0x0600B04D RID: 45133 RVA: 0x00030390 File Offset: 0x0002E590
[Token(Token = "0x170015F0")]
public int GemsBet
{
	[Token(Token = "0x600851F")]
	[Address(RVA = "0x20F6EA8", Offset = "0x20F6EA8", VA = "0x20F6EA8")]
	get
	{
		return 0;
	}
}
Is duel max bet:
// Rilisoft.GameEventChest
// Token: 0x17001CFB RID: 7419
// (get) Token: 0x0600B049 RID: 45129 RVA: 0x00030360 File Offset: 0x0002E560
[Token(Token = "0x170015EC")]
public bool IsSuperChest
{
	[Token(Token = "0x600851B")]
	[Address(RVA = "0x20F6E6C", Offset = "0x20F6E6C", VA = "0x20F6E6C")]
	get
	{
		return default(bool);
	}
}
Duels time go down to 5:
// Rilisoft.GameEventChest
// Token: 0x17001D0A RID: 7434
// (get) Token: 0x0600B05C RID: 45148 RVA: 0x00030420 File Offset: 0x0002E620
[Token(Token = "0x170015FB")]
public bool IsTimeDepended
{
	[Token(Token = "0x600852E")]
	[Address(RVA = "0x20F6FDC", Offset = "0x20F6FDC", VA = "0x20F6FDC")]
	get
	{
		return default(bool);
	}
}

Is event active:
// Rilisoft.GameEvent
// Token: 0x17001CDF RID: 7391
// (get) Token: 0x0600AFCB RID: 45003 RVA: 0x0002FEE0 File Offset: 0x0002E0E0
[Token(Token = "0x170015D3")]
public bool IsActive
{
	[Token(Token = "0x60084CA")]
	[Address(RVA = "0x2006A84", Offset = "0x2006A84", VA = "0x2006A84")]
	get
	{
		return default(bool);
	}
}
Min level for event:
// Rilisoft.GameEvent
// Token: 0x17001CDE RID: 7390
// (get) Token: 0x0600AFCA RID: 45002 RVA: 0x0002FEC8 File Offset: 0x0002E0C8
[Token(Token = "0x170015D2")]
public int MinPlayerLevel
{
	[Token(Token = "0x60084C9")]
	[Address(RVA = "0x2006A60", Offset = "0x2006A60", VA = "0x2006A60")]
	get
	{
		return 0;
	}
}
Free super chest 2:
// Rilisoft.GameEvent
// Token: 0x17001CE5 RID: 7397
// (get) Token: 0x0600AFD1 RID: 45009 RVA: 0x0002FF58 File Offset: 0x0002E158
[Token(Token = "0x170015D9")]
public bool SuperChestSpinPossible
{
	[Token(Token = "0x60084D0")]
	[Address(RVA = "0x2007270", Offset = "0x2007270", VA = "0x2007270")]
	get
	{
		return default(bool);
	}
}
Can use this chest data:
// Rilisoft.GameEvent
// Token: 0x0600B010 RID: 45072 RVA: 0x00030090 File Offset: 0x0002E290
[Token(Token = "0x600850F")]
[Address(RVA = "0x200B08C", Offset = "0x200B08C", VA = "0x200B08C")]
private static bool CanUseThisChestData(GameEventChestData data)
{
	return default(bool);
}
Container by id comparer and container by item comparer:
// Rilisoft.GameEvent
// Token: 0x0600B007 RID: 45063 RVA: 0x0002FFE8 File Offset: 0x0002E1E8
[Token(Token = "0x6008506")]
[Address(RVA = "0x2011420", Offset = "0x2011420", VA = "0x2011420")]
internal static int ContainersByIdComparer(GameEventItemContainer first, GameEventItemContainer second)
{
	return 0;
}
// Rilisoft.GameEvent
// Token: 0x0600B008 RID: 45064 RVA: 0x00030000 File Offset: 0x0002E200
[Token(Token = "0x6008507")]
[Address(RVA = "0x2011484", Offset = "0x2011484", VA = "0x2011484")]
internal static int ContainersByItemComparer(GameEventItemContainer first, GameEventItemContainer second)
{
	return 0;
}
// Rilisoft.丛丒丗丏丈丆丗万丂
// Token: 0x0600F804 RID: 63492 RVA: 0x00043308 File Offset: 0x00041508
[Token(Token = "0x600F804")]
[Address(RVA = "0x4AA35E4", Offset = "0x4AA35E4", VA = "0x4AA35E4")]
internal static int 丘丌万丐丕丈丏七丁(GameEventItem 丐丅丈丄七丛丗丝丈, GameEventItem 与丁与丐丝万丁不丒)
{
	return 0;
}
Game event class:
丛丒丗丏丈丆丗万丂
Some classes with useful stuff:
internal sealed class AdaptiveAutoAimConfig
internal sealed class ClanLootBoxController : Singleton<ClanLootBoxController>
Clan items parts count in chests or maybe all parts:
// ClanItem
// Token: 0x17000A28 RID: 2600
// (get) Token: 0x060042AC RID: 17068 RVA: 0x000133F8 File Offset: 0x000115F8
// (set) Token: 0x060042AD RID: 17069 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170006C9")]
public int Count
{
	[Token(Token = "0x60032FE")]
	[Address(RVA = "0x173EDC8", Offset = "0x173EDC8", VA = "0x173EDC8")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60032FF")]
	[Address(RVA = "0x173EDD0", Offset = "0x173EDD0", VA = "0x173EDD0")]
	set
	{
	}
}
Get existing part count you have for clan chest (999 parts?):
// ClanChest
// Token: 0x06003E8E RID: 16014 RVA: 0x00012078 File Offset: 0x00010278
[Token(Token = "0x600300B")]
[Address(RVA = "0x1CF21D8", Offset = "0x1CF21D8", VA = "0x1CF21D8")]
public int GetExistsPartsCount(ClanItem item)
{
	return 0;
}
Get guaranteed parts count from clan chest:
// ClanChest
// Token: 0x06003E83 RID: 16003 RVA: 0x00012030 File Offset: 0x00010230
[Token(Token = "0x6003000")]
[Address(RVA = "0x1CEE0A0", Offset = "0x1CEE0A0", VA = "0x1CEE0A0")]
internal int GetGuaranteedPartsCount(ItemRarity rarity)
{
	return 0;
}
Get random parts count from clan chest::
// ClanChest
// Token: 0x06003E84 RID: 16004 RVA: 0x00012048 File Offset: 0x00010248
[Token(Token = "0x6003001")]
[Address(RVA = "0x1CEE320", Offset = "0x1CEE320", VA = "0x1CEE320")]
internal int GetRandomPartsCount(ItemRarity rarity)
{
	return 0;
}

Visual VIP:
// BankItemVipView
// Token: 0x17000D2D RID: 3373
// (get) Token: 0x06004F85 RID: 20357 RVA: 0x00016C80 File Offset: 0x00014E80
// (set) Token: 0x06004F86 RID: 20358 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700093E")]
private int Count
{
	[Token(Token = "0x6003CF5")]
	[Address(RVA = "0x197B3DC", Offset = "0x197B3DC", VA = "0x197B3DC")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D7F44", Offset = "0x6D7F44")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003CF6")]
	[Address(RVA = "0x197B3E4", Offset = "0x197B3E4", VA = "0x197B3E4")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D7F54", Offset = "0x6D7F54")]
	set
	{
	}
}
Weapon offer parts:
// Rilisoft.OfferItem
// Token: 0x17001EA2 RID: 7842
// (get) Token: 0x0600B8D6 RID: 47318 RVA: 0x00033648 File Offset: 0x00031848
// (set) Token: 0x0600B8D7 RID: 47319 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700175B")]
internal int Count
{
	[Token(Token = "0x6008B31")]
	[Address(RVA = "0x1909B48", Offset = "0x1909B48", VA = "0x1909B48")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6008B32")]
	[Address(RVA = "0x1911C8C", Offset = "0x1911C8C", VA = "0x1911C8C")]
	set
	{
	}
}
Free chest for video interval:
// Rilisoft.GameEventChestData
// Token: 0x170022DC RID: 8924
// (get) Token: 0x0600E44F RID: 58447 RVA: 0x0003E850 File Offset: 0x0003CA50
[Token(Token = "0x170022DC")]
[IgnoreMember]
[JsonIgnore]
public TimeSpan? FreeSpinInterval
{
	[Token(Token = "0x600E44F")]
	[Address(RVA = "0x3FA0644", Offset = "0x3FA0644", VA = "0x3FA0644")]
	get
	{
		return default(TimeSpan?);
	}
}

Offer price:
// Rilisoft.OfferItem
// Token: 0x17001EA4 RID: 7844
// (get) Token: 0x0600B8D9 RID: 47321 RVA: 0x00033660 File Offset: 0x00031860
[Token(Token = "0x1700175D")]
internal int PriceInGems
{
	[Token(Token = "0x6008B34")]
	[Address(RVA = "0x1913058", Offset = "0x1913058", VA = "0x1913058")]
	get
	{
		return 0;
	}
}
Base module modificator:
// PGCompany.ItemModule
// Token: 0x170027CE RID: 10190
// (get) Token: 0x0600F178 RID: 61816 RVA: 0x00047190 File Offset: 0x00045390
[Token(Token = "0x17002005")]
internal float BaseModificator
{
	[Token(Token = "0x600BD83")]
	[Address(RVA = "0x2C22DCC", Offset = "0x2C22DCC", VA = "0x2C22DCC")]
	get
	{
		return 0f;
	}
}
Module in shop:
// PGCompany.ItemModule
// Token: 0x170027D1 RID: 10193
// (get) Token: 0x0600F181 RID: 61825 RVA: 0x00047208 File Offset: 0x00045408
// (set) Token: 0x0600F182 RID: 61826 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17002008")]
internal bool ShownInShop
{
	[Token(Token = "0x600BD8C")]
	[Address(RVA = "0x2C20178", Offset = "0x2C20178", VA = "0x2C20178")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x600BD8D")]
	[Address(RVA = "0x2C23984", Offset = "0x2C23984", VA = "0x2C23984")]
	set
	{
	}
}
Module weight:
// PGCompany.ItemModule
// Token: 0x170027CF RID: 10191
// (get) Token: 0x0600F179 RID: 61817 RVA: 0x000471A8 File Offset: 0x000453A8
[Token(Token = "0x17002006")]
internal int Weight
{
	[Token(Token = "0x600BD84")]
	[Address(RVA = "0x2C22DF0", Offset = "0x2C22DF0", VA = "0x2C22DF0")]
	get
	{
		return 0;
	}
}
Module upgrade progress:
// PGCompany.ItemModule
// Token: 0x170027CB RID: 10187
// (get) Token: 0x0600F175 RID: 61813 RVA: 0x00047178 File Offset: 0x00045378
[Token(Token = "0x17002002")]
internal int CountForUp
{
	[Token(Token = "0x600BD80")]
	[Address(RVA = "0x2C22D58", Offset = "0x2C22D58", VA = "0x2C22D58")]
	get
	{
		return 0;
	}
}
Bot Kills:
// PlayerBotInstance
// Token: 0x17000E91 RID: 3729
// (get) Token: 0x060058EE RID: 22766 RVA: 0x00018DF8 File Offset: 0x00016FF8
// (set) Token: 0x060058EF RID: 22767 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A38")]
internal int CountKills
{
	[Token(Token = "0x60043CF")]
	[Address(RVA = "0x16C3778", Offset = "0x16C3778", VA = "0x16C3778")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60043D0")]
	[Address(RVA = "0x16C3784", Offset = "0x16C3784", VA = "0x16C3784")]
	set
	{
	}
}
Visually use left hand:
// GlobalGameController
// Token: 0x17000CF6 RID: 3318
// (get) Token: 0x06004E47 RID: 20039 RVA: 0x00016458 File Offset: 0x00014658
// (set) Token: 0x06004E48 RID: 20040 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000909")]
internal static bool LeftHanded
{
	[Token(Token = "0x6003BF0")]
	[Address(RVA = "0x279B310", Offset = "0x279B310", VA = "0x279B310")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6003BF1")]
	[Address(RVA = "0x279B474", Offset = "0x279B474", VA = "0x279B474")]
	set
	{
	}
}

Armor points:
// GlobalGameController
// Token: 0x17000CF3 RID: 3315
// (get) Token: 0x06004E41 RID: 20033 RVA: 0x00016410 File Offset: 0x00014610
// (set) Token: 0x06004E42 RID: 20034 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000906")]
internal static float armorMyPlayer
{
	[Token(Token = "0x6003BEA")]
	[Address(RVA = "0x279AE4C", Offset = "0x279AE4C", VA = "0x279AE4C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D7B3C", Offset = "0x6D7B3C")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x6003BEB")]
	[Address(RVA = "0x279AED8", Offset = "0x279AED8", VA = "0x279AED8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D7B4C", Offset = "0x6D7B4C")]
	set
	{
	}
}
Emojis enabled:
// GlobalGameController
// Token: 0x17000CF7 RID: 3319
// (get) Token: 0x06004E49 RID: 20041 RVA: 0x00016470 File Offset: 0x00014670
// (set) Token: 0x06004E4A RID: 20042 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700090A")]
internal static bool BattleEmojiEnabled
{
	[Token(Token = "0x6003BF2")]
	[Address(RVA = "0x279B550", Offset = "0x279B550", VA = "0x279B550")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6003BF3")]
	[Address(RVA = "0x279B92C", Offset = "0x279B92C", VA = "0x279B92C")]
	set
	{
	}
}
Kills:
// GlobalGameController
// Token: 0x17000CFE RID: 3326
// (get) Token: 0x06004E5A RID: 20058 RVA: 0x00016548 File Offset: 0x00014748
// (set) Token: 0x06004E5B RID: 20059 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000911")]
internal static int CountKills
{
	[Token(Token = "0x6003C03")]
	[Address(RVA = "0x279C660", Offset = "0x279C660", VA = "0x279C660")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003C04")]
	[Address(RVA = "0x279C6F4", Offset = "0x279C6F4", VA = "0x279C6F4")]
	set
	{
	}
}
Level spoofer:
// GlobalGameController
// Token: 0x17000CF9 RID: 3321
// (get) Token: 0x06004E4E RID: 20046 RVA: 0x000164B8 File Offset: 0x000146B8
// (set) Token: 0x06004E4F RID: 20047 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700090C")]
public static int currentLevel
{
	[Token(Token = "0x6003BF7")]
	[Address(RVA = "0x279BA14", Offset = "0x279BA14", VA = "0x279BA14")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003BF8")]
	[Address(RVA = "0x279BAA0", Offset = "0x279BAA0", VA = "0x279BAA0")]
	set
	{
	}
}
Deaths:
// GlobalGameController
// Token: 0x17000CFF RID: 3327
// (get) Token: 0x06004E5C RID: 20060 RVA: 0x00016560 File Offset: 0x00014760
// (set) Token: 0x06004E5D RID: 20061 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000912")]
internal static int DeathCount
{
	[Token(Token = "0x6003C05")]
	[Address(RVA = "0x279C7BC", Offset = "0x279C7BC", VA = "0x279C7BC")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003C06")]
	[Address(RVA = "0x279C850", Offset = "0x279C850", VA = "0x279C850")]
	set
	{
	}
}
Enemies to kill (I think arena or smth but idk):
// GlobalGameController
// Token: 0x17000CFC RID: 3324
// (get) Token: 0x06004E56 RID: 20054 RVA: 0x00016518 File Offset: 0x00014718
// (set) Token: 0x06004E57 RID: 20055 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700090F")]
internal static int EnemiesToKill
{
	[Token(Token = "0x6003BFF")]
	[Address(RVA = "0x279C39C", Offset = "0x279C39C", VA = "0x279C39C")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003C00")]
	[Address(RVA = "0x279C43C", Offset = "0x279C43C", VA = "0x279C43C")]
	set
	{
	}
}
Auto regen armor (like obb mod?):
// GlobalGameController
// Token: 0x17000CF4 RID: 3316
// (get) Token: 0x06004E43 RID: 20035 RVA: 0x00016428 File Offset: 0x00014628
// (set) Token: 0x06004E44 RID: 20036 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000907")]
internal static bool isArmorBonusPickedUpMyPlayer
{
	[Token(Token = "0x6003BEC")]
	[Address(RVA = "0x279AF74", Offset = "0x279AF74", VA = "0x279AF74")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D7B5C", Offset = "0x6D7B5C")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6003BED")]
	[Address(RVA = "0x279B000", Offset = "0x279B000", VA = "0x279B000")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6D7B6C", Offset = "0x6D7B6C")]
	set
	{
	}
}
Score:
// GlobalGameController
// Token: 0x17000CFD RID: 3325
// (get) Token: 0x06004E58 RID: 20056 RVA: 0x00016530 File Offset: 0x00014730
// (set) Token: 0x06004E59 RID: 20057 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000910")]
internal static int Score
{
	[Token(Token = "0x6003C01")]
	[Address(RVA = "0x279C504", Offset = "0x279C504", VA = "0x279C504")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6003C02")]
	[Address(RVA = "0x279C598", Offset = "0x279C598", VA = "0x279C598")]
	set
	{
	}
}
Arena monsters per wave:
// GlobalGameController
// Token: 0x17000CFB RID: 3323
// (get) Token: 0x06004E54 RID: 20052 RVA: 0x000164E8 File Offset: 0x000146E8
[Token(Token = "0x1700090E")]
internal static int ZombiesInWave
{
	[Token(Token = "0x6003BFD")]
	[Address(RVA = "0x279C12C", Offset = "0x279C12C", VA = "0x279C12C")]
	get
	{
		return 0;
	}
}
Lottery and set 45K:
// Rilisoft.GameEventItemData
// Token: 0x17001C37 RID: 7223
// (get) Token: 0x0600ABA2 RID: 43938 RVA: 0x0002F3B8 File Offset: 0x0002D5B8
[Token(Token = "0x17001565")]
public int Count
{
	[Token(Token = "0x60081E0")]
	[Address(RVA = "0x1F48BF0", Offset = "0x1F48BF0", VA = "0x1F48BF0")]
	get
	{
		return 0;
	}
}
Event (key, coupon, gold) ads chance I think:
// AdsEventData
// Token: 0x17000880 RID: 2176
// (get) Token: 0x06003807 RID: 14343 RVA: 0x00010788 File Offset: 0x0000E988
[Token(Token = "0x170005A1")]
public float DropChance
{
	[Token(Token = "0x6002B43")]
	[Address(RVA = "0x1949AA8", Offset = "0x1949AA8", VA = "0x1949AA8")]
	get
	{
		return 0f;
	}
}
Event ad reward count:
// AdsEventData
// Token: 0x17000884 RID: 2180
// (get) Token: 0x0600380B RID: 14347 RVA: 0x000107B8 File Offset: 0x0000E9B8
[Token(Token = "0x170005A5")]
public int Count
{
	[Token(Token = "0x6002B47")]
	[Address(RVA = "0x1949AC8", Offset = "0x1949AC8", VA = "0x1949AC8")]
	get
	{
		return 0;
	}
}

Task Book Open?
// PGCompany.TaskBookMainUI
// Token: 0x17002825 RID: 10277
// (get) Token: 0x0600F492 RID: 62610 RVA: 0x00048000 File Offset: 0x00046200
[Token(Token = "0x17002048")]
internal static bool GuiActive
{
	[Token(Token = "0x600BFCC")]
	[Address(RVA = "0x1866B28", Offset = "0x1866B28", VA = "0x1866B28")]
	get
	{
		return default(bool);
	}
}
Weapon Skin Available For Purchase:
// WeaponSkinSettings
// Token: 0x17001411 RID: 5137
// (get) Token: 0x06007BDD RID: 31709 RVA: 0x00022C20 File Offset: 0x00020E20
[Token(Token = "0x17000E73")]
internal bool AvailableForPurchase
{
	[Token(Token = "0x6005E38")]
	[Address(RVA = "0x15D4018", Offset = "0x15D4018", VA = "0x15D4018")]
	get
	{
		return default(bool);
	}
}
Bots Bad Aim:
// AIBotSettings
// Token: 0x06006D16 RID: 27926 RVA: 0x0001EAB0 File Offset: 0x0001CCB0
[Token(Token = "0x600529E")]
[Address(RVA = "0x147D87C", Offset = "0x147D87C", VA = "0x147D87C")]
internal float GetMaxRandomValueForAim(int aiLevel)
{
	return 0f;
}
Bots Range:
// AIBotSettings
// Token: 0x06006D18 RID: 27928 RVA: 0x0001EAE0 File Offset: 0x0001CCE0
[Token(Token = "0x60052A0")]
[Address(RVA = "0x147D234", Offset = "0x147D234", VA = "0x147D234")]
internal float GetAttackRange(int aiLevel)
{
	return 0f;
}
Always Crititcal Hits:
// EffectsController
// Token: 0x1700120F RID: 4623
// (get) Token: 0x060070DE RID: 28894 RVA: 0x0001F890 File Offset: 0x0001DA90
[Token(Token = "0x17000CF9")]
internal static bool AlwaysCriticalHit
{
	[Token(Token = "0x60055DC")]
	[Address(RVA = "0x1EECD14", Offset = "0x1EECD14", VA = "0x1EECD14")]
	get
	{
		return default(bool);
	}
}
No Recoil:
// EffectsController
// Token: 0x17001215 RID: 4629
// (get) Token: 0x060070E4 RID: 28900 RVA: 0x0001F920 File Offset: 0x0001DB20
[Token(Token = "0x17000CFF")]
internal static bool DisabledRecoil
{
	[Token(Token = "0x60055E2")]
	[Address(RVA = "0x1EED2B4", Offset = "0x1EED2B4", VA = "0x1EED2B4")]
	get
	{
		return default(bool);
	}
}
Grenade On Reload:
// EffectsController
// Token: 0x17001216 RID: 4630
// (get) Token: 0x060070E5 RID: 28901 RVA: 0x0001F938 File Offset: 0x0001DB38
[Token(Token = "0x17000D00")]
internal static bool DropGrenadeOnReload
{
	[Token(Token = "0x60055E3")]
	[Address(RVA = "0x1EED388", Offset = "0x1EED388", VA = "0x1EED388")]
	get
	{
		return default(bool);
	}
}
Explosion Damage Increase:
// EffectsController
// Token: 0x17001204 RID: 4612
// (get) Token: 0x060070C3 RID: 28867 RVA: 0x0001F608 File Offset: 0x0001D808
[Token(Token = "0x17000CEE")]
internal static float ExplosionDamageIncreaseCoef
{
	[Token(Token = "0x60055C1")]
	[Address(RVA = "0x1EE586C", Offset = "0x1EE586C", VA = "0x1EE586C")]
	get
	{
		return 0f;
	}
}
Explosion Radius Increase:
// EffectsController
// Token: 0x17001202 RID: 4610
// (get) Token: 0x060070C1 RID: 28865 RVA: 0x0001F5D8 File Offset: 0x0001D7D8
[Token(Token = "0x17000CEC")]
internal static float ExplosionImpulseRadiusIncreaseCoef
{
	[Token(Token = "0x60055BF")]
	[Address(RVA = "0x1EE50D8", Offset = "0x1EE50D8", VA = "0x1EE50D8")]
	get
	{
		return 0f;
	}
}
Death Damage:
// EffectsController
// Token: 0x17001214 RID: 4628
// (get) Token: 0x060070E3 RID: 28899 RVA: 0x0001F908 File Offset: 0x0001DB08
[Token(Token = "0x17000CFE")]
internal static bool ExplosionOnDeath
{
	[Token(Token = "0x60055E1")]
	[Address(RVA = "0x1EED1E0", Offset = "0x1EED1E0", VA = "0x1EED1E0")]
	get
	{
		return default(bool);
	}
}
Explode on reload damage:
// EffectsController
// Token: 0x17001203 RID: 4611
// (get) Token: 0x060070C2 RID: 28866 RVA: 0x0001F5F0 File Offset: 0x0001D7F0
[Token(Token = "0x17000CED")]
internal static float GrenadeExplosionDamageIncreaseCoef
{
	[Token(Token = "0x60055C0")]
	[Address(RVA = "0x1EE55D4", Offset = "0x1EE55D4", VA = "0x1EE55D4")]
	get
	{
		return 0f;
	}
}
Explode on reload radius:
// EffectsController
// Token: 0x17001205 RID: 4613
// (get) Token: 0x060070C4 RID: 28868 RVA: 0x0001F620 File Offset: 0x0001D820
[Token(Token = "0x17000CEF")]
internal static float GrenadeExplosionRadiusIncreaseCoef
{
	[Token(Token = "0x60055C2")]
	[Address(RVA = "0x1EE590C", Offset = "0x1EE590C", VA = "0x1EE590C")]
	get
	{
		return 0f;
	}
}
Recover Bullet Back Chance:
// EffectsController
// Token: 0x17001211 RID: 4625
// (get) Token: 0x060070E0 RID: 28896 RVA: 0x0001F8C0 File Offset: 0x0001DAC0
[Token(Token = "0x17000CFB")]
internal static bool HaveChanceToRecoverAmmo
{
	[Token(Token = "0x60055DE")]
	[Address(RVA = "0x1EECF64", Offset = "0x1EECF64", VA = "0x1EECF64")]
	get
	{
		return default(bool);
	}
}
Stunned? (Antistun):
// EffectsController
// Token: 0x170011FE RID: 4606
// (get) Token: 0x060070BB RID: 28859 RVA: 0x0001F578 File Offset: 0x0001D778
// (set) Token: 0x060070BC RID: 28860 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000CE8")]
internal static bool JumpDisabled
{
	[Token(Token = "0x60055B9")]
	[Address(RVA = "0x1EE3F14", Offset = "0x1EE3F14", VA = "0x1EE3F14")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60055BA")]
	[Address(RVA = "0x1EE3FA0", Offset = "0x1EE3FA0", VA = "0x1EE3FA0")]
	set
	{
	}
}
Jump modifier of weapon / item:
// EffectsController
// Token: 0x17001200 RID: 4608
// (get) Token: 0x060070BF RID: 28863 RVA: 0x0001F5A8 File Offset: 0x0001D7A8
[Token(Token = "0x17000CEA")]
internal static float JumpModifier
{
	[Token(Token = "0x60055BD")]
	[Address(RVA = "0x1EE4158", Offset = "0x1EE4158", VA = "0x1EE4158")]
	get
	{
		return 0f;
	}
}
Double Jump:
// EffectsController
// Token: 0x17001201 RID: 4609
// (get) Token: 0x060070C0 RID: 28864 RVA: 0x0001F5C0 File Offset: 0x0001D7C0
[Token(Token = "0x17000CEB")]
internal static bool NinjaJumpEnabled
{
	[Token(Token = "0x60055BE")]
	[Address(RVA = "0x1EE4B04", Offset = "0x1EE4B04", VA = "0x1EE4B04")]
	get
	{
		return default(bool);
	}
}
Piercing Shells:
// EffectsController
// Token: 0x1700120E RID: 4622
// (get) Token: 0x060070DD RID: 28893 RVA: 0x0001F878 File Offset: 0x0001DA78
[Token(Token = "0x17000CF8")]
internal static bool PiercingShells
{
	[Token(Token = "0x60055DB")]
	[Address(RVA = "0x1EECBEC", Offset = "0x1EECBEC", VA = "0x1EECBEC")]
	get
	{
		return default(bool);
	}
}
Lifesteal on crit:
// EffectsController
// Token: 0x17001212 RID: 4626
// (get) Token: 0x060070E1 RID: 28897 RVA: 0x0001F8D8 File Offset: 0x0001DAD8
[Token(Token = "0x17000CFC")]
internal static bool RecoverHPOnCrit
{
	[Token(Token = "0x60055DF")]
	[Address(RVA = "0x1EED038", Offset = "0x1EED038", VA = "0x1EED038")]
	get
	{
		return default(bool);
	}
}
Lifesteal:
// EffectsController
// Token: 0x17001217 RID: 4631
// (get) Token: 0x060070E6 RID: 28902 RVA: 0x0001F950 File Offset: 0x0001DB50
[Token(Token = "0x17000D01")]
internal static bool RecoverHPOnDamage
{
	[Token(Token = "0x60055E4")]
	[Address(RVA = "0x1EED45C", Offset = "0x1EED45C", VA = "0x1EED45C")]
	get
	{
		return default(bool);
	}
}
Armor Regen Time:
// EffectsController
// Token: 0x17001209 RID: 4617
// (get) Token: 0x060070C8 RID: 28872 RVA: 0x0001F680 File Offset: 0x0001D880
[Token(Token = "0x17000CF3")]
internal static float RegeneratingArmorTime
{
	[Token(Token = "0x60055C6")]
	[Address(RVA = "0x1EE6B0C", Offset = "0x1EE6B0C", VA = "0x1EE6B0C")]
	get
	{
		return 0f;
	}
}
Health Regen Time:
// EffectsController
// Token: 0x17001208 RID: 4616
// (get) Token: 0x060070C7 RID: 28871 RVA: 0x0001F668 File Offset: 0x0001D868
[Token(Token = "0x17000CF2")]
internal static float RegeneratingHealthTime
{
	[Token(Token = "0x60055C5")]
	[Address(RVA = "0x1EE65A8", Offset = "0x1EE65A8", VA = "0x1EE65A8")]
	get
	{
		return 0f;
	}
}
Decreased Dispersion:
// EffectsController
// Token: 0x1700120D RID: 4621
// (get) Token: 0x060070DC RID: 28892 RVA: 0x0001F860 File Offset: 0x0001DA60
[Token(Token = "0x17000CF7")]
internal static bool ScatterReduction
{
	[Token(Token = "0x60055DA")]
	[Address(RVA = "0x1EECAC4", Offset = "0x1EECAC4", VA = "0x1EECAC4")]
	get
	{
		return default(bool);
	}
}
Self Explosion Damage Decrease:
// EffectsController
// Token: 0x17001206 RID: 4614
// (get) Token: 0x060070C5 RID: 28869 RVA: 0x0001F638 File Offset: 0x0001D838
[Token(Token = "0x17000CF0")]
internal static float SelfExplosionDamageDecreaseCoef
{
	[Token(Token = "0x60055C3")]
	[Address(RVA = "0x1EE5BAC", Offset = "0x1EE5BAC", VA = "0x1EE5BAC")]
	get
	{
		return 0f;
	}
}
Shoot Without Ammo:
// EffectsController
// Token: 0x1700120C RID: 4620
// (get) Token: 0x060070DB RID: 28891 RVA: 0x0001F848 File Offset: 0x0001DA48
[Token(Token = "0x17000CF6")]
internal static bool ShootingWithoutBullets
{
	[Token(Token = "0x60055D9")]
	[Address(RVA = "0x1EEC99C", Offset = "0x1EEC99C", VA = "0x1EEC99C")]
	get
	{
		return default(bool);
	}
}
Slow enemy or maybe yourself but I think enemy effect:
// EffectsController
// Token: 0x170011FF RID: 4607
// (get) Token: 0x060070BD RID: 28861 RVA: 0x0001F590 File Offset: 0x0001D790
// (set) Token: 0x060070BE RID: 28862 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000CE9")]
internal static float SlowdownCoeff
{
	[Token(Token = "0x60055BB")]
	[Address(RVA = "0x1EE4030", Offset = "0x1EE4030", VA = "0x1EE4030")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x60055BC")]
	[Address(RVA = "0x1EE40BC", Offset = "0x1EE40BC", VA = "0x1EE40BC")]
	set
	{
	}
}
Speed After Kill:
// EffectsController
// Token: 0x17001213 RID: 4627
// (get) Token: 0x060070E2 RID: 28898 RVA: 0x0001F8F0 File Offset: 0x0001DAF0
[Token(Token = "0x17000CFD")]
internal static bool SprintAfterKill
{
	[Token(Token = "0x60055E0")]
	[Address(RVA = "0x1EED10C", Offset = "0x1EED10C", VA = "0x1EED10C")]
	get
	{
		return default(bool);
	}
}
Stealth (Silent):
// EffectsController
// Token: 0x17001207 RID: 4615
// (get) Token: 0x060070C6 RID: 28870 RVA: 0x0001F650 File Offset: 0x0001D850
[Token(Token = "0x17000CF1")]
internal static bool WeAreStealth
{
	[Token(Token = "0x60055C4")]
	[Address(RVA = "0x1EE61D0", Offset = "0x1EE61D0", VA = "0x1EE61D0")]
	get
	{
		return default(bool);
	}
}
XRay:
// EffectsController
// Token: 0x17001210 RID: 4624
// (get) Token: 0x060070DF RID: 28895 RVA: 0x0001F8A8 File Offset: 0x0001DAA8
[Token(Token = "0x17000CFA")]
internal static bool XRayVisionFromModule
{
	[Token(Token = "0x60055DD")]
	[Address(RVA = "0x1EECE3C", Offset = "0x1EECE3C", VA = "0x1EECE3C")]
	get
	{
		return default(bool);
	}
}
Effects Controller Class(has changes due to new effects)(doublechecked in dump.cs):
一丕三丄丘丁与专丄
Offsets to patch in this class (grab offsets with scratch and ignore voids):
	// RVA: 0x42270A0 Offset: 0x42270A0 VA: 0x42270A0
	private static void 一一且世丛业业上一(Dictionary<string, float> 丌丘丑专丁丁丈丁丛) { }

	// RVA: 0x4227174 Offset: 0x4227174 VA: 0x4227174
	private static bool 万业丝七上丕万且丒() { }

	// RVA: 0x42272D0 Offset: 0x42272D0 VA: 0x42272D0
	internal static string 丛丏丄上丁丆丛世世() { }

	// RVA: 0x42273C4 Offset: 0x42273C4 VA: 0x42273C4
	internal static string 万丆丑不丌世与丗丂() { }

	// RVA: 0x42274B8 Offset: 0x42274B8 VA: 0x42274B8
	internal static string 丘丌丝丐丁丕丝七与() { }

	// RVA: 0x42275AC Offset: 0x42275AC VA: 0x42275AC
	internal static string 丛东丑专丏专丛与东() { }

	// RVA: 0x42276A0 Offset: 0x42276A0 VA: 0x42276A0
	internal static string 丑世丑三东丞丁万且() { }

	// RVA: 0x4227740 Offset: 0x4227740 VA: 0x4227740
	internal static bool 业与丐丌丌丘丘上一() { }

	// RVA: 0x42277A8 Offset: 0x42277A8 VA: 0x42277A8
	internal static void 业业丕丘世丆不丌一(bool 丌丘丑专丁丁丈丁丛) { }

	// RVA: 0x4227818 Offset: 0x4227818 VA: 0x4227818
	internal static float 丝三专丁丑丑专丘丐() { }

	// RVA: 0x4227880 Offset: 0x4227880 VA: 0x4227880
	internal static void 丝下丐业丕丛丒东丅(float 丌丘丑专丁丁丈丁丛) { }

	// RVA: 0x42279A0 Offset: 0x42279A0 VA: 0x42279A0
	internal static float 不丞丟丁丐丄与丏一() { }

	// RVA: 0x4228570 Offset: 0x4228570 VA: 0x4228570
	internal static bool 不丒丌不丑丛丟丑东() { }

	// RVA: 0x42285F0 Offset: 0x42285F0 VA: 0x42285F0
	internal static bool 丏且七一丂与丈丁丑() { }

	// RVA: 0x4228D94 Offset: 0x4228D94 VA: 0x4228D94
	internal static float 丏一丄丅一丘万上丒() { }

	// RVA: 0x4229148 Offset: 0x4229148 VA: 0x4229148
	internal static float 上东上丄丈丁丒丗丒() { }

	// RVA: 0x422933C Offset: 0x422933C VA: 0x422933C
	internal static float 专丄三丌丐丟丘三不() { }

	// RVA: 0x42293C4 Offset: 0x42293C4 VA: 0x42293C4
	internal static float 丆丟丛不丁丘丛且七() { }

	// RVA: 0x42295C4 Offset: 0x42295C4 VA: 0x42295C4
	internal static float 丐东一不丐七东丅东() { }

	// RVA: 0x4229A78 Offset: 0x4229A78 VA: 0x4229A78
	internal static bool 丟业丞不三业业上丗() { }

	// RVA: 0x4229D1C Offset: 0x4229D1C VA: 0x4229D1C
	internal static float 丆且与丐丛下丂丆丅() { }

	// RVA: 0x422A424 Offset: 0x422A424 VA: 0x422A424
	internal static float 丗丏丙下丁丗上一丏() { }

	// RVA: 0x422AE94 Offset: 0x422AE94 VA: 0x422AE94
	internal static bool 万丒不丅丂丈丕丝上() { }

	// RVA: 0x422AEFC Offset: 0x422AEFC VA: 0x422AEFC
	internal static bool 丌万专且丁三丆东丄() { }

	// RVA: 0x422AF64 Offset: 0x422AF64 VA: 0x422AF64
	internal static float 丁丝丐丛丙丕丏丝丞(int 丑丞与丒与下专丂丏) { }

	// RVA: 0x422B408 Offset: 0x422B408 VA: 0x422B408
	internal static float 丁丅与上丆丝与下丏(int 七丞丏东丘丌丝三丘) { }

	// RVA: 0x422BC3C Offset: 0x422BC3C VA: 0x422BC3C
	internal static float 丆丌七丛丛丕丞丌与(int 丑丞与丒与下专丂丏) { }

	// RVA: 0x422BD20 Offset: 0x422BD20 VA: 0x422BD20
	internal static float 丞丐东东丅丒丕且不() { }

	// RVA: 0x422BDB4 Offset: 0x422BDB4 VA: 0x422BDB4
	internal static float 丒一丆且七七丘丏万() { }

	// RVA: 0x422BE48 Offset: 0x422BE48 VA: 0x422BE48
	internal static float 下丌万丐不下东丛丞() { }

	// RVA: 0x422BEDC Offset: 0x422BEDC VA: 0x422BEDC
	internal static float 丙一丙七丁丛丁一下(int 丕丌丈三丐东丗且丛) { }

	// RVA: 0x422DA08 Offset: 0x422DA08 VA: 0x422DA08
	internal static float 丏丝丑专丝丂丌丒业(int 丕丌丈三丐东丗且丛) { }

	// RVA: 0x422DAA0 Offset: 0x422DAA0 VA: 0x422DAA0
	internal static float 丛不世专丏丕丄万丟(string 丑丘三业丝丙丘丝丝) { }

	// RVA: 0x422DF14 Offset: 0x422DF14 VA: 0x422DF14
	internal static float 丕丆丏丙丞丕上丑丅(WeaponSounds 丏七丘丑丆丑丙七七, string 丐不世丘万丌且丐丈, string 下丘丞丆上世三七不, string 丌丝丏业丗丒丞专丅) { }

	// RVA: 0x422E594 Offset: 0x422E594 VA: 0x422E594
	internal static float 不万丏丟丞七丝三丗(int 丏专丅与一业业下专) { }

	// RVA: 0x422ED74 Offset: 0x422ED74 VA: 0x422ED74
	internal static float 丛丕丐丝万上与且丐(int 丐丗丛世丙丞丆东丅, string 丐不世丘万丌且丐丈, string 下丘丞丆上世三七不, string 丌丝丏业丗丒丞专丅) { }

	// RVA: 0x422F204 Offset: 0x422F204 VA: 0x422F204
	internal static float 业丙丆丈与三丛上万() { }

	// RVA: 0x422F274 Offset: 0x422F274 VA: 0x422F274
	internal static float 丞丕丅丝东丛丅且上() { }

	// RVA: 0x422F2E4 Offset: 0x422F2E4 VA: 0x422F2E4
	internal static float 业丈丆与一丈丄一三() { }

	// RVA: 0x422F354 Offset: 0x422F354 VA: 0x422F354
	internal static float 丗丟丝七丕丟万丕丏() { }

	// RVA: 0x422F6BC Offset: 0x422F6BC VA: 0x422F6BC
	internal static float 丘丂下丂七丕丟丘且() { }

	// RVA: 0x422F7B0 Offset: 0x422F7B0 VA: 0x422F7B0
	internal static bool 丒专丙丛丌世丙丑丙() { }

	// RVA: 0x422F898 Offset: 0x422F898 VA: 0x422F898
	internal static bool 业丗丏上丌一东丒丒() { }

	// RVA: 0x422F980 Offset: 0x422F980 VA: 0x422F980
	internal static bool 丕一丈丑不业东东丂() { }

	// RVA: 0x422FA68 Offset: 0x422FA68 VA: 0x422FA68
	internal static bool 丑丁丙丆丝丘丁上且() { }

	// RVA: 0x422FB50 Offset: 0x422FB50 VA: 0x422FB50
	internal static bool 万丒与一一万不业与() { }

	// RVA: 0x422FC38 Offset: 0x422FC38 VA: 0x422FC38
	internal static bool 不不万与不丘丐七丐() { }

	// RVA: 0x422FCE0 Offset: 0x422FCE0 VA: 0x422FCE0
	internal static bool 不丞且丌下业丒丒丞() { }

	// RVA: 0x422FD88 Offset: 0x422FD88 VA: 0x422FD88
	internal static bool 丟与丒丞丌且丂丄万() { }

	// RVA: 0x422FE30 Offset: 0x422FE30 VA: 0x422FE30
	internal static bool 丈丂丕丅丆且丑下下() { }

	// RVA: 0x422FED8 Offset: 0x422FED8 VA: 0x422FED8
	internal static bool 丐丞丒丒且丌三丈丈() { }

	// RVA: 0x422FF80 Offset: 0x422FF80 VA: 0x422FF80
	internal static bool 丂丛一三丑丘丘丗丑() { }

	// RVA: 0x4230028 Offset: 0x4230028 VA: 0x4230028
	internal static bool 丕丐七丁下东业丟丂() { }

	// RVA: 0x42284A8 Offset: 0x42284A8 VA: 0x42284A8
	private static bool 且丝且丕丗丑且且丒() { }
Max Small Clan Chests Openable At Once:
Class: ModuleChestsController
// RVA: 0x17229CC Offset: 0x17229CC VA: 0x17229CC
	internal static int get_MaxChestsCount() { }
Reach Max Chest Count:
// ModuleChestsController
// Token: 0x17000DD7 RID: 3543
// (get) Token: 0x060054EA RID: 21738 RVA: 0x00017DA8 File Offset: 0x00015FA8
[Token(Token = "0x170009BB")]
internal static bool ReachMaxChestCount
{
	[Token(Token = "0x60040D5")]
	[Address(RVA = "0x1722A80", Offset = "0x1722A80", VA = "0x1722A80")]
	get
	{
		return default(bool);
	}
}
Is league skin available:
Obfuscated:
// RVA: 0x18F5E24 Offset: 0x18F5E24 VA: 0x18F5E24
	internal static bool IsLeagueSkinAvailableByLeague(string skinId) { }
Maybe Partial / Visual Clan Leader:
Obfuscated:
// ClansController
// Token: 0x0600400A RID: 16394 RVA: 0x00012948 File Offset: 0x00010B48
[Token(Token = "0x600312C")]
[Address(RVA = "0x175AF08", Offset = "0x175AF08", VA = "0x175AF08")]
internal bool IsClanLeader(string playerId)
{
	return default(bool);
}
Is Clan Full:
Obfuscated:
// ClansController
// Token: 0x0600400B RID: 16395 RVA: 0x00012960 File Offset: 0x00010B60
[Token(Token = "0x600312D")]
[Address(RVA = "0x175DE48", Offset = "0x175DE48", VA = "0x175DE48")]
internal bool IsFullClan()
{
	return default(bool);
}
Shoot Through Shield:
Obfuscated:
// WeaponChargeShield
// Token: 0x06006820 RID: 26656 RVA: 0x0001D7F0 File Offset: 0x0001B9F0
[Token(Token = "0x6004E62")]
[Address(RVA = "0xFF00DC", Offset = "0xFF00DC", VA = "0xFF00DC")]
internal static bool CheckProtectionForDamageable(IDamageable damageable, Collider hitCollider, Vector3 hitPosition, float damage = 0f)
Shield Active:
Obfuscated:
// WeaponChargeShield
// Token: 0x170010EA RID: 4330
// (get) Token: 0x0600681C RID: 26652 RVA: 0x0001D7D8 File Offset: 0x0001B9D8
// (set) Token: 0x0600681D RID: 26653 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000C18")]
internal bool shieldActive
{
	[Token(Token = "0x6004E5E")]
	[Address(RVA = "0xFEFDF0", Offset = "0xFEFDF0", VA = "0xFEFDF0")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DE1E4", Offset = "0x6DE1E4")]
	get
	{
		return default(bool);
{
	return default(bool);
}
League For Wear::
// Wear
// Token: 0x0600686F RID: 26735 RVA: 0x0001D928 File Offset: 0x0001BB28
[Token(Token = "0x6004EA3")]
[Address(RVA = "0x25F25BC", Offset = "0x25F25BC", VA = "0x25F25BC")]
internal static int GetLeague(CategoryNames category, string idWear)
{
	return 0;
}
Armor Points:
Obfuscated:
// ArmoredWear
// Token: 0x0600585C RID: 22620 RVA: 0x00018AB0 File Offset: 0x00016CB0
[Token(Token = "0x600434B")]
[Address(RVA = "0x15559E8", Offset = "0x15559E8", VA = "0x15559E8")]
public float get_currentPoints()
{
	return 0f;
}
Gallery Gems 1:
// AlmanachController
// Token: 0x060000EC RID: 236 RVA: 0x000023D0 File Offset: 0x000005D0
[Token(Token = "0x60000C5")]
[Address(RVA = "0x19583E0", Offset = "0x19583E0", VA = "0x19583E0")]
internal static bool CanBeRewarded(ItemWeapon itemWeapon)
{
	return default(bool);
}
Gallery Gems 2:
// AlmanachController
// Token: 0x060000F8 RID: 248 RVA: 0x00002478 File Offset: 0x00000678
[Token(Token = "0x60000D1")]
[Address(RVA = "0x1959284", Offset = "0x1959284", VA = "0x1959284")]
internal static bool IsRewarded(AlmanachCollectWeaponsStep collectWeaponsStep)
{
	return default(bool);
}
Min Ratiing For Tourney League:
// TournamentController
// Token: 0x06006360 RID: 25440 RVA: 0x0001C128 File Offset: 0x0001A328
[Token(Token = "0x6004AE4")]
[Address(RVA = "0x1A0BA34", Offset = "0x1A0BA34", VA = "0x1A0BA34")]
internal int GetMinRatingForLeague(RatingSystem.RatingLeague league)
{
	return 0;
}
Coins Multiplier:
// RewardMultiplicator
// Token: 0x17000F05 RID: 3845
// (get) Token: 0x06005B8A RID: 23434 RVA: 0x00019530 File Offset: 0x00017730
// (set) Token: 0x06005B8B RID: 23435 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A95")]
internal int CoinsMultiplicator
{
	[Token(Token = "0x60045FA")]
	[Address(RVA = "0x1337E48", Offset = "0x1337E48", VA = "0x1337E48")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB268", Offset = "0x6DB268")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60045FB")]
	[Address(RVA = "0x1337D20", Offset = "0x1337D20", VA = "0x1337D20")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB278", Offset = "0x6DB278")]
	private set
	{
	}
}
Parts Multiplier:
// RewardMultiplicator
// Token: 0x17000F05 RID: 3845
// (get) Token: 0x06005B8A RID: 23434 RVA: 0x00019530 File Offset: 0x00017730
// (set) Token: 0x06005B8B RID: 23435 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A95")]
internal int CoinsMultiplicator
{
	[Token(Token = "0x60045FA")]
	[Address(RVA = "0x1337E48", Offset = "0x1337E48", VA = "0x1337E48")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB268", Offset = "0x6DB268")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60045FB")]
	[Address(RVA = "0x1337D20", Offset = "0x1337D20", VA = "0x1337D20")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB278", Offset = "0x6DB278")]
	private set
	{
	}
}
EXP Multiplier:
// RewardMultiplicator
// Token: 0x17000F06 RID: 3846
// (get) Token: 0x06005B8C RID: 23436 RVA: 0x00019548 File Offset: 0x00017748
// (set) Token: 0x06005B8D RID: 23437 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A96")]
internal int ExpMultiplicator
{
	[Token(Token = "0x60045FC")]
	[Address(RVA = "0x1337E50", Offset = "0x1337E50", VA = "0x1337E50")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB288", Offset = "0x6DB288")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60045FD")]
	[Address(RVA = "0x1337D28", Offset = "0x1337D28", VA = "0x1337D28")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB298", Offset = "0x6DB298")]
	private set
	{
	}
}
Parts Addition:
// RewardMultiplicator
// Token: 0x17000F12 RID: 3858
// (get) Token: 0x06005BA4 RID: 23460 RVA: 0x00019668 File Offset: 0x00017868
// (set) Token: 0x06005BA5 RID: 23461 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000AA2")]
internal int PartsAddition
{
	[Token(Token = "0x6004614")]
	[Address(RVA = "0x1337EE0", Offset = "0x1337EE0", VA = "0x1337EE0")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB408", Offset = "0x6DB408")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6004615")]
	[Address(RVA = "0x1337EE8", Offset = "0x1337EE8", VA = "0x1337EE8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB418", Offset = "0x6DB418")]
	set
	{
	}
}
Parts Multiplier:
// RewardMultiplicator
// Token: 0x17000F09 RID: 3849
// (get) Token: 0x06005B92 RID: 23442 RVA: 0x00019590 File Offset: 0x00017790
// (set) Token: 0x06005B93 RID: 23443 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A99")]
internal int DetailsMultiplicator
{
	[Token(Token = "0x6004602")]
	[Address(RVA = "0x1337E68", Offset = "0x1337E68", VA = "0x1337E68")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB2E8", Offset = "0x6DB2E8")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6004603")]
	[Address(RVA = "0x1337D40", Offset = "0x1337D40", VA = "0x1337D40")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB2F8", Offset = "0x6DB2F8")]
	private set
	{
	}
}
EXP Addition:
// RewardMultiplicator
// Token: 0x17000F0E RID: 3854
// (get) Token: 0x06005B9C RID: 23452 RVA: 0x00019608 File Offset: 0x00017808
// (set) Token: 0x06005B9D RID: 23453 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000A9E")]
internal int ExpAddition
{
	[Token(Token = "0x600460C")]
	[Address(RVA = "0x1337EA0", Offset = "0x1337EA0", VA = "0x1337EA0")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB388", Offset = "0x6DB388")]
	get
	{
		return 0;
	}
	[Token(Token = "0x600460D")]
	[Address(RVA = "0x1337EA8", Offset = "0x1337EA8", VA = "0x1337EA8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6DB398", Offset = "0x6DB398")]
	set
	{
	}
}
Duels Bet Refund/Reward IDK:
// DuelController
// Token: 0x06000E19 RID: 3609 RVA: 0x00005748 File Offset: 0x00003948
[Token(Token = "0x6000AE5")]
[Address(RVA = "0x137B3C8", Offset = "0x137B3C8", VA = "0x137B3C8")]
public int PayBetReward(bool deadHeat)
{
	return 0;
}
Host Duel:
// DuelController
// Token: 0x170001BA RID: 442
// (get) Token: 0x06000DBF RID: 3519 RVA: 0x000056B8 File Offset: 0x000038B8
[Token(Token = "0x17000119")]
public bool isMaster
{
	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x1370BA4", Offset = "0x1370BA4", VA = "0x1370BA4")]
	get
	{
		return default(bool);
	}
}
Duel Default Time:
// DuelController
// Token: 0x170001B3 RID: 435
// (get) Token: 0x06000DB7 RID: 3511 RVA: 0x00005628 File Offset: 0x00003828
[Token(Token = "0x17000112")]
public float playingTime
{
	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x1370580", Offset = "0x1370580", VA = "0x1370580")]
	get
	{
		return 0f;
	}
}
Duel Timer:
// DuelController
// Token: 0x170001B2 RID: 434
// (get) Token: 0x06000DB6 RID: 3510 RVA: 0x00005610 File Offset: 0x00003810
[Token(Token = "0x17000111")]
public float timeLeft
{
	[Token(Token = "0x6000A82")]
	[Address(RVA = "0x1370578", Offset = "0x1370578", VA = "0x1370578")]
	get
	{
		return 0f;
	}
}
Duel Bet Gems Value?
// DuelController
// Token: 0x170001BB RID: 443
// (get) Token: 0x06000E12 RID: 3602 RVA: 0x000056E8 File Offset: 0x000038E8
// (set) Token: 0x06000E11 RID: 3601 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700011A")]
private int spendedCurrency
{
	[Token(Token = "0x6000ADE")]
	[Address(RVA = "0x137B158", Offset = "0x137B158", VA = "0x137B158")]
	get
	{
		return 0;
	}
	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0x137B108", Offset = "0x137B108", VA = "0x137B108")]
	set
	{
	}
}

Is Paying User (No Ads!):
// MobileAdManager
// Token: 0x060054CF RID: 21711 RVA: 0x00017CB8 File Offset: 0x00015EB8
[Token(Token = "0x60040BD")]
[Address(RVA = "0x171E7C0", Offset = "0x171E7C0", VA = "0x171E7C0")]
internal static bool IsPayingUser()
{
	return default(bool);
}
Auto Shoot Delay:
// Player_move_c
// Token: 0x17000727 RID: 1831
// (get) Token: 0x060030D2 RID: 12498 RVA: 0x0000EB80 File Offset: 0x0000CD80
[Token(Token = "0x17000518")]
private float AutoShootDelay
{
	[Token(Token = "0x600271E")]
	[Address(RVA = "0xF7167C", Offset = "0xF7167C", VA = "0xF7167C")]
	get
	{
		return 0f;
	}
}
Auto Shoot Start Delay:
// Player_move_c
// Token: 0x17000726 RID: 1830
// (get) Token: 0x060030D1 RID: 12497 RVA: 0x0000EB68 File Offset: 0x0000CD68
[Token(Token = "0x17000517")]
private float AutoShootStartDelay
{
	[Token(Token = "0x600271D")]
	[Address(RVA = "0xF715E8", Offset = "0xF715E8", VA = "0xF715E8")]
	get
	{
		return 0f;
	}
}
Can Use Gadgets (Maybe bot but probably player):
// Player_move_c
// Token: 0x17000713 RID: 1811
// (get) Token: 0x06002FA1 RID: 12193 RVA: 0x0000E700 File Offset: 0x0000C900
[Token(Token = "0x17000504")]
internal bool canUseGadgets
{
	[Token(Token = "0x60025ED")]
	[Address(RVA = "0xF38494", Offset = "0xF38494", VA = "0xF38494")]
	get
	{
		return default(bool);
	}
}
Visual Kills Or Maybe Killstreak:
// Player_move_c
// Token: 0x170006EF RID: 1775
// (get) Token: 0x06002E87 RID: 11911 RVA: 0x0000E430 File Offset: 0x0000C630
// (set) Token: 0x06002E88 RID: 11912 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170004E0")]
internal int countKills
{
	[Token(Token = "0x60024D3")]
	[Address(RVA = "0xEF3988", Offset = "0xEF3988", VA = "0xEF3988")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60024D4")]
	[Address(RVA = "0xEF3994", Offset = "0xEF3994", VA = "0xEF3994")]
	set
	{
	}
}
Ur Team Kills Visual / Free Win:
// Player_move_c
// Token: 0x170006F0 RID: 1776
// (get) Token: 0x06002E89 RID: 11913 RVA: 0x0000E448 File Offset: 0x0000C648
// (set) Token: 0x06002E8A RID: 11914 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170004E1")]
internal int countKillsCommandBlue
{
	[Token(Token = "0x60024D5")]
	[Address(RVA = "0xEF39E4", Offset = "0xEF39E4", VA = "0xEF39E4")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60024D6")]
	[Address(RVA = "0xEF39F0", Offset = "0xEF39F0", VA = "0xEF39F0")]
	set
	{
	}
}
Enemy Team Kills Visual / Free Win:
// Player_move_c
// Token: 0x170006F1 RID: 1777
// (get) Token: 0x06002E8B RID: 11915 RVA: 0x0000E460 File Offset: 0x0000C660
// (set) Token: 0x06002E8C RID: 11916 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170004E2")]
internal int countKillsCommandRed
{
	[Token(Token = "0x60024D7")]
	[Address(RVA = "0xEF39FC", Offset = "0xEF39FC", VA = "0xEF39FC")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60024D8")]
	[Address(RVA = "0xEF3A08", Offset = "0xEF3A08", VA = "0xEF3A08")]
	set
	{
	}
}
Health:
// Player_move_c
// Token: 0x17000719 RID: 1817
// (get) Token: 0x06002FDC RID: 12252 RVA: 0x0000E7F0 File Offset: 0x0000C9F0
// (set) Token: 0x06002FDD RID: 12253 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700050A")]
internal float CurHealth
{
	[Token(Token = "0x6002628")]
	[Address(RVA = "0xEE1F08", Offset = "0xEE1F08", VA = "0xEE1F08")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x6002629")]
	[Address(RVA = "0xF21EE0", Offset = "0xF21EE0", VA = "0xF21EE0")]
	set
	{
	}
}
Mech Health:
// Player_move_c
// Token: 0x1700071B RID: 1819
// (get) Token: 0x06002FE0 RID: 12256 RVA: 0x0000E820 File Offset: 0x0000CA20
// (set) Token: 0x06002FE1 RID: 12257 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x1700050C")]
internal float curMechHealth
{
	[Token(Token = "0x600262C")]
	[Address(RVA = "0xF41318", Offset = "0xF41318", VA = "0xF41318")]
	get
	{
		return 0f;
	}
	[Token(Token = "0x600262D")]
	[Address(RVA = "0xF365E8", Offset = "0xF365E8", VA = "0xF365E8")]
	set
	{
	}
}
Explosion Damage Immunity:
// Player_move_c
// Token: 0x17000711 RID: 1809
// (get) Token: 0x06002F9E RID: 12190 RVA: 0x0000E6D0 File Offset: 0x0000C8D0
// (set) Token: 0x06002F9F RID: 12191 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000502")]
internal bool ExplosionDamageImmunity
{
	[Token(Token = "0x60025EA")]
	[Address(RVA = "0xF38254", Offset = "0xF38254", VA = "0xF38254")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6CED00", Offset = "0x6CED00")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60025EB")]
	[Address(RVA = "0xF3825C", Offset = "0xF3825C", VA = "0xF3825C")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6CED10", Offset = "0x6CED10")]
	private set
	{
	}
}
Godmode:
// Player_move_c
// Token: 0x170006F6 RID: 1782
// (get) Token: 0x06002E95 RID: 11925 RVA: 0x0000E4C0 File Offset: 0x0000C6C0
// (set) Token: 0x06002E96 RID: 11926 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170004E7")]
internal bool isImmortality
{
	[Token(Token = "0x60024E1")]
	[Address(RVA = "0xEE2028", Offset = "0xEE2028", VA = "0xEE2028")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60024E2")]
	[Address(RVA = "0xEE20F0", Offset = "0xEE20F0", VA = "0xEE20F0")]
	set
	{
	}
}
Start match early?
// Player_move_c
// Token: 0x170006EA RID: 1770
// (get) Token: 0x06002E80 RID: 11904 RVA: 0x0000E400 File Offset: 0x0000C600
[Token(Token = "0x170004DB")]
internal static bool isGo
{
	[Token(Token = "0x60024CC")]
	[Address(RVA = "0xEF36D0", Offset = "0xEF36D0", VA = "0xEF36D0")]
	get
	{
		return default(bool);
	}
}
Premium Rewards:
// Player_move_c
// Token: 0x170006F8 RID: 1784
// (get) Token: 0x06002E9A RID: 11930 RVA: 0x0000E4F0 File Offset: 0x0000C6F0
// (set) Token: 0x06002E99 RID: 11929 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170004E9")]
internal bool isNeedTakePremiumAccountRewards
{
	[Token(Token = "0x60024E6")]
	[Address(RVA = "0xEF3FD0", Offset = "0xEF3FD0", VA = "0xEF3FD0")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6CE170", Offset = "0x6CE170")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60024E5")]
	[Address(RVA = "0xEF3FC8", Offset = "0xEF3FC8", VA = "0xEF3FC8")]
	[Attribute(Name = "CompilerGeneratedAttribute", RVA = "0x6CE160", Offset = "0x6CE160")]
	private set
	{
	}
}
Fast Auto Shoot:
// Player_move_c
// Token: 0x17000723 RID: 1827
// (get) Token: 0x0600304A RID: 12362 RVA: 0x0000E910 File Offset: 0x0000CB10
// (set) Token: 0x0600304B RID: 12363 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000514")]
internal bool isShooting
{
	[Token(Token = "0x6002696")]
	[Address(RVA = "0xF2112C", Offset = "0xF2112C", VA = "0xF2112C")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x6002697")]
	[Address(RVA = "0xF590FC", Offset = "0xF590FC", VA = "0xF590FC")]
	set
	{
	}
}
Max Health:
// Player_move_c
// Token: 0x1700071C RID: 1820
// (get) Token: 0x06002FE2 RID: 12258 RVA: 0x0000E838 File Offset: 0x0000CA38
[Token(Token = "0x1700050D")]
internal float MaxHealth
{
	[Token(Token = "0x600262E")]
	[Address(RVA = "0xF3B3E0", Offset = "0xF3B3E0", VA = "0xF3B3E0")]
	get
	{
		return 0f;
	}
}
Armor Regeneration Timer:
// Player_move_c
// Token: 0x17000702 RID: 1794
// (get) Token: 0x06002EA9 RID: 11945 RVA: 0x0000E598 File Offset: 0x0000C798
[Token(Token = "0x170004F3")]
private float maxTimerRegenerationArmor
{
	[Token(Token = "0x60024F5")]
	[Address(RVA = "0xEF5BB8", Offset = "0xEF5BB8", VA = "0xEF5BB8")]
	get
	{
		return 0f;
	}
}
On Ladder (Hover/Fly?)
// Player_move_c
// Token: 0x17000700 RID: 1792
// (get) Token: 0x06002EA6 RID: 11942 RVA: 0x0000E568 File Offset: 0x0000C768
// (set) Token: 0x06002EA7 RID: 11943 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x170004F1")]
internal bool OnLadder
{
	[Token(Token = "0x60024F2")]
	[Address(RVA = "0xEE1F60", Offset = "0xEE1F60", VA = "0xEE1F60")]
	get
	{
		return default(bool);
	}
	[Token(Token = "0x60024F3")]
	[Address(RVA = "0xEF3BB0", Offset = "0xEF3BB0", VA = "0xEF3BB0")]
	set
	{
	}
}
Is Player Flying (Fly With Kick Bypass) I Think:
// Player_move_c
// Token: 0x170006FA RID: 1786
// (get) Token: 0x06002E9D RID: 11933 RVA: 0x0000E520 File Offset: 0x0000C720
[Token(Token = "0x170004EB")]
internal bool IsPlayerFlying
{
	[Token(Token = "0x60024E9")]
	[Address(RVA = "0xEF4018", Offset = "0xEF4018", VA = "0xEF4018")]
	get
	{
		return default(bool);
	}
}
Is Default Skin:
// WeaponSkinSettings
// Token: 0x17001413 RID: 5139
// (get) Token: 0x06007BDF RID: 31711 RVA: 0x00022C38 File Offset: 0x00020E38
[Token(Token = "0x17000E75")]
public bool IsDefault
{
	[Token(Token = "0x6005E3A")]
	[Address(RVA = "0x15D4240", Offset = "0x15D4240", VA = "0x15D4240")]
	get
	{
		return default(bool);
	}
}
Num of parts currency (free craft):
// PGCompany.CraftCurrencyUpdater
// Token: 0x0600EE3A RID: 60986 RVA: 0x00046740 File Offset: 0x00044940
[Token(Token = "0x600BAD1")]
[Address(RVA = "0x24A6D58", Offset = "0x24A6D58", VA = "0x24A6D58", Slot = "6")]
protected override int NumOfCurrency()
{
	return 0;
}
Num of coupons:
// PGCompany.CouponsCurrencyUpdater
// Token: 0x0600F0BC RID: 61628 RVA: 0x00046F38 File Offset: 0x00045138
[Token(Token = "0x600BCE7")]
[Address(RVA = "0x24A6610", Offset = "0x24A6610", VA = "0x24A6610", Slot = "6")]
protected override int NumOfCurrency()
{
	return 0;
}
Rocket Headshot Maybe Even All Headshot:
// Rocket
// Token: 0x1700082A RID: 2090
// (get) Token: 0x0600361C RID: 13852 RVA: 0x00010128 File Offset: 0x0000E328
[Token(Token = "0x17000571")]
private bool IsHeadshot
{
	[Token(Token = "0x60029DE")]
	[Address(RVA = "0x162556C", Offset = "0x162556C", VA = "0x162556C")]
	get
	{
		return default(bool);
	}
}
Is Rocket Hit (silent aim?) (no damage without damage hack):
// Rocket
// Token: 0x06003653 RID: 13907 RVA: 0x00010230 File Offset: 0x0000E430
[Token(Token = "0x6002A15")]
[Address(RVA = "0x1630C94", Offset = "0x1630C94", VA = "0x1630C94")]
private bool IsHitInDamageRadius(Vector3 targetPos, Vector3 selfPos, float radius)
{
	return default(bool);
}
Rocket damage coef:
// Rocket
// Token: 0x06003654 RID: 13908 RVA: 0x00010248 File Offset: 0x0000E448
[Token(Token = "0x6002A16")]
[Address(RVA = "0x1630DA4", Offset = "0x1630DA4", VA = "0x1630DA4")]
private float GetCoefDamageAtPoint(Vector3 pos, bool selfDamage = false)
{
	return 0f;
}
Not hitbox rockets:
// Rocket
// Token: 0x06003645 RID: 13893 RVA: 0x00010218 File Offset: 0x0000E418
[Token(Token = "0x6002A07")]
[Address(RVA = "0x162BCDC", Offset = "0x162BCDC", VA = "0x162BCDC")]
private bool GetRocketCollisionByRaycast(Vector3 posFrom, Vector3 posTo, out RaycastHit resultHit, Collider neededCollider, bool getRealCollision = false)
{
	return default(bool);
}
Is rocket hit (silent aim?) 3 or maybe does rocket have are damage:
// Rocket
// Token: 0x06003623 RID: 13859 RVA: 0x000101A0 File Offset: 0x0000E3A0
[Token(Token = "0x60029E5")]
[Address(RVA = "0x1625954", Offset = "0x1625954", VA = "0x1625954")]
private bool IsDamageByRadius()
{
	return default(bool);
}
Is rocket lopping shot:// Rocket
// Token: 0x06003622 RID: 13858 RVA: 0x00010188 File Offset: 0x0000E388
[Token(Token = "0x60029E4")]
[Address(RVA = "0x16258F8", Offset = "0x16258F8", VA = "0x16258F8")]
private bool IsGravityRocket(RocketSettings _rs)
{
	return default(bool);
}
Rocket self damage / hit yourself:
// Rocket
// Token: 0x06003641 RID: 13889 RVA: 0x000101E8 File Offset: 0x0000E3E8
[Token(Token = "0x6002A03")]
[Address(RVA = "0x162F454", Offset = "0x162F454", VA = "0x162F454")]
private bool IsSelfCollision(GameObject go)
{
	return default(bool);
}

Guns Collected For Coupons:
// AlmanachCollectWeaponsStep
// Token: 0x17000031 RID: 49
// (get) Token: 0x06000116 RID: 278 RVA: 0x00002598 File Offset: 0x00000798
// (set) Token: 0x06000117 RID: 279 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17000027")]
public int collectedCount
{
	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x19540C8", Offset = "0x19540C8", VA = "0x19540C8")]
	get
	{
		return 0;
	}
	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x1954238", Offset = "0x1954238", VA = "0x1954238")]
	set
	{
	}
}
Total Ammo:
// WeaponW
// Token: 0x17001749 RID: 5961
// (get) Token: 0x0600A159 RID: 41305 RVA: 0x0002B1D0 File Offset: 0x000293D0
// (set) Token: 0x0600A15A RID: 41306 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001749")]
internal int get_currentammoinbackpack
{
	[Token(Token = "0x600A159")]
	[Address(RVA = "0x38003A8", Offset = "0x38003A8", VA = "0x38003A8")]
	get
	{
		return 0;
	}
	[Token(Token = "0x600A15A")]
	[Address(RVA = "0x38003B4", Offset = "0x38003B4", VA = "0x38003B4")]
	set
	{
	}
}
Ammo In Clip:
// WeaponW
// Token: 0x17001748 RID: 5960
// (get) Token: 0x0600A157 RID: 41303 RVA: 0x0002B1B8 File Offset: 0x000293B8
// (set) Token: 0x0600A158 RID: 41304 RVA: 0x00002053 File Offset: 0x00000253
[Token(Token = "0x17001748")]
internal int get_currentammoinclip
{
	[Token(Token = "0x600A157")]
	[Address(RVA = "0x380034C", Offset = "0x380034C", VA = "0x380034C")]
	get
	{
		return 0;
	}
	[Token(Token = "0x600A158")]
	[Address(RVA = "0x3800358", Offset = "0x3800358", VA = "0x3800358")]
	set
	{
	}
}
Weapon Capacity For Modules:
Obfuscated:
// PGCompany.ModulesController
// Token: 0x0600F2F3 RID: 62195 RVA: 0x00047700 File Offset: 0x00045900
[Token(Token = "0x600BEBE")]
[Address(RVA = "0x1D8572C", Offset = "0x1D8572C", VA = "0x1D8572C")]
internal int GetCapacityForWeapon(int level)
{
	return 0;
}
Maximum Elemental Armor Mods:
// PGCompany.ModulesController
// Token: 0x0600F2F8 RID: 62200 RVA: 0x00047778 File Offset: 0x00045978
[Token(Token = "0x600BEC3")]
[Address(RVA = "0x1D85C10", Offset = "0x1D85C10", VA = "0x1D85C10")]
internal float GetMaximumElementalModificatorForArmor()
{
	return 0f;
}
Get Damage Modifier I think:
Obfuscated:
// PGCompany.ModulesController
// Token: 0x0600F2F7 RID: 62199 RVA: 0x00047760 File Offset: 0x00045960
[Token(Token = "0x600BEC2")]
[Address(RVA = "0x1D8592C", Offset = "0x1D8592C", VA = "0x1D8592C")]
internal float GetModificator(ModuleData module, ItemRarity rarity, bool forDungeon)
{
	return 0f;
}
Get Armor Durability Modifier I Think:
// PGCompany.ModulesController
// Token: 0x0600F2F6 RID: 62198 RVA: 0x00047748 File Offset: 0x00045948
[Token(Token = "0x600BEC1")]
[Address(RVA = "0x1D85BE8", Offset = "0x1D85BE8", VA = "0x1D85BE8")]
internal float GetModuleModificatorForArmor(ModuleData module, bool forDungeon)
{
	return 0f;
}
Get max mods in armor:
// PGCompany.ModulesController
// Token: 0x0600F2F4 RID: 62196 RVA: 0x00047718 File Offset: 0x00045918
[Token(Token = "0x600BEBF")]
[Address(RVA = "0x1D8525C", Offset = "0x1D8525C", VA = "0x1D8525C")]
internal int GetCapacityForArmor(int level)
{
	return 0;
}
Max mods in weapon:
// PGCompany.ModulesController
// Token: 0x0600F2F3 RID: 62195 RVA: 0x00047700 File Offset: 0x00045900
[Token(Token = "0x600BEBE")]
[Address(RVA = "0x1D8572C", Offset = "0x1D8572C", VA = "0x1D8572C")]
internal int GetCapacityForWeapon(int level)
{
	return 0;
}
Unlock modules at level:
// PGCompany.ModulesController
// Token: 0x170027F3 RID: 10227
// (get) Token: 0x0600F2E4 RID: 62180 RVA: 0x000476D0 File Offset: 0x000458D0
[Token(Token = "0x17002025")]
internal bool AvailableByPlayerLevel
{
	[Token(Token = "0x600BEAF")]
	[Address(RVA = "0x1D83630", Offset = "0x1D83630", VA = "0x1D83630")]
	get
	{
		return default(bool);
	}
}
Has active module offer (9999 module offers?):
// Rilisoft.Offers.ModulesOffersModule
// Token: 0x0600C585 RID: 50565 RVA: 0x00037D40 File Offset: 0x00035F40
[Token(Token = "0x6009432")]
[Address(RVA = "0x21B1EA8", Offset = "0x21B1EA8", VA = "0x21B1EA8", Slot = "12")]
public bool HasAnyActiveOffer()
{
	return default(bool);
}
Unlock all skins:
// SkinsController
// Token: 0x06000555 RID: 1365 RVA: 0x00003C18 File Offset: 0x00001E18
[Token(Token = "0x6000474")]
[Address(RVA = "0x18F7FD0", Offset = "0x18F7FD0", VA = "0x18F7FD0")]
internal static bool IsSkinBought(string skinIdToCheck)
{
	return default(bool);
}
Unlock all skins 2:
// SkinsController
// Token: 0x06000556 RID: 1366 RVA: 0x00003C30 File Offset: 0x00001E30
[Token(Token = "0x6000475")]
[Address(RVA = "0x18F8064", Offset = "0x18F8064", VA = "0x18F8064")]
internal static bool IsSkinBought(string skinIdToCheck, out bool isForMoneySkin)
{
	return default(bool);
}
Buy all skins:
// SkinsController
// Token: 0x06000554 RID: 1364 RVA: 0x00003C00 File Offset: 0x00001E00
[Token(Token = "0x6000473")]
[Address(RVA = "0x18F7F14", Offset = "0x18F7F14", VA = "0x18F7F14")]
internal static bool IsSkinForMoneySkin(string storeKitID)
{
	return default(bool);
}
Unlock all skins 3:
// SkinsController
// Token: 0x06000553 RID: 1363 RVA: 0x00003BE8 File Offset: 0x00001DE8
[Token(Token = "0x6000472")]
[Address(RVA = "0x18F7E68", Offset = "0x18F7E68", VA = "0x18F7E68")]
private static bool IsSkinWithStoreKitIdBought(string storeKitID)
{
	return default(bool);
}
Visual kill rate:
// KillRateCheck
// Token: 0x0600192B RID: 6443 RVA: 0x00007AD0 File Offset: 0x00005CD0
[Token(Token = "0x60012C7")]
[Address(RVA = "0x1C8089C", Offset = "0x1C8089C", VA = "0x1C8089C")]
public float GetKillRate()
{
	return 0f;
}
Get rounds per gun (idk, something battle royale?):
// KillRateCheck
// Token: 0x0600192F RID: 6447 RVA: 0x00007AE8 File Offset: 0x00005CE8
[Token(Token = "0x60012CB")]
[Address(RVA = "0x1C80CBC", Offset = "0x1C80CBC", VA = "0x1C80CBC")]
public int GetRoundsForGun()
{
	return 0;
}
Is ad completed:
// PGCompany.Ads.RewardedAdPromise
// Token: 0x170029F0 RID: 10736
// (get) Token: 0x0600FEC1 RID: 65217 RVA: 0x0004BC90 File Offset: 0x00049E90
[Token(Token = "0x170021CC")]
internal bool IsCompleted
{
	[Token(Token = "0x600C7C4")]
	[Address(RVA = "0x212E168", Offset = "0x212E168", VA = "0x212E168")]
	get
	{
		return default(bool);
	}
}
Is ad completed successfully:
// PGCompany.Ads.RewardedAdPromise
// Token: 0x170029F1 RID: 10737
// (get) Token: 0x0600FEC2 RID: 65218 RVA: 0x0004BCA8 File Offset: 0x00049EA8
[Token(Token = "0x170021CD")]
internal bool IsCompletedSuccessfully
{
	[Token(Token = "0x600C7C5")]
	[Address(RVA = "0x2135774", Offset = "0x2135774", VA = "0x2135774")]
	get
	{
		return default(bool);
	}
}
Is ad completed (infinite free currenyc?) 2:
// PGCompany.Ads.InterstitialAdPromise
// Token: 0x170029E8 RID: 10728
// (get) Token: 0x0600FEAE RID: 65198 RVA: 0x0004BBB8 File Offset: 0x00049DB8
[Token(Token = "0x170021C4")]
internal bool IsCompleted
{
	[Token(Token = "0x600C7B1")]
	[Address(RVA = "0x212D834", Offset = "0x212D834", VA = "0x212D834")]
	get
	{
		return default(bool);
	}
}
Is ad completed successfully 2:
// PGCompany.Ads.InterstitialAdPromise
// Token: 0x170029E9 RID: 10729
// (get) Token: 0x0600FEAF RID: 65199 RVA: 0x0004BBD0 File Offset: 0x00049DD0
[Token(Token = "0x170021C5")]
internal bool IsCompletedSuccessfully
{
	[Token(Token = "0x600C7B2")]
	[Address(RVA = "0x2130F1C", Offset = "0x2130F1C", VA = "0x2130F1C")]
	get
	{
		return default(bool);
	}
}

Has Elemental Module:
// PGCompany.ModuleStorage
// Token: 0x0600F35D RID: 62301 RVA: 0x00047B08 File Offset: 0x00045D08
[Token(Token = "0x600BEFB")]
[Address(RVA = "0x1D7E3B0", Offset = "0x1D7E3B0", VA = "0x1D7E3B0")]
internal bool HasElementalModule()
{
	return default(bool);
}
GME Task Thingy Available:
// PGCompany.GameModeEvents.GMERewardModificator
// Token: 0x1700286A RID: 10346
// (get) Token: 0x0600F59C RID: 62876 RVA: 0x00048660 File Offset: 0x00046860
[Token(Token = "0x17002086")]
internal bool IsAvailable
{
	[Token(Token = "0x600C08F")]
	[Address(RVA = "0x24BB75C", Offset = "0x24BB75C", VA = "0x24BB75C")]
	get
	{
		return default(bool);
	}
}

Module Value:
// PGCompany.ModulesController
// Token: 0x0600F2F7 RID: 62199 RVA: 0x00047760 File Offset: 0x00045960
[Token(Token = "0x600BEC2")]
[Address(RVA = "0x1D8592C", Offset = "0x1D8592C", VA = "0x1D8592C")]
internal float GetModificator(ModuleData module, ItemRarity rarity, bool forDungeon)
{
	return 0f;
}
Classes for some important bot stuff:
PlayerBotEntity
Class for bot and player stuff:
player_move_c
Big class with some important stuff:
Balancecontroller

UPDATE:
WHEN DOING STUFF IN DNSPY MAKE SURE YOU ONLY HAVE THE VERSION YOU WANT IN YOUR DNSPY INSTANCE - CLOSE ALL IN ASSEMBLY EXPLORER! OR ELSE YOU MAY GET CONFUSED!

Test One Hex Script Code:
hex = "FF C3 00 D1 F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 F4 FC 01 F0 88 A6 48 39 F3 03 00 AA E8 00 00 37"
edit = "20 00 80 D2 C0 03 5F D6"
gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
gg.clearResults()
gg.searchNumber("h" .. hex,gg.TYPE_BYTE)
gg.getResults(8)
gg.editAll("h" .. edit,gg.TYPE_BYTE)

Test All Hexes Script Code:
gg.setVisible(false)
hex = {"00 60 43 39 C0 03 5F D6 28 00 00 12 08 60 03 39 CD FF FF 17 EB 2B BB 6D E9 23 01 6D F6 57 02 A9 F4 4F 03 A9 FD 7B 04 A9 FD 03 01 91 F5 91 02 90",
"F4 4F BE A9 FD 7B 01 A9 FD 43 00 91 74 92 02 B0 88 76 7F 39 F3 03 00 AA E8 00 00 37 28 63 02 B0 08 C1 43 F9 00 01 40 B9 A0 D2 A5 97 E8 03 00 32",
"00 60 7E 39 C0 03 5F D6 E8 0F 1D FC F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 F3 03 00 AA 68 FE 47 FD E0 03 1F AA D8 A2 DD 97 00 00 62 1E 00 21 60 1E",
"88 24 82 52 00 68 68 38 C0 03 5F D6 F5 0F 1D F8 F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 54 90 02 D0 88 F6 42 39 F3 03 00 AA E8 00 00 37 68 67 02 90",
"00 F0 52 39 C0 03 5F D6 F7 0F 1C F8 F6 57 01 A9 F4 4F 02 A9 FD 7B 03 A9",
"00 88 77 39 C0 03 5F D6 F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 8E 02 F0 68 FA 44 39 E8 00 00 37 48",
"00 F4 52 39 C0 03 5F D6 F5 0F 1D F8 F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 B5 91 02 D0 A8 6A 7F 39"}
gg.clearList()
gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
i = 0
while i < #hex do
i = i + 1
gg.clearResults()
gg.searchNumber("h" .. hex[i],gg.TYPE_BYTE)
t = gg.getResults(8)
gg.addListItems(t)
gg.getResults(8)
gg.editAll("h 20 00 80 D2 C0 03 5F D6",gg.TYPE_BYTE) -- edits to 64bit hex of one, you can change to something else if needed
end

Test Hexes Quickly One By One Script Code:
hextotest = 1
hex = {"00 60 43 39 C0 03 5F D6 28 00 00 12 08 60 03 39 CD FF FF 17 EB 2B BB 6D E9 23 01 6D F6 57 02 A9 F4 4F 03 A9 FD 7B 04 A9 FD 03 01 91 F5 91 02 90",
"F4 4F BE A9 FD 7B 01 A9 FD 43 00 91 74 92 02 B0 88 76 7F 39 F3 03 00 AA E8 00 00 37 28 63 02 B0 08 C1 43 F9 00 01 40 B9 A0 D2 A5 97 E8 03 00 32",
"00 60 7E 39 C0 03 5F D6 E8 0F 1D FC F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 F3 03 00 AA 68 FE 47 FD E0 03 1F AA D8 A2 DD 97 00 00 62 1E 00 21 60 1E",
"88 24 82 52 00 68 68 38 C0 03 5F D6 F5 0F 1D F8 F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 54 90 02 D0 88 F6 42 39 F3 03 00 AA E8 00 00 37 68 67 02 90",
"00 F0 52 39 C0 03 5F D6 F7 0F 1C F8 F6 57 01 A9 F4 4F 02 A9 FD 7B 03 A9",
"00 88 77 39 C0 03 5F D6 F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 8E 02 F0 68 FA 44 39 E8 00 00 37 48",
"00 F4 52 39 C0 03 5F D6 F5 0F 1D F8 F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 B5 91 02 D0 A8 6A 7F 39"}
gg.clearList()
gg.clearResults()
gg.searchNumber("h" .. hex[hextotest],gg.TYPE_BYTE)
t = gg.getResults(8)
gg.addListItems(t)
gg.getResults(8)
gg.editAll("h 20 00 80 D2 C0 03 5F D6",gg.TYPE_BYTE) -- edits to 64bit hex of one, you can change to something else if needed 

Test hexes one by one all in one script and ask if they work script code:
gg.setVisible(false)
hex = {"F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 33 15 02 F0 68 72 68 39 E8 00 00 37 48 ED 01 90 08 F5 43 F9 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 33 15 02 D0 68 86 68 39 E8 00 00 37 E8 EC "," F6 57 BD A9 F4 4F 01 A9 FD 7B 02 A9 FD 83 00 91 33 15 02 D0 68 8A 68 39 E8 00 "," F4 4F BE A9 FD 7B 01 A9 FD 43 00 91 33 15 02 B0 68 A2 68 39 E8 00 00 37 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 33 15 02 90 68 AE 68 39 E8 00 00 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 FA 68 39 E8 00 00 37 28 F1 01 B0 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 FE 68 39 E8 00 00 37 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 02 69 39 E8 00 00 37 68 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 06 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 0A 69 39 E8 00 00 37 68 F1 01 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 0E 69 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 12 69 39 E8 00 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 16 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 1A 69 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 1E "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 F0 68 22 69 39 E8 "," F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 F3 14 02 D0 68 26 ",}
gg.clearList()
gg.setRanges(gg.REGION_C_DATA | gg.REGION_CODE_APP)
i = 0
while i < #hex do
i = i + 1
gg.clearResults()
gg.searchNumber("h" .. hex[i],gg.TYPE_BYTE)
t = gg.getResults(8)
gg.addListItems(t)
gg.getResults(8)
gg.editAll("h 20 00 80 D2 C0 03 5F D6",gg.TYPE_BYTE) -- edits to 64bit hex of one, you can change to something else if needed
gg.setVisible(false)
gg.alert("Test if this activates the hack, then click the gg icon.")
while true do
gg.sleep(300)
if gg.isVisible()then
break
end
end
gg.setVisible(false)
menu = gg.multiChoice({"Yes","No","Exit"},nil,'Was the hack activated?')
if menu[3] then
gg.setValues(t)
os.exit()
end
if menu[2] then
gg.setValues(t)
end
if menu[1] then
gg.setValues(t)
gg.alert("Great! The hex value is array entry " .. i .. " (" .. hex[i] .. ").")
os.exit()
end
end

Personal note stuff:
NOTE: Dump.cs is useful for checking, and sometimes even finding and deobfuscating!
NOTE: Use strings to deobfuscate in dnspy!
NOTE: To deobfuscate, see what methods use the class, then go to that method in obfuscated!
